<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Morfitronik</title>
    <link>https://morfikov.github.io/categories/android/</link>
    <description>Recent content in Android on Morfitronik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language>
    <lastBuildDate>Wed, 29 Jan 2020 19:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://morfikov.github.io/categories/android/feed.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Jak zmienić hostname w telefonie z Androidem</title>
      <link>https://morfikov.github.io/post/jak-zmienic-hostname-w-telefonie-z-androidem/</link>
      <pubDate>Wed, 29 Jan 2020 19:00:00 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-zmienic-hostname-w-telefonie-z-androidem/</guid>
      <description>&lt;p&gt;Przeglądając ostatnio listę sprzętów podłączonych do mojego routera WiFi, zauważyłem, że niektóre
pozycje na niej w polu z hostname mają coś na wzór &lt;code&gt;android-4c52c33baae0b4fa&lt;/code&gt; . Pierwsza część
nazwy tego hosta wskazuje na system operacyjny, a drugi kawałek to unikalny numerek ID.  Nie jestem
zbytnio fanem rozgłaszania takich informacji publicznie, bo mogą one ułatwić ewentualne ataki, oraz
też identyfikują jednoznacznie dane urządzenie (&lt;a href=&#34;https://source.android.com/devices/tech/connect/wifi-mac-randomization&#34;&gt;osobną kwestią jest adres MAC karty sieciowej&lt;/a&gt;).
Ponadto, mając w sieci wiele mobilnych urządzeń, ciężko jest czasem połapać się który telefon ma
przypisany konkretny adres IP (bez patrzenia w ustawienia telefonu). Z reguły na linux&#39;owym
desktopie czy laptopie zmiana hostname jest stosunkowo łatwym zadaniem ale w przypadku smartfona z
Androidem ten zabieg okazał się niezmiernie trudnym procesem. Jak zatem zmienić hostname telefonu,
by można było mu przypisać jakaś w miarę ludzką nazwę?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak zweryfikować plik APK aplikacji na Androida</title>
      <link>https://morfikov.github.io/post/jak-zweryfikowac-plik-apk-aplikacji-na-androida/</link>
      <pubDate>Fri, 13 Dec 2019 19:26:14 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-zweryfikowac-plik-apk-aplikacji-na-androida/</guid>
      <description>&lt;p&gt;Część użytkowników smartfonów z Androidem na pokładzie żyje w głębokim przekonaniu, że instalowanie
aplikacji spoza sklepu Google Play nie jest zbyt rozważnym posunięciem. Nie chodzi tutaj tylko o
szeroko rozumiane alternatywne źródła aplikacji, np. serwis apkmirror ale również o Yalp/Aurora
Store czy też repozytoria F-Droid. Zdaniem tych osób pobieranie aplikacji z zewnętrznych źródeł
może skompromitować bezpieczeństwo systemu oraz zagrozić naszej prywatności. No jakby nie patrzeć
wgrywanie czegokolwiek bez zastanowienia się co tak naprawdę instalujemy w systemie nie jest zbyt
mądre. Dlaczego zatem nie weryfikujemy aplikacji obecnych w oficjalnym sklepie Google? Co chwila
przecież można usłyszeć w mediach o syfie, który udało się co prawda z tego sklepu usunąć ale też
jakaś większa liczba użytkowników taką aplikację zdążyła już zainstalować i używała jej przez
dłuższy lub krótszy okres czasu. Rozumowanie na zasadzie, że aplikacje ze sklepu Google Play są
bezpieczne, bo są obecne w sklepie Google Play, daje nam jedynie fałszywe poczucie bezpieczeństwa,
które jest gorsze od całkowitego braku bezpieczeństwa, bo w tym drugim przypadku człowiek
przynajmniej jest świadom czyhających na niego niebezpieczeństw i włącza myślenie. Jak zatem
odróżnić aplikacje, które są w stanie nam wyrządzić krzywdę od tych, które tego nie mają na celu i
czy faktycznie pobieranie aplikacji na Androida z innego źródła niż oficjalny sklep Google Play
jest takie niebezpieczne?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Czy smartfon z Androidem bez Google Apps/Services ma sens</title>
      <link>https://morfikov.github.io/post/czy-smartfon-z-androidem-bez-google-apps-services-ma-sens/</link>
      <pubDate>Tue, 16 Apr 2019 21:00:15 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/czy-smartfon-z-androidem-bez-google-apps-services-ma-sens/</guid>
      <description>&lt;p&gt;Jakiś czas
temu &lt;a href=&#34;https://android.com.pl/programowanie/188397-po-co-nam-uslugi-google-play/&#34;&gt;natknąłem się na artykuł&lt;/a&gt;
chwalący Google Play Services i sugerujący zarazem, że nasz smartfon bez tych usług (i appek
zależnych od nich) na niewiele się zda człowiekowi. Nie jest to jednak do końca prawdą i
postanowiłem pokazać na żywym przykładzie jak wygląda operowanie na telefonie z Androidem
pozbawionym jakichkolwiek usług czy aplikacji własnościowych od Google. W rolach głównych wystąpi
mój smartfon LG G4C, który jest już dość leciwy ale można na niego wgrać LineageOS (lub też inny
ROM na bazie AOSP). Po wgraniu ROM&#39;u, w telefonie znajduje się jedynie garstka podstawowych
aplikacji (przeglądarka, galeria, itp), które po pierwsze są opensource, a po drugie można je bez
problemu wyłączyć jeśli nie zamierzamy z nich korzystać. Z telefonu można dzwonić, przeglądać net
(WiFi/LTE), robić zdjęcia i używać tego urządzenia do różnego rodzaju multimediów. W zasadzie czego
oczekiwać więcej od telefonu? Niektórzy jednak chcieli by mieć możliwość używania, np. nawigacji.
No i tu już zaczynają się schody, bo na takim w pełni otwartoźródłowym Androidzie, GPS nie zadziała
OOTB i potrzebna nam jest jakaś alternatywa w postaci pośrednika między aplikacjami a GPS.
Standardowo w Andkach tym zadaniem zajmują się właśnie te usługi Google. Jak więc zatem zmusić GPS
do poprawnej pracy nie chcąc przy tym wgrywać sobie tego rozbudowanego w uprawnieniach szpiega od
Google? Problemów naturalnie może być więcej, a to czy doświadczymy któregokolwiek z nich zależy
głównie od odpowiedniej konfiguracji systemu. Niniejszy artykuł postara się zebrać wszystkie te
niezbędne informacje mające na celu zaimplementowanie w naszym smartfonie otwartoźródłowej
alternatywy dla Google Play Services w postaci microG.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Większy stopień kompresii pliku recovery.img (TWRP)</title>
      <link>https://morfikov.github.io/post/wiekszy-stopien-kompresii-pliku-recovery-img-twrp/</link>
      <pubDate>Sat, 02 Feb 2019 06:33:44 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/wiekszy-stopien-kompresii-pliku-recovery-img-twrp/</guid>
      <description>&lt;p&gt;Ostatnio próbowałem zaktualizować obraz TWRP recovery dla jednego z moich telefonów. Ja generalnie
buduje te obrazy ze źródeł OMNI ROM, a tam jest dostępnych szereg gałęzi, np. 6.0, 7.1, 8.1 , etc,
które naturalnie pasują do odpowiadających im wersji Androida. Do tej pory budowałem w oparciu o
gałąź 7.1 ale po wydaniu polecenia &lt;code&gt;repo sync&lt;/code&gt; , szereg aktualizacji w stosunku do repozytorium
&lt;code&gt;bootable/recovery&lt;/code&gt; zostało pobranych, w tym też i jedna trefna, która uwalała proces kompilacji.
Ostatecznie &lt;a href=&#34;https://gerrit.omnirom.org/#/c/android_bootable_recovery/+/33485/&#34;&gt;udało się problem namierzyć i zlikwidować&lt;/a&gt;
ale w międzyczasie próbowałem zbudować obraz TWRP recovery z gałęzi 8.1. Wygląda na to, że im
nowszy Android, tym obrazy recovery rosną w objętość i 16M, które u mnie jest limitem, zostało
przekroczone o jakieś 500K i to przy najbardziej okrojonej funkcjonalności trybu recovery. Czy
istnieje jakieś rozwiązanie, które by umożliwiło zmniejszenie rozmiaru obrazu
&lt;code&gt;ramdisk-recovery.img&lt;/code&gt; , co przełożyłoby się również na wagę pliku &lt;code&gt;recovery.img&lt;/code&gt; ? Tak, trzeba
tylko zmienić rodzaj kompresji z domyślnego &lt;code&gt;gzip&lt;/code&gt; na &lt;code&gt;lzma&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak usunąć aplikacje bloatware ze smartfona z Androidem bez root</title>
      <link>https://morfikov.github.io/post/jak-usunac-aplikacje-bloatware-ze-smartfona-z-androidem-bez-root/</link>
      <pubDate>Sun, 27 Jan 2019 06:01:02 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-usunac-aplikacje-bloatware-ze-smartfona-z-androidem-bez-root/</guid>
      <description>&lt;p&gt;Jeśli mamy smartfon z Androidem na pokładzie, to zapewne każdy za nas zadawał sobie pytanie, czy da
radę z takiego telefonu pozbyć się szeregu aplikacji, z których praktycznie nie korzystamy na co
dzień. Część z tych programów można wyłączyć w ustawieniach systemowych ale są też i takie
aplikacje (głównie producenta telefonu, czy też operatora GSM albo te od Google), których
standardowo nie da się wyłączyć z poziomu działającego Androida. Nawet jeśli wymusimy zatrzymanie
stosownych usług, to za chwilę (lub po restarcie urządzenia) one i tak nam automatycznie wystartują.
Im więcej zbędnych aplikacji działa w tle, tym częstsze wybudzanie telefonu, a więc i szybsze
wyczerpywanie się baterii. Dlatego też jeśli nie korzystamy z wbudowanego w
ROM &lt;a href=&#34;https://en.wikipedia.org/wiki/Software_bloat&#34;&gt;bloatware&lt;/a&gt;, to przydałoby się go usunąć lub
chociaż trwale wyłączyć. Co ciekawe, tego typu proces nie musi odbywać się za sprawą administratora
systemu (root), bo w zasadzie każda aplikacja w Androidzie może zostać zainstalowana/odinstalowana
dla konkretnego użytkownika w systemie. Nie potrzebujemy mieć zatem nawet ukorzenionego Androida,
by pozbyć się tego całego syfu z systemu, który naszemu urządzeniu spędza sen z powiek i nie daje
mu się przy tym porządnie wyspać.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak przy pomocy Magisk&#39;a pogodzić SafetyNet i ADB/USB debug</title>
      <link>https://morfikov.github.io/post/jak-przy-pomocy-magiska-pogodzic-safetynet-i-adb-usb-debug/</link>
      <pubDate>Sat, 19 Jan 2019 21:12:11 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-przy-pomocy-magiska-pogodzic-safetynet-i-adb-usb-debug/</guid>
      <description>&lt;p&gt;Do tej pory zbytnio nie interesowałem się zagadnieniami dotyczącymi
mechanizmu &lt;a href=&#34;https://lineageos.org/Safetynet/&#34;&gt;SafetyNet&lt;/a&gt;, który ma na celu
utrudnić nieco życie użytkownikom smartfonów z Androidem lubiącym posiadać pełny dostęp do
systemu swoich urządzeń za sprawą uzyskania praw administratora (root). To co się zmieniło na
przestrzeni ostatnich paru miesięcy, to fakt, że coraz więcej aplikacji polega na tym całym
SafetyNet, a przynajmniej ja zaczynam coraz częściej korzystać z tego typu oprogramowania. Jeśli
jednak nasze urządzenie nie przejdzie testów SafetyNet, to funkcjonalność aplikacji polegających na
tym mechanizmie może zostać dość znacznie ograniczona. Przykładem może być appka Revolut i jej
odblokowanie za pomocą czytnika linii papilarnych. Bez SafetyNet trzeba podawać PIN za każdym
razem, gdy się do tej aplikacji będziemy próbowali zalogować. Zwykle do obejścia SafetyNet używa
się Magisk&#39;a ale w pewnych sytuacjach, nawet i on nie jest w stanie z tym zdaniem sobie poradzić,
przynajmniej nie bez dodatkowej konfiguracji. Jeśli na co dzień korzystamy z opcji debugowania
ADB/USB, to może nas spotkać nie lada dylemat -- ADB/USB debug vs. SafetyNet. Okazuje się, że można
pogodzić te dwie rzeczy.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kernel crash przy szyfrowaniu smartfona lub próbie resetu ustawień do fabrycznych</title>
      <link>https://morfikov.github.io/post/kernel-crash-przy-szyfrowaniu-smartfona-lub-probie-resetu-ustawien-do-fabrycznych/</link>
      <pubDate>Sat, 22 Sep 2018 11:13:00 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/kernel-crash-przy-szyfrowaniu-smartfona-lub-probie-resetu-ustawien-do-fabrycznych/</guid>
      <description>&lt;p&gt;Parę dni temu dowiedziałem się o &lt;a href=&#34;https://e.foundation/&#34;&gt;projekcie /e/&lt;/a&gt;. Z racji, że ten ROM jest
dostępny na mój smartfon LG G4C (jeszcze nieoficjalnie), to postanowiłem go sobie wgrać i zobaczyć
jak się będzie sprawował. Podczas testów nowego oprogramowania spróbowałem zaszyfrować partycję
&lt;code&gt;/data/&lt;/code&gt; . Problem w tym, że po automatycznym zresetowaniu się systemu, urządzenie już nie chciało
się uruchomić. Przez dłuższy czas widniało logo LG, a po chwili pojawił się czarny ekran z
informacją &amp;quot;Kernel Crash&amp;quot; lub niebieski ekran z informacją &amp;quot;Subsystem Crash&amp;quot;. Czy telefon w takiej
sytuacji nadaje się jedynie do wyrzucenia?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zmiana domyślnego hasła szyfrującego klucz główny w Neffos X1 i X1 Max</title>
      <link>https://morfikov.github.io/post/zmiana-domyslnego-hasla-szyfrujacego-klucz-glowny-w-neffos-x1-i-x1-max/</link>
      <pubDate>Wed, 16 May 2018 17:17:30 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/zmiana-domyslnego-hasla-szyfrujacego-klucz-glowny-w-neffos-x1-i-x1-max/</guid>
      <description>&lt;p&gt;Nie bawiłem się ostatnio Neffos&#39;ami ale w końcu udało mi się doprowadzić szyfrowanie w X1 Max (i
pewnie X1 też) do ładu. Dla przypomnienia, to w tych modelach najwyraźniej system zapomniał by
pytać użytkownika o hasło podczas konfiguracji, a że partycja z danymi użytkownikami jest
zaszyfrowana w standardzie (bez możliwości zmiany), to ustawiane jest domyślne hasło tj.
&lt;code&gt;default_password&lt;/code&gt; . W ten sposób z technicznego punktu widzenia wilk jest syty i owca cała,
no bo użytkownik nie jest dręczony dodatkowym hasłem przy uruchamianiu systemu (obok hasła blokady
ekranu), no i dane są zaszyfrowane, no chyba, że ktoś wpisze ten nieszczęsny
&lt;code&gt;default_password&lt;/code&gt; .&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak sprawdzić czy smartfon z Androidem podlega gwarancji</title>
      <link>https://morfikov.github.io/post/jak-sprawdzic-czy-smartfon-z-androidem-podlega-gwarancji/</link>
      <pubDate>Tue, 02 May 2017 17:19:22 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-sprawdzic-czy-smartfon-z-androidem-podlega-gwarancji/</guid>
      <description>&lt;p&gt;Gdy kupujemy smartfon, to jego producent daje nam na ten sprzęt gwarancję i przez pewien okres czasu
możemy nie martwić się o koszty ewentualnej naprawy. Niestety żyjemy w takich czasach, że sprzęt
elektroniczny potrafi nam paść sam z siebie i to do tego jeszcze w niewyjaśnionych okolicznościach.
Cześć wad jest fabrycznych (zwykle fizycznych) i te z reguły są oczywiste i łatwe do zdiagnozowania
przez support producenta sprzętu, który nabyliśmy. Niemniej jednak, czasami wady są natury czysto
programowej i tu z kolei ustalenie, gdzie dokładnie leży problem może już sprawiać kłopoty. Dlatego
też producenci telefonów zabezpieczają się przed zmianą firmware przez użytkownika. W ten sposób
wgrywając, np. TWRP recovery czy przeprowadzając proces root Androida, zwykle pozbawiamy się
gwarancji i mamy problem, gdy telefon w późniejszym czasie popsuje się nie z naszej winy. Nawet
jeśli wgramy stock&#39;owe oprogramowanie, to i tak producent sprzętu jest w stanie ustalić czy coś w
firmware mieszaliśmy. Zastanawialiście się może zatem skąd producent smartfona wie czy firmware
takiego urządzenia został w jakiś sposób przez nas zmieniony?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak usunąć blokadę bootloader&#39;a (OEM lock) w smartfonie z Androidem</title>
      <link>https://morfikov.github.io/post/jak-usunac-blokade-bootloadera-oem-lock-w-smartfonie-z-androidem/</link>
      <pubDate>Sun, 30 Apr 2017 19:17:15 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-usunac-blokade-bootloadera-oem-lock-w-smartfonie-z-androidem/</guid>
      <description>&lt;p&gt;Eksperymentując ostatnimi czasy ze smartfonami mającymi na pokładzie system Android nie zdarzyło mi
się jeszcze, by jakoś poważniej taki telefon uszkodzić. Oczywiście wiele razy złapałem soft brick&#39;a
(bootloop i inne takie) ale w zasadzie bez większego problemu szło z takiej sytuacji wybrnąć. Dziś
jednak sprawa była nieco bardziej poważna, bo mój &lt;a href=&#34;http://www.neffos.com/en/product/details/X1&#34;&gt;Neffos
X1&lt;/a&gt; nie chciał się po prostu uruchomić, a konkretnie to
pojawiało się logo TP-LINK i Android i telefon na tym ekranie startowym się zwyczajnie zawieszał.
Pikanterii dodaje jeszcze fakt, że przed sprawdzeniem czy telefon działa poprawnie, zablokowałem
bootloader przez &lt;code&gt;fastboot oem lock&lt;/code&gt; . Naturalnie bootloader można odblokować też przy użyciu
&lt;code&gt;fastboot&lt;/code&gt; ale po zresetowaniu urządzenia, ta opcja, którą się przełącza w ustawieniach
deweloperskich automatycznie wraca do pozycji zablokowanej. W taki sposób, by odblokować bootloader
ponownie, trzeba wejść w te opcje jeszcze raz i tam ściągnąć pierw blokadę OEM, a dopiero później
można mówić o bawieniu się &lt;code&gt;fastboot&lt;/code&gt; . A jak niby mamy wejść w te ustawienia jeśli system nie chce
wystartować, a my mamy stock&#39;owy firmware producenta smartfona? Czy taki stan rzeczy oznacza trwałe
uszkodzenie telefonu?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Repartycjonowanie flash&#39;a w Neffos C5 i C5 MAX od TP-LINK</title>
      <link>https://morfikov.github.io/post/repartycjonowanie-flash-w-neffos-c5-i-c5-max-od-tp-link/</link>
      <pubDate>Mon, 03 Apr 2017 19:51:32 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/repartycjonowanie-flash-w-neffos-c5-i-c5-max-od-tp-link/</guid>
      <description>&lt;p&gt;Analizując sobie fabryczny podział przestrzeni flash w TP-LINK&#39;owych smartfonach, a konkretnie w
modelach Neffos C5 i C5 MAX, doszedłem do wniosku, że producent tych urządzeń nieco zaszalał
przeznaczając aż 4 GiB przestrzeni na partycję &lt;code&gt;/system/&lt;/code&gt; . W zasadzie ROM w tych telefonach zajmuje
około 2 GiB. Zatem pozostałe 2 GiB zwyczajnie się marnuje i przeciętny użytkownik smartfona nie
będzie w stanie tego obszaru w żaden sposób wykorzystać. Można by zatem inaczej przepartycjonować
ten flash, tak by nieco skurczyć samą partycję &lt;code&gt;/system/&lt;/code&gt; , przeznaczając jednocześnie odzyskane
miejsce na powiększenie partycji &lt;code&gt;/data/&lt;/code&gt; . W tym wpisie postaramy się właśnie taki zabieg zmiany
rozmiaru partycji &lt;code&gt;/system/&lt;/code&gt; przeprowadzić dla tych dwóch wyżej wymienionych modeli smartfonów.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Root w smartfonach Neffos od TP-LINK (X1, C5, C5 MAX, Y5, Y5L)</title>
      <link>https://morfikov.github.io/post/root-w-smartfonach-neffos-od-tp-link-x1-c5-c5-max-y5-y5l/</link>
      <pubDate>Sun, 02 Apr 2017 19:27:56 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/root-w-smartfonach-neffos-od-tp-link-x1-c5-c5-max-y5-y5l/</guid>
      <description>&lt;p&gt;Jakiś czas temu opisywałem proces ukorzeniania (root) smartfonów Neffos, a konkretnie były to modele
&lt;a href=&#34;http://www.neffos.pl/product/details/C5&#34;&gt;C5&lt;/a&gt;, &lt;a href=&#34;http://www.neffos.pl/product/details/C5-Max&#34;&gt;C5
MAX&lt;/a&gt;, &lt;a href=&#34;http://www.neffos.pl/product/details/Y5&#34;&gt;Y5&lt;/a&gt; i
&lt;a href=&#34;http://www.neffos.pl/product/details/Y5L&#34;&gt;Y5L&lt;/a&gt;. Od tamtego czasu zdążyłem się nieco bardziej
zagłębić w struktury Androida i udało mi się ze źródeł &lt;a href=&#34;https://omnirom.org/&#34;&gt;OMNI ROM&lt;/a&gt; zbudować
natwyne obrazy TWRP dla każdego z tych ww. telefonów. Oczywiście TP-LINK ma w swojej ofercie jeszcze
modele &lt;a href=&#34;http://www.neffos.pl/product/details/C5L&#34;&gt;C5L&lt;/a&gt;,
&lt;a href=&#34;http://www.neffos.com/en/product/details/Y50&#34;&gt;Y50&lt;/a&gt;,
&lt;a href=&#34;http://www.neffos.com/en/product/details/X1&#34;&gt;X1&lt;/a&gt; oraz &lt;a href=&#34;http://www.neffos.com/en/product/details/X1Max&#34;&gt;X1
MAX&lt;/a&gt; ale póki co nie będę w stanie przygotować
obrazu TWRP i opisu jak ukorzenić Androidy w trzech z tych czterech smartfonów. Chodzi o to, że C5L
został wycofany z produkcji i raczej nie wpadnie on w moje łapki. Natomiast modele Y50 oraz X1 MAX
nie są jeszcze dostępne w polskiej ofercie TP-LINK&#39;a, przez co minie trochę czasu zanim uda mi się
do nich dobrać. Postanowiłem napisać świeży artykuł dotyczący procesu root w smartfonach Neffos C5,
C5 MAX, Y5, Y5L oraz X1. Po co pisać kolejny artykuł o ukorzenianiu Androida w Neffos&#39;ach?
Generalnie rzecz biorąc, w tych poprzednich wpisach było bardzo dużo informacji zbędnych z punktu
widzenia przeciętnego użytkownika, który chce zrootować system w swoim telefonie. Teraz, gdy
dysponuję natywnymi obrazami TWRP własnej roboty i zdobyłem nieco wiedzy z zakresu operowania na
Androidzie, to proces root jest o wiele prostszy i właśnie dlatego przydałoby się to wszystko opisać
na nowo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Szyfrowanie rozmów i SMS&#39;ów na smartfonie z Androidem (Signal)</title>
      <link>https://morfikov.github.io/post/szyfrowanie-rozmow-i-smsow-na-smartfonie-z-androidem-signal/</link>
      <pubDate>Sun, 26 Mar 2017 18:35:14 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/szyfrowanie-rozmow-i-smsow-na-smartfonie-z-androidem-signal/</guid>
      <description>&lt;p&gt;Każdy z nas ma już raczej w swoim posiadaniu telefon, czy jego nieco bardziej zaawansowaną wersję
określaną mianem smartfona. Te urządzenia to w zasadzie przenośne i do tego bardzo małe komputery,
które umożliwiają nam komunikowanie się z osobami na całym świecie. Wykonywanie połączeń głosowych,
przesyłanie SMS&#39;ów/MMS&#39;ów czy też korzystanie z Internetu w naszych komórkach od dawna jest już
standardem i ciężko byłoby nam się obejść bez tej technologii obecnie. Problem w tym, że nasza
komunikacja jest narażona na podsłuch. W przypadku Internetu większość połączeń jest już szyfrowana
na linii dwóch klientów (E2E, End To End). Natomiast jeśli chodzi o telefony, to tutaj sprawa kuleje
i to bardzo poważnie, bo w zasadzie nasze połączenia głosowe czy SMS&#39;y są do wglądu dla każdych
służb, które z jakiegoś powodu uznają, że mogą naruszać naszą prywatność. Jedyna opcja, która jest
w stanie zabezpieczyć nas przed tego typu praktykami, to szyfrowanie rozmów. Tak się składa, że jest
kilka aplikacji na Androida, które są w stanie realizować tego typu przedsięwzięcie. Jedną z nich
jest darmowa i otwartoźródłowa aplikacja Signal, której się przyjrzymy nieco bliżej w tym artykule.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Wgrywanie update.zip przez ADB sideload via TWRP recovery</title>
      <link>https://morfikov.github.io/post/android-wgrywanie-update-zip-przez-adb-sideload-via-twrp-recovery/</link>
      <pubDate>Thu, 09 Mar 2017 18:31:55 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-wgrywanie-update-zip-przez-adb-sideload-via-twrp-recovery/</guid>
      <description>&lt;p&gt;Po uszkodzeniu jednego z moich smartfonów TP-LINK i skasowaniu na nim wszystkich danych na partycji
&lt;code&gt;/system/&lt;/code&gt; trzeba było pomyśleć nad przywróceniem tego urządzenia do życia. Jednym z rozwiązać było
&lt;a href=&#34;https://morfikov.github.io
/post/android-jak-odratowac-smartfon-po-usunieciu-partycji-system/&#34;&gt;binarne wgranie obrazu systemowej partycji bezpośrednio na flash przy pomocy narzędzia
dd&lt;/a&gt;. Co jednak
w przypadku, gdy nie mamy dostępu do backup&#39;u lub tez zwyczajnie go nie zrobiliśmy? Co w takiej
sytuacji uczynić i czy jest jakaś nadzieja dla naszego telefonu? Odpowiedź jest naturalnie
twierdząca ale wymagane są dwie rzeczy: działający tryb recovery (najlepiej TWRP) ze wsparciem dla
trybu &amp;quot;ADB sideload&amp;quot; oraz paczka &lt;code&gt;update.zip&lt;/code&gt; z firmware, którą można pobrać bezpośrednio ze strony
TP-LINK/Neffos. By ulżyć nieco osobom, które do mnie piszą z zapytaniem o pomoc w przypadku
skasowania danych na partycji &lt;code&gt;/system/&lt;/code&gt; (czy uszkodzenia jej w jakiś sposób), postanowiłem napisać
krótkie howto na temat używania trybu ADB sideload. W tym artykule w rolach głównych weźmie udział
&lt;a href=&#34;http://www.neffos.pl/product/details/Y5&#34;&gt;Neffos Y5&lt;/a&gt; ale bez problemu można te kroki przeprowadzić
chyba na każdym innym smartfonie.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Jak odratować smartfon po usunięciu partycji /system/</title>
      <link>https://morfikov.github.io/post/android-jak-odratowac-smartfon-po-usunieciu-partycji-system/</link>
      <pubDate>Thu, 09 Mar 2017 14:24:44 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-jak-odratowac-smartfon-po-usunieciu-partycji-system/</guid>
      <description>&lt;p&gt;Zawsze mnie zastanawiało jak to jest możliwe, by przez przypadek można było usunąć dane na jeden z
kluczowych partycji w smartfonie jaką jest partycja &lt;code&gt;/system/&lt;/code&gt; . Ostatnio wiele osób do mnie pisało
z tego typu problemami i zapytaniem &amp;quot;jak odratować w takiej sytuacji telefon&amp;quot;. Odpowiedź wydawała mi
się prosta: wystarczy wgrać uprzednio zrobiony backup wyczyszczonej partycji via &lt;code&gt;fastboot&lt;/code&gt; .
Problem w tym, że po usunięciu danych z partycji &lt;code&gt;/system/&lt;/code&gt; , &lt;code&gt;fastboot&lt;/code&gt; nie działa. A skąd to wiem?
Ano &amp;quot;przez przypadek&amp;quot; usunąłem sobie dane na tej partycji. W sumie to tylko testowałem &lt;a href=&#34;https://twrp.me/faq/ADBSideload.html&#34;&gt;ficzer w
TWRP zwany ADB Sideload&lt;/a&gt;, który niby ma za zadanie wgrać ROM z
paczki &lt;code&gt;.zip&lt;/code&gt; . Coś poszło nie tak i w zasadzie zostałem z pustą partycją &lt;code&gt;/system/&lt;/code&gt; . Przy
odpalaniu telefonu w takim stanie, ten w zasadzie jedynie się resetuje co kilka chwil. Może i
&lt;code&gt;fastboot&lt;/code&gt; nie działa ale można wbić do trybu recovery. Jeśli tylko mamy wgrany TWRP, to jest spora
szansa na odratowanie smartfona. W tym artykule w rolach głównych wystąpi &lt;a href=&#34;http://www.neffos.pl/product/details/Y5L&#34;&gt;Neffos
Y5L&lt;/a&gt;, który ma SoC od Qualcomm&#39;a, zatem nie damy rady się
pobawić SP Flash Tool i całą robotę trzeba będzie odwalić ręcznie.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Zmiana trybu USB z Charge-Only na MTP w Marshmallow</title>
      <link>https://morfikov.github.io/post/android-zmiana-trybu-usb-z-charge-only-na-mtp-w-marshmallow/</link>
      <pubDate>Sun, 05 Mar 2017 18:25:13 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-zmiana-trybu-usb-z-charge-only-na-mtp-w-marshmallow/</guid>
      <description>&lt;p&gt;System Android w większej lub mniejszej części zmienia się z wydania na wydanie. Te nowsze wersje
zwykle zawierają całą masę nowych mechanizmów i rozbudowują te już istniejące, tak by ten OS w
lepszym stopniu zaspokajał zachcianki użytkowników smartfonów. Problem w tym, że niektóre kroki
deweloperów Androida potrafią wprawić w zastanowienie niejednego logicznie myślącego osobnika.
Przykładem może być przestawienie domyślnego trybu USB w Marshmallow z MTP na Charge-Only (tylko
ładowanie). Jedni mówią, że takie posunięcie jest podyktowane względami bezpieczeństwa, a inni, że
chodzi o performance przy ładowaniu baterii, gdzie moduł USB nie działa w tym drugim trybie i nie
konsumuje energii, przez co ładowanie ma przebiegać szybciej. Ile w tym prawdy, tego nie wiem ale ja
za bardzo nie widzę żadnych wymiernych korzyści z przestawienia tego trybu na Charge-Only. Natomiast
widzę bardzo wyraźnie utrudnienia przy interakcji telefonu z komputerem za sprawą tej zmiany.
Poszukałem trochę informacji na ten temat i znalazłem rozwiązanie w postaci aplikacji MTP enabler.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Framework Xposed i moduły do YouTube</title>
      <link>https://morfikov.github.io/post/android-framework-xposed-i-moduly-do-youtube/</link>
      <pubDate>Sat, 04 Mar 2017 21:56:54 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-framework-xposed-i-moduly-do-youtube/</guid>
      <description>&lt;p&gt;Stock&#39;owe Androidy w smartfonach mają ten problem, że zawierają całą masę preinstalowanych aplikacji
od Google. Nie to by jakoś mnie to bolało, no może za wyjątkiem braku możliwości ich wywalenia czy
wyłączenia. To co mnie trochę irytuje, to fakt obecności reklam w aplikacji YouTube. Nie da rady się
ich pozbyć praktycznie w żaden sposób. Zdaję sobie sprawę, że serwis YT można przeglądać w
Firefox&#39;ie i jeśli mamy &lt;a href=&#34;https://morfikov.github.io
/post/android-blokowanie-reklam-z-adaway-na-smartfonie/&#34;&gt;zainstalowanego w telefonie adblock&#39;a, np.
AdAway&lt;/a&gt;, czy też &lt;a href=&#34;https://morfikov.github.io
/post/blokowanie-reklam-adblock-na-domowym-routerze-wifi/&#34;&gt;wdrożony
podobny filtr na domowym routerze WiFi z
LEDE/OpenWRT&lt;/a&gt;, to te
reklamy mogą zostać z powodzeniem odfiltrowane, przynajmniej w Firefox&#39;ie. Jestem też świadom
istnienia &lt;a href=&#34;https://morfikov.github.io
/post/android-youtube-bez-reklam-na-smartfonie-newpipe/&#34;&gt;aplikacji
NewPipe&lt;/a&gt; , która jest
zubożonym klientem YouTube. Niemniej jednak, te opisane wyżej sposoby mają jedną podstawową wadę.
Mianowicie tracimy lwią część funkcjonalności serwisu YouTube. Przykładem mogą być powiadamiania w
przypadku, gdy na jeden z subskrybowanych kanałów zostanie wrzucony jaki materiał video. Taką opcję
ma ta aplikacja od Google ale klikając w powiadomienie jest niemal pewne, że włączy nam się jakaś
wredna reklama o wiele głośniejsza niż sam filmik, który zamierzamy obejrzeć. Innym problemem w
przypadku tej góglowskiej aplikacji jest brak możliwości odtwarzania video w tle czy też przy
zgaszonym wyświetlaczu. Postanowiłem w końcu wziąć się za ogarnięcie tej góglowskiej aplikacji
YouTube i wyeliminować te drażniące mnie problemy &lt;a href=&#34;http://repo.xposed.info/module/de.robv.android.xposed.installer&#34;&gt;instalując w smartfonie framework
Xposed&lt;/a&gt; wraz z odpowiednimi
modułami: &lt;a href=&#34;http://repo.xposed.info/module/com.pyler.youtubebackgroundplayback&#34;&gt;YouTube Background
Playback&lt;/a&gt; oraz &lt;a href=&#34;http://repo.xposed.info/module/ma.wanam.youtubeadaway&#34;&gt;YouTube
AdAway&lt;/a&gt;. Jako, że nie jest to proces łatwy,
to postanowiłem go opisać krok po kroku.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak zmienić hasło do zaszyfrowanego smartfona z Androidem</title>
      <link>https://morfikov.github.io/post/jak-zmienic-haslo-do-zaszyfrowanego-smartfona-z-androidem/</link>
      <pubDate>Fri, 03 Mar 2017 17:58:36 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-zmienic-haslo-do-zaszyfrowanego-smartfona-z-androidem/</guid>
      <description>&lt;p&gt;Każdy nowszy smartfon z Androidem oferuje możliwość zaszyfrowania wszystkich danych użytkownika
zlokalizowanych na partycji &lt;code&gt;/data/&lt;/code&gt; . Cały proces można przeprowadzić w bardzo prosty sposób i bez
większych problemów. Raz zaszyfrowanego telefonu nie da rady cofnąć do stadium przed szyfrowaniem i
w zasadzie to zabezpieczenie można zdjąć jedynie przez przywrócenie urządzenia do ustawień
fabrycznych. My tutaj jednak nie będziemy zajmować się samym szyfrowaniem smartfona i skupimy się
bardziej na hasłach zabezpieczających mających stać na straży dostępu do naszych cennych danych,
które mamy w telefonie. Większość z nas wykorzystuje krótkie hasło do odblokowania ekranu. To samo
hasło z kolei jest wykorzystywane do zaszyfrowania klucza używanego w procesie
szyfrowania/deszyfrowania danych na flash&#39;u smartfona. W ustawieniach Androida nie ma jednak opcji
rozdzielenia tych haseł i można by pomyśleć, że wykorzystanie czterocyfrowego kodu PIN jako
zabezpieczenie mija się z celem. Na pewno w części smartfonów tak ale niekoniecznie we wszystkich
modelach. Tak się składa, że akurat leży u mnie nieużywany Neffos Y5 od TP-LINK, to postanowiłem
przyjrzeć się nieco bliżej tej kwestii haseł i sprawdzić czy jest się czego obawiać stosując krótkie
hasła w zaszyfrowanych Androidach.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Budowanie obrazu TWRP recovery ze źródeł OMNI ROM</title>
      <link>https://morfikov.github.io/post/budowanie-obrazu-twrp-recovery-ze-zrodel-omni-rom/</link>
      <pubDate>Sun, 19 Feb 2017 21:06:04 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/budowanie-obrazu-twrp-recovery-ze-zrodel-omni-rom/</guid>
      <description>&lt;p&gt;Gdy zamierzamy zbudować sobie własny ROM na smartfon z Androidem, np.
&lt;a href=&#34;https://lineageos.org/&#34;&gt;LineageOS&lt;/a&gt; (CyanogenMod nie jest już rozwijany) czy nawet jedynie obraz
recovery (&lt;a href=&#34;https://twrp.me/&#34;&gt;TWRP&lt;/a&gt; albo &lt;a href=&#34;https://www.clockworkmod.com/&#34;&gt;CWM&lt;/a&gt;), to potrzebne nam jest
stosowne urządzenie oraz odpowiedni kod źródłowy. Skoro chcemy budować te ww. rzeczy, to
prawdopodobnie nasz telefon nie jest przez to oprogramowanie jeszcze wspierany lub też sam soft nie
jest regularnie aktualizowany przez dewelopera. W zasadzie zarówno pełne ROM&#39;y jak i obrazy recovery
są budowane ze źródeł Androida. Niemniej jednak, oficjalny kod dostarczany przez Google budzi czasem
wiele kontrowersji i ci nieco bardziej zaawansowani użytkownicy zmieniają go, np. czyniąc go w pełni
OpenSource czy też implementując w nim pewną niestandardową funkcjonalność. Tak powstają Custom
ROM&#39;y, które w późniejszym czasie z racji swojej popularności przestają być &amp;quot;Custom&amp;quot; i zaczynają żyć
swoim własnym życiem obok tego Góglowskiego Androida. W przypadku budowania obrazu recovery nie są
nam potrzebne całe źródła konkretnego ROM&#39;u. Jakby nie patrzeć, potrafią one zajmować trochę
miejsca, a poza tym proces ich budowania jest stosunkowo czasochłonny. Tak czy inaczej, jakieś
źródła trzeba pozyskać i przygotować je do dalszej pracy. W tym artykule nie będziemy sobie
jeszcze budować całego ROM&#39;u i skupimy się na zbudowaniu od podstaw jedynie obrazu TWRP recovery ze
źródeł &lt;a href=&#34;https://omnirom.org/&#34;&gt;OMNI ROM&lt;/a&gt;. Ten proces zostanie pokazany na przykładzie smartfona
Neffos Y5 od TP-LINK przy wykorzystaniu systemu linux, a konkretnie dystrybucji Debian.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Problem z zaszyfrowaniem partycji /data/ na smartfonie z Androidem</title>
      <link>https://morfikov.github.io/post/problem-z-zaszyfrowaniem-partycji-data-na-smartfonie-z-androidem/</link>
      <pubDate>Sat, 11 Feb 2017 18:59:25 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/problem-z-zaszyfrowaniem-partycji-data-na-smartfonie-z-androidem/</guid>
      <description>&lt;p&gt;Bawiąc się ostatnio trochę mechanizmami szyfrującymi w moich smartfonach Neffos podesłanych przez
TP-LINK, po raz kolejny coś nieopatrznie uszkodziłem. Tym razem sprawa wygląda nieco bardziej
poważnie, bo uwalony został cały moduł szyfrujący urządzenie. Chodzi generalnie o to, że w
Androidzie w wersji 4.4/5.0 została wprowadzona &lt;a href=&#34;https://source.android.com/security/encryption/full-disk&#34;&gt;możliwość zaszyfrowania wszystkich danych
użytkownika&lt;/a&gt;, tj. informacji
przechowywanych na partycji &lt;code&gt;/data/&lt;/code&gt; . Do odszyfrowania tej partycji potrzebny jest klucz
szyfrujący. Problem w tym, że Android musi gdzieś ten klucz trzymać i to w taki sposób, by proces
Factory Reset był w stanie ten klucz usunąć, choćby na wypadek zapomnienia hasła i próby odzyskania
w takiej sytuacji władzy nad smartfonem. Pech chciał, że akurat na moim Neffos Y5 mam wgrane TWRP
recovery i z jakiegoś powodu nie mogłem zresetować ustawień telefonu do fabrycznych przez ten tryb i
posłużyłem się narzędziem &lt;code&gt;fastboot&lt;/code&gt; . Ono najwyraźniej nieco inaczej formatuje partycję &lt;code&gt;/data/&lt;/code&gt; i
w ten sposób uwala cały mechanizm szyfrowania oferowany przez Androida. Czy da radę jakoś poprawić
ten problem, a jeśli tak to w jaki sposób?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak odszyfrować zawartość karty SD w smartfonie z Androidem</title>
      <link>https://morfikov.github.io/post/jak-odszyfrowac-zawartosc-karty-sd-w-smartfonie-z-androidem/</link>
      <pubDate>Thu, 09 Feb 2017 18:01:56 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-odszyfrowac-zawartosc-karty-sd-w-smartfonie-z-androidem/</guid>
      <description>&lt;p&gt;W Androidzie 6.0 Marshmallow został wprowadzony ciekawy mechanizm zwany &lt;a href=&#34;https://source.android.com/devices/storage/adoptable&#34;&gt;Adoptable
Storage&lt;/a&gt;, który umożliwia &lt;a href=&#34;https://morfikov.github.io
/post/android-formatowanie-karty-sd-jako-pamiec-wewnetrzna/&#34;&gt;zamontowanie karty
SD w smartfonie jako pamięć
wewnętrzna&lt;/a&gt;. W ten
sposób pamięć flash w telefonach, które mają jej niewiele, może zostać nieco rozbudowana. Jedyny
problem z tym całym Adoptable Storage jest taki, że Android szyfruje zawartość karty SD
automatycznie, przez co nie jesteśmy w stanie odczytać żadnych informacji z takiego nośnika na
innych urządzeniach. Istnieje jednak sposób, by rozszyfrować i tym samym uzyskać dostęp do danych
zgromadzonych na karcie SD z poziomu linux&#39;a, np. dystrybucji Debian. W tym artykule prześledzimy
sobie właśnie ten proces na przykładzie &lt;a href=&#34;http://www.neffos.pl/product/details/Y5&#34;&gt;smartfona Neffos
Y5&lt;/a&gt; od TP-LINK.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android Studio i Android SDK pod linux</title>
      <link>https://morfikov.github.io/post/android-studio-i-android-sdk-pod-linux/</link>
      <pubDate>Sun, 29 Jan 2017 18:29:36 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-studio-i-android-sdk-pod-linux/</guid>
      <description>&lt;p&gt;Rozpoczynając przygodę z Androidem (tylko taką nieco bardziej deweloperską) trzeba posiadać w
systemie szereg niezbędnych narzędzi. Chodzi tutaj oczywiście o Android SDK. Metod na instalację
tego pakietu na linux&#39;ie, a konkretnie w dystrybucji Debian, jest co najmniej kilka. Chodzi o to, że
Google udostępnia paczkę &lt;code&gt;.zip&lt;/code&gt; z Android SDK, którą można pobrać sobie z oficjalnej strony
Androida. Dodatkowo, na tej samej stronie mamy coś o nazwie Android Studio, które również jest w
stanie nam potrzebne narzędzia dostarczyć. Poza tym, te narzędzia można także skompilować sobie ze
źródeł Androida, jak i również zainstalować bezpośrednio z repozytorium samego Debiana. Niemniej
jednak, część z tych sposobów nie jest zbytnio wygodna, a pozostała część zakłada, że korzystamy z
najnowszej wersji Androida (obecnie Nougat). A co w przypadku, gdybyśmy chcieli operować na
Androidzie 5.1 (Lollipop) czy 6.0 (Marshmallow)? Jak zainstalować pasujące wersje narzędzi, by nic
nam się nie gryzło ze sobą?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak zlokalizować skradziony/zagubiony smartfon z Androidem</title>
      <link>https://morfikov.github.io/post/jak-zlokalizowac-skradziony-zagubiony-smartfon-z-androidem/</link>
      <pubDate>Fri, 27 Jan 2017 18:52:06 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-zlokalizowac-skradziony-zagubiony-smartfon-z-androidem/</guid>
      <description>&lt;p&gt;Smartfony towarzyszą nam w codziennym życiu praktycznie cały czas. Dlatego też zaczynamy
przechowywać w tych urządzeniach coraz to więcej informacji osobistych, które są w stanie dość
dokładnie opisać nasze życie prywatne. Co jednak w przypadku, gdy taki telefon zgubimy lub też
zostanie nam on skradziony przez kogoś? Gdy chodzi o urządzenia z Androidem, to Google oferuje
usługę, która jest w stanie połączyć się z naszym smartfonem i przy odrobinie szczęścia ujawnić
nam jego położenie geograficzne lub też pozwolić nam na zdalne zablokowanie systemu w telefonie.
Chodzi oczywiście o usługę &amp;quot;Znajdź telefon/smartfon&amp;quot; (find my phone), na którą rzucimy sobie okiem w
tym artykule.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Factory Reset Protection (FRP) w smartfonach z Androidem</title>
      <link>https://morfikov.github.io/post/factory-reset-protection-frp-w-smartfonach-z-androidem/</link>
      <pubDate>Fri, 20 Jan 2017 18:37:11 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/factory-reset-protection-frp-w-smartfonach-z-androidem/</guid>
      <description>&lt;p&gt;Kupowanie telefonów czy smartfonów z Androidem z innych źródeł niż oficjalne punkty sprzedaży nie
zawsze jest bezpieczną opcją. Gdy nabywamy takie urządzenie od znajomego, to raczej nie powinniśmy
się martwić o to, że ten telefon może być kradziony. Niemniej jednak, po zakupie takiego urządzenia,
poprzedni użytkownik zwykle resetuje jego ustawienia do fabrycznych, by klient miał świeży system i
nie był w stanie uzyskać dostępu do prywatnych danych poprzedniego właściciela smartfona. Nie byłoby
w tym nic nadzwyczajnego, gdyby nie fakt, że nabywca tak odsprzedanego telefonu może mieć pewne
problemy ze skonfigurowaniem Androida, bo ten system zwróci mu komunikat: &amp;quot;Urządzenie zostało
zresetowane. Aby kontynuować, zaloguj się na konto Google, które było wcześniej synchronizowane na
tym urządzeniu&amp;quot;, czyli telefon został zablokowany przez mechanizm Factory Reset Protection Lock (FRP
Lock). Jeśli znajomy mieszka blisko nas, to naturalnie możemy się przejść do niego w celu zdjęcia
tej blokady. A co w przypadku, gdy nabyliśmy urządzenie na odległość? Czy jest jakiś sposób na
obejście tej blokady w przypadku smartfonów Neffos od TP-LINK?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Backup partycji /data/ w smartfonach przez recovery TWRP</title>
      <link>https://morfikov.github.io/post/backup-partycji-data-w-smartfonach-przez-recovery-twrp/</link>
      <pubDate>Sun, 15 Jan 2017 18:20:11 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/backup-partycji-data-w-smartfonach-przez-recovery-twrp/</guid>
      <description>&lt;p&gt;W artykułach dotyczących przeprowadzania procesu root na smartfonach Neffos
&lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-y5-od-tp-link/&#34;&gt;Y5&lt;/a&gt; oraz
&lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-y5l-tp-link/&#34;&gt;Y5L&lt;/a&gt; był pokazany sposób na
dokonanie backup&#39;u całego flash&#39;a tych urządzeń. Jeśli Android w naszym telefonie jest ukorzeniony
albo chociaż mamy wgrany obraz TWRP na partycję &lt;code&gt;/recovery/&lt;/code&gt; , to jesteśmy w stanie przeprowadzać
regularny backup wszystkich danych użytkownika z poziomu trybu recovery. Proces takiego backup&#39;u
będzie się nieco różnił w stosunku do tego opisywanego w wyżej podlinkowanych artykułach. W tym
przypadku nie będziemy robić kopii binarnej, a jedynie zgramy sobie wszystkie pliki znajdujące się
na partycji &lt;code&gt;/data/&lt;/code&gt; . W tym artykule zostanie pokazany sposób na przeprowadzanie procesu kopii
zapasowej w smartfonie Neffos Y5. Niemniej jednak, taki regularny backup można przeprowadzać
praktycznie w każdym smartfonie posiadającym recovery z TWRP.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak przeprowadzić unroot na smartfonie Neffos Y5L od TP-LINK</title>
      <link>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-y5l-tp-link/</link>
      <pubDate>Thu, 12 Jan 2017 20:07:33 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-y5l-tp-link/</guid>
      <description>&lt;p&gt;Przeprowadzenie &lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-y5l-tp-link/&#34;&gt;procesu root na smartfonie Neffos
Y5L&lt;/a&gt; od TP-LINK nie było tak
łatwe jak w przypadku innych modeli telefonów tego producenta. Niemniej jednak, trzeba zdawać sobie
sprawę, że ukorzenianie Androida niesie za sobą pewne zagrożenia. Nie chodzi tutaj tylko o
niezaufane aplikacje ale też trzeba brać pod uwagę możliwość przypadkowego (przypadki nie istnieją)
skasowania czy zmienienia plików systemowych, przez co nasz telefon może przestać nam działać
poprawnie lub też przestanie się w ogóle uruchamiać. Jeśli natomiast wgraliśmy SuperSU i praktycznie
w ogóle z niego nie korzystamy, to moim zdaniem lepiej jest przeprowadzić proces unroot i korzystać
z Neffos&#39;a Y5L, tak jak ze zwykłego urządzenia z Androidem na pokładzie. Proces cofania zmian w
systemie nie jest jakoś specjalnie trudny ale trzeba uważać, by w jego trakcie nie uszkodzić
smartfona. Ten artykuł ma na celu pokazanie jak cofnąć wszelkie zmiany wprowadzone w telefonie za
sprawą dostępu do praw administracyjnych w Neffos Y5L.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Root smartfona Neffos Y5L od TP-LINK</title>
      <link>https://morfikov.github.io/post/android-root-smartfona-neffos-y5l-tp-link/</link>
      <pubDate>Wed, 11 Jan 2017 19:30:26 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-root-smartfona-neffos-y5l-tp-link/</guid>
      <description>&lt;p&gt;Może i ten najtańszy smartfon w ofercie TP-LINK nie może popisać się najmocniejszymi podzespołami
ale w zasadzie ten fakt nie przeszkadza nam, by przeprowadzić na Neffos Y5L (TP801A) proces root.
Ten smartfon ma zbliżony SoC do Neffos Y5, a konkretnie mamy tutaj do czynienia z Snapdragon 210
(MSM8209) od Qualcomm&#39;a. Ten fakt sprawia, że w przypadku Neffos Y5L cały proces uzyskiwania
uprawnień administratora systemu przebiega bardzo podobnie do tego &lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-y5-od-tp-link/&#34;&gt;opisywanego wcześniej dla Neffos
Y5&lt;/a&gt;. Dlatego też poniższy
artykuł za bardzo się nie różni i w zasadzie został jedynie lekko przerobiony pod kątem zgodności ze
smartfonem Neffos Y5L.&lt;/p&gt;
&lt;p&gt;Prostszy sposób na przeprowadzanie procesu root w smartfonach Neffos od TP-LINK z wykorzystaniem
natywnych obrazów TWRP &lt;a href=&#34;https://morfikov.github.io
/post/root-w-smartfonach-neffos-od-tp-link-x1-c5-c5-max-y5-y5l/&#34;&gt;został opisany w nowym wątku&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Root Integrity Check w smartfonach z Androidem</title>
      <link>https://morfikov.github.io/post/root-integrity-check-w-smartfonach-z-androidem/</link>
      <pubDate>Tue, 10 Jan 2017 18:24:47 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/root-integrity-check-w-smartfonach-z-androidem/</guid>
      <description>&lt;p&gt;W smartfonach Neffos od TP-LINK, którymi mam możliwość się bawić, standardowo jest dostępny tryb
recovery, a telefon można uruchomić w tym trybie przez przyciśnięcie przycisków VolumeUP + Power. W
zasadzie jest to jeden z podstawowych trybów pracy smartfona, który może nam pomóc, gdy mamy
problemy z uruchomieniem urządzenia. Zwykle w trybie recovery przeprowadza się takie czynności jak
czyszczenie partycji &lt;code&gt;/cache/&lt;/code&gt; i &lt;code&gt;/data/&lt;/code&gt; (Factory Reset). Z poziomu trybu recovery jesteśmy także w
stanie przeprowadzić aktualizację firmware (tego oprogramowania, które zarządza naszym telefonem). W
tym artykule jednak nie będziemy dokonywać żadnych z tych powyżej opisanych czynności. W menu trybu
recovery jest jeszcze jedna ciekawa opcja, tj. Root Integrity Check. Do czego ona służy i jak
interpretować wynik skanowania?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak przeprowadzić unroot na smartfonie Neffos Y5 od TP-LINK</title>
      <link>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-y5-od-tp-link/</link>
      <pubDate>Sat, 07 Jan 2017 18:56:00 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-y5-od-tp-link/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-y5-od-tp-link/&#34;&gt;Przeprowadzenie procesu root na smartfonie Neffos
Y5&lt;/a&gt; od TP-LINK nie było tak
łatwe jak w przypadku innych modeli telefonów tego producenta. Niemniej jednak, trzeba zdawać sobie
sprawę, że ukorzenianie Androida niesie za sobą pewne zagrożenia. Nie chodzi tutaj tylko o
niezaufane aplikacje ale też trzeba brać pod uwagę możliwość przypadkowego (przypadki nie istnieją)
skasowania czy zmienienia plików systemowych, przez co nasz telefon może przestać nam działać
poprawnie lub też przestanie się w ogóle uruchamiać. Jeśli natomiast wgraliśmy SuperSU i praktycznie
w ogóle z niego nie korzystamy, to moim zdaniem lepiej jest przeprowadzić proces unroot i korzystać
z Neffos&#39;a Y5, tak jak ze zwykłego urządzenia z Androidem na pokładzie. Proces cofania zmian w
systemie nie jest jakoś specjalnie trudny ale trzeba uważać, by w jego trakcie nie uszkodzić
smartfona. Ten artykuł ma na celu pokazanie jak cofnąć wszelkie zmiany wprowadzone w telefonie za
sprawą dostępu do praw administracyjnych w Neffos Y5.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Root smartfona Neffos Y5 od TP-LINK</title>
      <link>https://morfikov.github.io/post/android-root-smartfona-neffos-y5-od-tp-link/</link>
      <pubDate>Fri, 06 Jan 2017 18:16:17 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-root-smartfona-neffos-y5-od-tp-link/</guid>
      <description>&lt;p&gt;Nie we wszystkich smartfonach Neffos da radę przeprowadzić proces root tak łatwo jak to miało
miejsce w przypadku modeli &lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-c5-od-tp-link/&#34;&gt;Neffos
C5&lt;/a&gt; i &lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-c5-max-od-tp-link/&#34;&gt;Neffos C5
MAX&lt;/a&gt;. TP-LINK ma w swojej
ofercie również &lt;a href=&#34;http://www.neffos.pl/product/details/Y5&#34;&gt;model Neffos Y5&lt;/a&gt; (TP802A) i on w
odróżnieniu do tych dwóch poprzednich ma inne podzespoły, a konkretnie SoC, którzy pochodzi od
producenta Qualcomm (Snapdragon 210, model MSM8909). Root smartfonów opartych o tego typu SoC
przebiega nieco inaczej ale jest generalnie do zrobienia, choć trzeba trochę się przyłożyć do
procesu backup&#39;u flash&#39;a telefonu. Pozostała część jest w miarę standardowa. W tym wpisie zostanie
przeprowadzony proces root smartfona Neffos Y5.&lt;/p&gt;
&lt;p&gt;Prostszy sposób na przeprowadzanie procesu root w smartfonach Neffos od TP-LINK z wykorzystaniem
natywnych obrazów TWRP &lt;a href=&#34;https://morfikov.github.io
/post/root-w-smartfonach-neffos-od-tp-link-x1-c5-c5-max-y5-y5l/&#34;&gt;został opisany w nowym wątku&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Przenoszenie danych ze ZRAM do RAM na smartfonie z Androidem</title>
      <link>https://morfikov.github.io/post/przenoszenie-danych-ze-zram-do-ram-na-smartfonie-z-androidem/</link>
      <pubDate>Mon, 02 Jan 2017 17:19:47 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/przenoszenie-danych-ze-zram-do-ram-na-smartfonie-z-androidem/</guid>
      <description>&lt;p&gt;Jak często zdarza się wam uruchamiać ponownie telefon czy smartfon? Raczej nikt z nas nie robi tego
zbyt często, tak jak ma to miejsce w przypadku desktopów, laptopów i innych tego typu standardowych
komputerów. System w smartfonie zwykle działa bez resetowania wiele tygodni czy nawet miesięcy, bo
niewiele rzeczy instalujemy, no i praktycznie nic nie aktualizujemy. Dlatego też nie ma potrzeby
uruchamiać ponownie Androida. Niemniej jednak są pewne przypadki, w których taki system jest w
stanie zachowywać się bardzo dziwnie i restart smartfona zwykle poprawia zaistniałe problemy. Chodzi
generalnie o utylizowanie baterii w większym stopniu, czy o ogólne uczucie spowolnienia pracy
systemu. Przyczyn takiego stanu rzeczy może być cała masa ale w tym konkretnym przypadku znaczenie
zdaje się mieć zbyt duże wykorzystanie pamięci RAM. W efekcie Android robi użytek z &lt;a href=&#34;https://www.kernel.org/doc/Documentation/blockdev/zram.txt&#34;&gt;urządzenia
ZRAM,&lt;/a&gt; które jest niczym innym jak tylko
skompresowanym wycinkiem pamięci operacyjnej, gdzie system stara się upchnąć dane w przypadku
kończenia się zasobów pamięci, a kompresja to przecież bardzo zasobożerny proces. Możemy taki
telefon wyłączać co jakiś czas ale istnieje prostsza metoda wyeliminowania problemu.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak przeprowadzić unroot na smartfonie Neffos C5 MAX od TP-LINK</title>
      <link>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-c5-max-od-tp-link/</link>
      <pubDate>Wed, 14 Dec 2016 19:08:01 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-c5-max-od-tp-link/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-c5-max-od-tp-link/&#34;&gt;Proces root na smartfonie Neffos C5
MAX&lt;/a&gt; od TP-LINK można
przeprowadzić w miarę bez większych problemów, choć nie jest to rozwiązanie działające OOTB.
Niemniej jednak, taki root telefonu czyni go bardziej podatnym na zagrożenia ze strony wrogich
aplikacji. Ponadto, kasując czy też zmieniając pliki systemowe, możemy sprawić, że nasze urządzenie
zwyczajnie przestanie nam działać, tj. już się nie uruchomi. Niektórzy użytkownicy smartfonów nie
zdają sobie z tego sprawy i ukorzeniają Androida bez głębszego zastanowienia się. Mi jako
linux&#39;iarzowi, root jest niezbędny do pracy ale czy aby na pewno każdy musi go mieć? Ci z was,
którzy taki root systemu przeprowadzili i nie korzystają z niego praktycznie wcale, zastanawiają
się pewnie czy istnieje sposób, by cofnąć wprowadzone zmiany i przywrócić Androida do stanu
pierwotnego. Krótka odpowiedź brzmi: &amp;quot;oczywiście, że tak&amp;quot; i temu procesowi przyjrzymy się w
niniejszym artykule.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Root smartfona Neffos C5 MAX od TP-LINK</title>
      <link>https://morfikov.github.io/post/android-root-smartfona-neffos-c5-max-od-tp-link/</link>
      <pubDate>Tue, 13 Dec 2016 17:27:37 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-root-smartfona-neffos-c5-max-od-tp-link/</guid>
      <description>&lt;p&gt;Bawiąc się ostatnio &lt;a href=&#34;https://morfikov.github.io
/post/recenzja-smartfon-neffos-c5-max-od-tp-link/&#34;&gt;smartfonem Neffos C5
MAX&lt;/a&gt; od TP-LINK, obiecałem
sobie, że jak tylko będę miał chwilę czasu, to postaram się ukorzenić Androida, który w tym
telefonie siedzi (Lollipop). Generalnie rzecz biorąc, sposób root&#39;owania tego urządzenia jest bardzo
podobny do tego, który miałem już możliwość &lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-c5-od-tp-link/&#34;&gt;przeprowadzić na innym modelu TP-LINK&#39;a, tj. Neffos
C5&lt;/a&gt;. Dlatego też poniższy
artykuł jest bardzo zbliżony treścią, choć lekko zaktualizowany pod kątem Neffos&#39;a C5 MAX. Grunt, że
nie było żadnych problemów z przeprowadzeniem backup&#39;u flash&#39;a telefonu jak i samego procesu root.&lt;/p&gt;
&lt;p&gt;Prostszy sposób na przeprowadzanie procesu root w smartfonach Neffos od TP-LINK z wykorzystaniem
natywnych obrazów TWRP &lt;a href=&#34;https://morfikov.github.io
/post/root-w-smartfonach-neffos-od-tp-link-x1-c5-c5-max-y5-y5l/&#34;&gt;został opisany w nowym wątku&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak skonfigurować połączenie VPN na smartfonie z Androidem</title>
      <link>https://morfikov.github.io/post/jak-skonfigurowac-polaczenie-vpn-na-smartfonie-z-androidem/</link>
      <pubDate>Wed, 07 Dec 2016 18:54:37 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-skonfigurowac-polaczenie-vpn-na-smartfonie-z-androidem/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://morfikov.github.io
/post/jak-skonfigurowac-serwer-vpn-na-debianie-openvpn/&#34;&gt;W artykule o postawieniu serwera
VPN&lt;/a&gt; poruszyłem jedynie
kwestię konfiguracji klienta mającego system operacyjny z rodziny linux, a konkretnie była to
dystrybucja Debian. Niemniej jednak, mając działający serwer VPN gdzieś tam za granicą, możemy
również do niego podłączyć się za pomocą smartfona z Androidem i to praktycznie z dowolnego miejsca
na ziemi. W ten sposób możemy zabezpieczyć nasze połączenie przed cenzurą internetu, która obecnie
jest przeprowadzana na naszych oczach. Jako, że smartfony są popularniejsze od komputerów czy
laptopów i zwykle przesyłamy z nich tak samo ważne (albo i ważniejsze) dane, to wypadałoby
zaszyfrować cały ruch z takiego telefonu. Niniejszy wpis będzie właśnie dotyczył tego tematu, który
zostanie opisany w oparciu &lt;a href=&#34;http://www.neffos.pl/product/details/C5&#34;&gt;smartfon Neffos C5&lt;/a&gt; od TP-LINK
mający na pokładzie Androida w wersji 5.1 (Lollipop).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Formatowanie karty SD jako pamięć wewnętrzna</title>
      <link>https://morfikov.github.io/post/android-formatowanie-karty-sd-jako-pamiec-wewnetrzna/</link>
      <pubDate>Sun, 04 Dec 2016 19:18:40 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-formatowanie-karty-sd-jako-pamiec-wewnetrzna/</guid>
      <description>&lt;p&gt;Jakiś czas temu bawiąc się jednym z TP-LINK&#39;owch smartfonów, konkretnie to był &lt;a href=&#34;http://www.neffos.pl/product/details/C5&#34;&gt;model Neffos
C5&lt;/a&gt;, nie byłem zbytnio zadowolony z faktu, że karta SD w
takim telefonie może być sformatowana jedynie systemem plików z rodziny FAT. Takie rozwiązanie
niesie ze sobą pewne niedogodności, bo &lt;a href=&#34;https://pl.wikipedia.org/wiki/FAT32&#34;&gt;system plików FAT ma dość spore
ograniczenia&lt;/a&gt; jeśli chodzi o przechowywanie informacji.
Niekoniecznie wszyscy musimy wgrywać na smartfona bardzo duże pliki czy też trzymać ich tam setki
GiB, bo to jest raczej rzadkością, ale brak wsparcia uprawnień do plików i katalogów w systemie
plików FAT powoduje, że aplikacje w Androidzie nie chcą zapisywać swoich danych na karcie SD, która
taki system plików wykorzystuje. W efekcie trzeba kombinować, by &lt;a href=&#34;https://morfikov.github.io
/post/android-brak-mozliwosci-zapisu-danych-na-karcie-sd-neffos-c5/&#34;&gt;aplikacja kamery/aparatu
zapisywała zdjęcia czy materiał video na karcie
SD&lt;/a&gt;. Na
smartfonach TP-LINK&#39;a, które mają zainstalowany Android 6.0 Marshmallow, np.
&lt;a href=&#34;http://www.neffos.pl/product/details/Y5L&#34;&gt;Y5&lt;/a&gt; czy &lt;a href=&#34;http://www.neffos.pl/product/details/Y5L&#34;&gt;Y5L&lt;/a&gt;),
jesteśmy w stanie sformatować karty SD jako pamięć wewnętrzna za sprawą wprowadzonego w tej wersji
Androida &lt;a href=&#34;https://source.android.com/devices/storage/adoptable&#34;&gt;mechanizmu Adoptable Storage&lt;/a&gt;.
Postanowiłem zatem sprawdzić jak taki proces formatowania karty SD przebiega i co dokładnie może nam
przynieść jego przeprowadzenie.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Aplikacja tpMiFi do zarządzania routerami 3G/LTE od TP-LINK</title>
      <link>https://morfikov.github.io/post/aplikacja-tpmifi-do-zarzadzania-routerami-3g-lte-tp-link/</link>
      <pubDate>Fri, 25 Nov 2016 20:57:39 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/aplikacja-tpmifi-do-zarzadzania-routerami-3g-lte-tp-link/</guid>
      <description>&lt;p&gt;Jakiś czas temu opisywałem jeden z mobilnych routerów WiFi, który był w stanie realizować połączenie
LTE i udostępniać je w obrębie swojej sieci. Konkretnie był to &lt;a href=&#34;https://morfikov.github.io
/post/recenzja-przenosny-router-lte3g-mifi-m7310-od-tp-link/&#34;&gt;hotspot
M7310&lt;/a&gt;. W recenzji
tego urządzenia wspomniałem o tym, że dysponując smartfonem jesteśmy w stanie przy jego pomocy
zarządzać tym routerem. Oczywiście potrzebna jest do tego celu specjalna aplikacja tpMiFi
wypuszczona również przez TP-LINK, którą można pobrać bez większego problemu z Google Play. Jako, że
w tamtym wpisie potraktowałem temat tej aplikacji jedynie powierzchownie, to postanowiłem nieco
bardziej się jej przyjrzeć i dokładnie opisać jej właściwości.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Aplikacja Tether do zarządzania urządzeniami TP-LINK przez smartfon</title>
      <link>https://morfikov.github.io/post/aplikacja-tether-do-zarzadzania-urzadzeniami-tp-link-przez-smartfon/</link>
      <pubDate>Thu, 24 Nov 2016 21:02:26 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/aplikacja-tether-do-zarzadzania-urzadzeniami-tp-link-przez-smartfon/</guid>
      <description>&lt;p&gt;TP-LINK ma w swojej ofercie szereg urządzeń, którymi można zarządzać z grubsza na dwa sposoby.
Pierwszym jest raczej znany nam wszystkim panel administracyjny dostępny z poziomu przeglądarki
internetowej zainstalowanej na dowolnym komputerze czy laptopie. Drugim ze sposobów jest
wykorzystanie smartfona i dedykowanej aplikacji Tether na Androida/iOS. Webowy panel administracyjny
zwykł udostępniać nam całą masę opcji, a jak jest w przypadku aplikacji Tether?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Aplikacja tpCamera do obsługi kamer TP-LINK z poziomu smartfona</title>
      <link>https://morfikov.github.io/post/aplikacja-tpcamera-do-obslugi-kamer-tp-link-z-poziomu-smartfona/</link>
      <pubDate>Thu, 10 Nov 2016 22:59:13 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/aplikacja-tpcamera-do-obslugi-kamer-tp-link-z-poziomu-smartfona/</guid>
      <description>&lt;p&gt;Kamery IP to bardzo użyteczne urządzenia, choć ich obsługa nie zawsze jest wygodna. Nie chodzi tutaj
o zarządzenie nimi, bo taka kamera ma przecie swój własny adres IP i możemy bez większego problemu
dostać się do jej panelu administracyjnego przez sieć, w tym też nawet i po WiFi. Niemniej jednak,
gdy jesteśmy w terenie, to bardzo rzadko mamy przy sobie komputer czy nawet laptop, na którym
moglibyśmy zainstalować odpowiedni soft w celu uzyskania podglądu obrazu z takiej kamery. W
przypadku kamer od TP-LINK sprawa wygląda nieco inaczej, bo mamy tutaj możliwość zaprzęgnięcia do
pracy smartfona. Taki telefon można bez problemu połączyć z kamerą, z tym, że potrzebna nam będzie
do tego specjalna aplikacja: tpCamera. Zobaczmy zatem do czego może ona nam się przydać.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>XDA Labs: Repozytorium aplikacji i modułów Xposed</title>
      <link>https://morfikov.github.io/post/xda-labs-repozytorium-aplikacji-modulow-xposed/</link>
      <pubDate>Thu, 10 Nov 2016 16:44:05 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/xda-labs-repozytorium-aplikacji-modulow-xposed/</guid>
      <description>&lt;p&gt;Przeglądając sobie forum XDA w poszukiwaniu pewnych informacji natrafiłem na &lt;a href=&#34;https://forum.xda-developers.com/android/apps-games/labs-t3241866&#34;&gt;XDA
Labs&lt;/a&gt;. Niby jest to aplikacja
mająca na celu poprawę doznań przy przeglądaniu tego forum na urządzeniach mobilnych ale posiada
ona też kilka użytecznych funkcji niekoniecznie związanych bezpośrednio z interakcją ze stroną
xda-developers. Przede wszystkim, mamy tutaj dostęp do repozytorium aplikacji na Androida, mniej
więcej coś jak
&lt;a href=&#34;https://morfikov.github.io
/post/android-repozytorium-aplikacji-opensource-f-droid/&#34;&gt;F-Droid&lt;/a&gt;. Przy pomocy
XDA Labs jesteśmy też w stanie w prosty sposób instalować moduły Xposed. Te powyższe rzeczy
sprawiły, że postanowiłem się nieco bliżej przyjrzeć aplikacji XDA Labs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Wifi Roaming Fix i SWIFI, czyli roaming w smartfonie</title>
      <link>https://morfikov.github.io/post/wifi-roaming-fix-swifi-roaming-w-smartfonie/</link>
      <pubDate>Thu, 03 Nov 2016 19:33:54 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/wifi-roaming-fix-swifi-roaming-w-smartfonie/</guid>
      <description>&lt;p&gt;Ostatnimi czasy coraz więcej sieci domowych zaczyna być wyposażanych w sprzęt umożliwiający
połączenie bezprzewodowe. Router WiFi ma już chyba znaczna większość z nas ale nie są to jedyne
urządzenia, które są w stanie świadczyć bezprzewodowe usługi sieciowe. Im większy dystans dzieli
odbiornik od nadajnika lub też im więcej przeszkód stoi na bezpośredniej drodze komunikacji, tym
sygnał ulega większej degradacji. Zwykle w takiej sytuacji dokupujemy drugi router WiFi, ewentualnie
&lt;a href=&#34;http://www.tp-link.com.pl/products/list-12.html&#34;&gt;prosty AP&lt;/a&gt;, &lt;a href=&#34;http://www.tp-link.com.pl/products/list-10.html&#34;&gt;wzmacniacz sygnału
WiFi&lt;/a&gt; czy też &lt;a href=&#34;http://www.tp-link.com.pl/products/list-18.html&#34;&gt;ekstendery
powerline&lt;/a&gt; (PLC). Wszystko po to, by jakoś
przyzwoicie pokryć sygnałem całą przestrzeń użytkową naszego domu czy też miejsc, w których spędzamy
wolny czas. Każde takie urządzenie realizuje połączenie WiFi mniej więcej w ten sam sposób, tj.
zestawia punkt dostępu, do którego podłączamy komputer albo smartfona. O ile w przypadku desktopów
czy laptopów przełączanie się między tymi AP w zależności od siły sygnału nie stanowi większego
problemu, o tyle w przypadku smartfonów z Androidem nie jest już tak różowo, bo przełączenie
następuje jedynie przy całkowitej utracie sygnału z AP. Takiej sytuacji można zaradzić ale trzeba
posiłkować się dodatkowymi aplikacjami. W poniższym artykule zostaną opisane dwa takie programiki:
&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.seah0rse.swififree&#34;&gt;SWIFI&lt;/a&gt; i &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.heleron.wifiroamingfix&#34;&gt;Wifi Roaming
Fix&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Blokowanie reklam z AdAway na smartfonie</title>
      <link>https://morfikov.github.io/post/android-blokowanie-reklam-z-adaway-na-smartfonie/</link>
      <pubDate>Sun, 30 Oct 2016 16:21:42 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-blokowanie-reklam-z-adaway-na-smartfonie/</guid>
      <description>&lt;p&gt;Dzięki &lt;a href=&#34;https://dnscrypt.org/&#34;&gt;dnscrypt-proxy&lt;/a&gt; jesteśmy w stanie &lt;a href=&#34;https://morfikov.github.io
/post/jak-zaszyfrowac-zapytania-dns-na-smartfonie-dnscrypt-proxy/&#34;&gt;zaszyfrować zapytania
DNS&lt;/a&gt;
bezpośrednio na naszych smartfonach. Niemniej jednak, w przypadku mojego Neffos&#39;a C5 od TP-LINK, w
wielu aplikacjach pojawiły się reklamy po wdrożeniu mechanizmu szyfrującego. Wcześniej oczywiście
wykorzystywałem &lt;a href=&#34;https://morfikov.github.io
/post/blokowanie-reklam-adblock-na-domowym-routerze-wifi/&#34;&gt;adblock&#39;a bezpośrednio na routerze z wgranym firmware
OpenWRT/LEDE&lt;/a&gt;, gdzie
zapytania DNS do adserwerów były filtrowane i blokowane bezpośrednio na tym urządzeniu. Po
zaszyfrowaniu ruchu DNS w telefonie, straciłem dostęp do mojego filtra reklam na routerze.
Przydałoby się zatem zaimplementować podobny mechanizm blokujący bezpośrednio na Androidzie, tak by
ponownie wszystkie te reklamy zniknęły przy jednoczesnym zachowaniu całej funkcjonalności płynącej
za sprawą szyfrowanego ruchu DNS. Jednym z rozwiązań jest wykorzystanie &lt;a href=&#34;https://adaway.org/&#34;&gt;narzędzia
AdAway&lt;/a&gt;, które przy pomocy pliku &lt;code&gt;/etc/hosts&lt;/code&gt; i lokalnego serwera www jest w
stanie zablokować sporą większość reklam, na które możemy natknąć się w internecie. Opis instalacji
i konfiguracji AdAway zostanie przedstawiony w niniejszym wpisie.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak zaszyfrować zapytania DNS na smartfonie (dnscrypt-proxy)</title>
      <link>https://morfikov.github.io/post/jak-zaszyfrowac-zapytania-dns-na-smartfonie-dnscrypt-proxy/</link>
      <pubDate>Thu, 27 Oct 2016 18:52:19 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-zaszyfrowac-zapytania-dns-na-smartfonie-dnscrypt-proxy/</guid>
      <description>&lt;p&gt;Smartfony to takie małe komputery, z których praktycznie każdy z nas korzysta na co dzień. Nie
różnią się one zbytnio od tych domowych PC czy laptopów, no może za wyjątkiem rozmiarów.
Wszystkie elementy tyczące się spraw sieciowych, np. korzystanie z internetu za pomocą przeglądarki,
są dokładnie taka same co w przypadku zwykłych komputerów. Na smartfonach domeny również trzeba
jakoś rozwiązać. Standardowo w Androidzie są wykorzystywane serwery od Google (8.8.8.8 i 8.8.4.4).
Jeśli nasza sieć WiFi oferuje inne DNS&#39;y, to wtedy one mają pierwszeństwo. Niemniej jednak, nie
zawsze będziemy w stanie kontrolować środowisko sieciowe, do którego zostaniemy podłączeni. W takiej
sytuacji będziemy zdani na łaskę admina obcej sieci w kwestii poufności odwiedzanych przez nas stron
www czy jakichkolwiek innych domen w internecie. Z doświadczenia wiem, by nie składać swojej
prywatności w czyjeś ręce i dlatego też postanowiłem poszukać sposobu na zaszyfrowanie zapytań DNS
bezpośrednio na smartfonie. Długo nie musiałem szukać, bo okazuje się, że &lt;a href=&#34;https://dnscrypt.org/#dnscrypt-android&#34;&gt;dnscrypt-proxy jest
dostępny również na Androida&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak przeprowadzić unroot na smartfonie Neffos C5 od TP-LINK</title>
      <link>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-c5-od-tp-link/</link>
      <pubDate>Thu, 20 Oct 2016 22:58:57 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-c5-od-tp-link/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-c5-od-tp-link/&#34;&gt;Proces root na smartfonie Neffos
C5&lt;/a&gt; od TP-LINK można
przeprowadzić w miarę bez większych problemów, choć nie jest to rozwiązanie działające OOTB.
Niemniej jednak, taki root telefonu czyni go bardziej podatnym na zagrożenia ze strony wrogich
aplikacji. Ponadto, kasując czy też zmieniając pliki systemowe, możemy sprawić, że nasze urządzenie
zwyczajnie przestanie nam działać, tj. już się nie uruchomi. Niektórzy użytkownicy smartfonów nie
zdają sobie z tego sprawy i ukorzeniają Androida bez głębszego zastanowienia się. Mi jako
linux&#39;iarzowi, root jest niezbędny do pracy ale czy aby na pewno każdy musi go mieć? Ci z was,
którzy taki root systemu przeprowadzili i nie korzystają z niego praktycznie wcale, zastanawiają
się pewnie czy istnieje sposób, by cofnąć wprowadzone zmiany i przywrócić Androida do stanu
pierwotnego. Krótka odpowiedź brzmi: &amp;quot;oczywiście, że tak&amp;quot; i temu procesowi przyjrzymy się w
niniejszym artykule.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: YouTube bez reklam na smartfonie (NewPipe)</title>
      <link>https://morfikov.github.io/post/android-youtube-bez-reklam-na-smartfonie-newpipe/</link>
      <pubDate>Thu, 20 Oct 2016 19:41:01 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-youtube-bez-reklam-na-smartfonie-newpipe/</guid>
      <description>&lt;p&gt;Ja generalnie zaliczam się do grona osób bardzo spokojnych ale tylko do czasu aż się zdenerwuję.
Jedną taką bardziej wyprowadzającą mnie z równowagi kwestią są reklamy w serwisie YouTube. Problem
jest o wiele bardziej dotkliwy, gdy w grę wchodzą urządzenia mobilne, np. smartfony. Na komputerze
nie mam większego problemu, bo wszystkie reklamy mogę zablokować stosując adblock/ublock w
przeglądarce lub też korzystać z aplikacji
&lt;a href=&#34;https://github.com/mps-youtube/mps-youtube&#34;&gt;mpsyt&lt;/a&gt;/&lt;a href=&#34;http://flavio.tordini.org/minitube&#34;&gt;minitube&lt;/a&gt;.
Gdy chcę wesprzeć kogoś, to odpalam kilka kanałów z reklamami, wyciszam dźwięk i mój linux ogląda za
mnie ten cały syf reklamowy, a ja go ani nie słyszę, ani nie widzę i wszyscy są happy. W przypadku
smartfonów oglądanie serwisu YT jest nieco problematyczne. Nie dość, że nie ma jak obejść tych
reklam, to jeszcze zwykle są one głośniejsze niż ścieżka dźwiękowa materiału video, co bardzo
wnerwia w godzinach nocnych. Przy szukaniu rozwiązania tego problemu natknąłem się na
&lt;a href=&#34;https://github.com/TeamNewPipe/NewPipe&#34;&gt;NewPipe&lt;/a&gt;. Jest to przeglądarkę YT z otwartym kodem
źródłowym (OpenSource), która działa podobnie do mpsyt/minitube i to ten programik zostanie
opisany w niniejszym artykule.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: OpenCamera i aparat w Neffos C5</title>
      <link>https://morfikov.github.io/post/android-opencamera-i-aparat-w-neffos-c5/</link>
      <pubDate>Tue, 18 Oct 2016 22:53:19 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-opencamera-i-aparat-w-neffos-c5/</guid>
      <description>&lt;p&gt;Ci z was, którzy czytali moją &lt;a href=&#34;https://morfikov.github.io
/post/recenzja-smartfon-neffos-c5-od-tp-link/&#34;&gt;recenzję na temat smartfona Neffos
C5&lt;/a&gt; od TP-LINK, widzą, że niezbyt
spodobał mi się aparat/kamera zaimplementowany w tym telefonie. Niby jest tutaj 8 mpix na aparacie
głównym (i 5 mpix na selfie) ale przy niezbyt dobrym oświetleniu jakość zdjęć siada dość znacznie.
Abstrahując od samej jakości aparatu, chciałbym się nieco bardziej skupić na oprogramowaniu do jego
obsługi, które Neffos C5 oferuje. Jest ono dość ubogie pod względem funkcjonalności i mi generalnie
przydałoby się nieco więcej opcji, z których mógłbym zrobić jakiś użytek. Jest wiele aplikacji na
Androida, które oferują poszerzenie możliwości aparatu czy kamery w telefonie. Większość z nich
zawiera jednak reklamy, które niezbyt pasują na smartfonie wyrafinowanego linux&#39;iarza. Postanowiłem
zatem poszukać nieco głębiej i w &lt;a href=&#34;https://morfikov.github.io
/post/android-repozytorium-aplikacji-opensource-f-droid/&#34;&gt;repozytorium
F-Droid&#39;a&lt;/a&gt; znalazłem
&lt;a href=&#34;http://opencamera.org.uk/&#34;&gt;OpenCamera&lt;/a&gt;. Programik bardzo przyzwoity, bez reklam, no i najważniejsze
jest on OpenSource. W tym artykule rzucimy sobie okiem na ten kawałek oprogramowania i zobaczymy
jaką funkcjonalność ono oferuje.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Brak możliwości zapisu danych na karcie SD w Neffos C5</title>
      <link>https://morfikov.github.io/post/android-brak-mozliwosci-zapisu-danych-na-karcie-sd-neffos-c5/</link>
      <pubDate>Fri, 14 Oct 2016 20:56:20 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-brak-mozliwosci-zapisu-danych-na-karcie-sd-neffos-c5/</guid>
      <description>&lt;p&gt;Może i obecne smartfony dają nam w standardzie sporo wolnego miejsca na swoim flash&#39;u ale dla
niektórych to ciągle za mało. Nie ważne ile tej pamięci będziemy mieć dostępnej, to i tak zawsze
będzie nam jej brakować. Mój &lt;a href=&#34;http://www.neffos.pl/product/details/C5&#34;&gt;Neffos C5&lt;/a&gt; ma na pokładzie
16 GiB flash, z czego około 10 GiB jest udostępnione użytkownikowi. Mi by się przydał flash 64 GiB.
Jako, że ten telefon obsługuje karty SDHC, max 32 GiB, to postanowiłem dokupić tego typu kartę i
zamontować ją w smartfonie. Problem pojawił się w momencie próby przeniesienia danych aplikacji z
pamięci wewnętrznej na pamięć zewnętrzną jaką jest karta SD. Chodzi na przykład o zapisywanie zdjęć
czy filmów z kamery bezpośrednio na karcie SD. Okazuje się jednak, że&lt;a href=&#34;https://developer.android.com/about/versions/android-4.4.html&#34;&gt;Android począwszy od
wersji 4.4&lt;/a&gt; zablokował możliwość
umieszczania danych aplikacji na karatach SD. Czy słusznie i czy istnieje jakiś sposób by wybrnąć z
tej sytuacji?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Nova Launcher w Neffos C5</title>
      <link>https://morfikov.github.io/post/android-nova-launcher-neffos-c5/</link>
      <pubDate>Wed, 12 Oct 2016 19:18:31 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-nova-launcher-neffos-c5/</guid>
      <description>&lt;p&gt;Jedną z rzeczy, która wychodzi przy użytkowaniu &lt;a href=&#34;http://www.neffos.pl/product/details/C5&#34;&gt;smartfona Neffos
C5&lt;/a&gt; od TP-LINK jest ździebko problematyczny interfejs.
Chodzi o launcher aplikacji, do których odnośniki mamy na pulpicie. Standardowo jest tutaj podziałka
4x4, czyli na jednym pulpicie możemy mieć maksymalnie tylko 16 ikonek. Gdy do tego jeszcze dojdą nam
widżety, to korzystanie z pewnych aplikacji może być dość uciążliwe. Ja korzystam z bardzo wielu
programów i standardowo w Neffos&#39;ie C5 muszę mieć co najmniej 5 pulpitów, a jeszcze nie skończyłem
się bawić aplikacjami. Nie byłoby pewnie żadnego problemu, gdyby nie fakt, że nie można zmienić
ilości wyświetlanych ikonek, przynajmniej ja nie znalazłem takiej opcji. Dlatego też byłem zmuszony
rozejrzeć się za innym launcher&#39;em i znalazłem &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.teslacoilsw.launcher&#34;&gt;Nova
Launcher&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Repozytorium aplikacji OpenSource (F-Droid)</title>
      <link>https://morfikov.github.io/post/android-repozytorium-aplikacji-opensource-f-droid/</link>
      <pubDate>Tue, 11 Oct 2016 20:47:13 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-repozytorium-aplikacji-opensource-f-droid/</guid>
      <description>&lt;p&gt;Przeszukując sklep Google Play za nowymi aplikacjami, które mógłbym wgrać na swojego &lt;a href=&#34;https://morfikov.github.io
/post/recenzja-smartfon-neffos-c5-od-tp-link/&#34;&gt;Neffos&#39;a
C5&lt;/a&gt;, zawsze staram się zwracać uwagę
co tak naprawdę zamierzam zainstalować. Nie chodzi tutaj tylko o poleconą mi przez kogoś aplikację,
a konkretnie jej nazwę, bo te mogą być przecież bardzo podobne i łatwo zainstalować nie tego app&#39;ka,
którego powinniśmy. Android jest prawie jak windows, no może z tą różnicą, że jest udostępniany na
wolnych licencjach. Z racji swojej popularności musi być bardzo prosty w obsłudze, by nie generować
żadnych błędów i problemów wśród korzystających z niego użytkowników. Z doświadczenia wiem, że
prostota obsługi nie zawsze idzie w parze z bezpieczeństwem, a gdy mamy przed sobą tak popularny
system operacyjny jak Android, to już tylko krok dzieli nas od kompromitacji systemu przez wgranie
jakiejś trefnej aplikacji ze sklepu Google. Nie znam tych wszystkich programików, które są w nim
dostępne ale można zrobić lekki przesiew instalując jedynie aplikacje OpenSource. Przeszukiwanie
Google Play pod tym kątem nie jest zbyt wygodne, dlatego też ktoś postanowił uruchomić &lt;a href=&#34;https://f-droid.org/&#34;&gt;projekt
F-Droid&lt;/a&gt; zrzeszający wolne aplikacje, które możemy wgrać na swój telefon bez
większego problemu. Ten wpis będzie poświęcony właśnie aplikacji F-Droid.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Root smartfona Neffos C5 od TP-LINK</title>
      <link>https://morfikov.github.io/post/android-root-smartfona-neffos-c5-od-tp-link/</link>
      <pubDate>Sun, 09 Oct 2016 18:08:36 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-root-smartfona-neffos-c5-od-tp-link/</guid>
      <description>&lt;p&gt;Smartfony mają to do siebie, że ogromna większość z nich pracuje pod kontrolą systemu linux, a
konkretnie jest to jakiś Android. Tak też jest w przypadku &lt;a href=&#34;http://www.neffos.pl/product/details/C5&#34;&gt;Neffos&#39;a
C5&lt;/a&gt; od TP-LINK, gdzie mamy zainstalowaną wersję 5.1
(Lollipop). My linux&#39;iarze chcemy mieć pełny dostęp do systemu operacyjnego, by bez większych
przeszkód móc zarządzać urządzeniem, które pod jego kontrolą pracuje. Problem w tym, że ten Neffos
C5 nie ma w standardzie root&#39;a i nie mamy administracyjnego dostępu do całego systemu plików
telefonu. Jest kilka metod root&#39;owania smartfona, np. za pomocą Kingoroot/Kingroot ale nie działają
one w przypadku tego telefonu (i całe szczęście). W tym artykule zostanie pokazany sposób na root
systemu Neffos&#39;a C5 przy zachowaniu wszelkich norm bezpieczeństwa, które w sytuacjach podbramkowych
pomogą nam odzyskać kontrolę nad telefonem.&lt;/p&gt;
&lt;p&gt;Prostszy sposób na przeprowadzanie procesu root w smartfonach Neffos od TP-LINK z wykorzystaniem
natywnych obrazów TWRP &lt;a href=&#34;https://morfikov.github.io
/post/root-w-smartfonach-neffos-od-tp-link-x1-c5-c5-max-y5-y5l/&#34;&gt;został opisany w nowym wątku&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Jak zainstalować ADB i fastboot pod linux</title>
      <link>https://morfikov.github.io/post/android-jak-zainstalowac-adb-i-fastboot-pod-linux/</link>
      <pubDate>Sat, 08 Oct 2016 20:34:36 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-jak-zainstalowac-adb-i-fastboot-pod-linux/</guid>
      <description>&lt;p&gt;Bawiąc się &lt;a href=&#34;http://www.neffos.pl/product/details/C5&#34;&gt;smartfonem Neffos C5&lt;/a&gt; od TP-LINK chciałem
sprawdzić czy da radę zainstalowanemu na nim Androidowi 5.1 (Lollipop) zrobić root&#39;a. Chodzi o
uzyskanie dostępu administracyjnego do systemu plików na flash&#39;u telefonu. Proces się powiódł, z
tym, że by do niego przystąpić, potrzebne są narzędzia takie jak &lt;code&gt;adb&lt;/code&gt; i &lt;code&gt;fastboot&lt;/code&gt; , bo przy ich
pomocy możemy sterować telefonem, np. z poziomu jakiegoś linux&#39;a. Niemniej jednak, system komputera
jak i smartfona trzeba pierw przygotować odpowiednio, by taka komunikacja była możliwa i ten proces
zostanie właśnie opisany poniżej.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: Reset ustawień do fabrycznych (factory defaults)</title>
      <link>https://morfikov.github.io/post/android-reset-ustawien-do-fabrycznych-factory-defaults/</link>
      <pubDate>Tue, 04 Oct 2016 20:39:20 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-reset-ustawien-do-fabrycznych-factory-defaults/</guid>
      <description>&lt;p&gt;Android zadomowił się w większości smartfonów. Jest to mniej więcej taki sam system operacyjny, co w
przypadku stacjonarnych komputerów czy laptopów. W obu przypadkach instalujemy i konfigurujemy różne
rzeczy, tak by ten system oraz jego aplikacje były dostosowane do naszych potrzeb w sposób
optymalny. Niemniej jednak, każdy system wymaga odpowiedniego traktowania i mam na myśli tutaj
regularne czyszczenie go ze zbędnych aplikacji czy plików, które nie są nam już do niczego
potrzebne. W przypadku desktopowych systemów zwykliśmy wgrywać je na nowo za pomocą płytki CD/DVD
czy też pendrive live. Ten proces z reguły jest szybki i w miarę bezproblemowy. Później trzeba tylko
trochę czasu poświęcić, by ten świeży system skonfigurować. A jak sprawa wygląda w przypadku
smartfona z Androidem? Nie mamy jak za bardzo wgrać świeżego systemu, no i na dobrą sprawę nie
musimy. Zamiast tego, możemy przywrócić ustawienia do fabrycznych (factory reset). W tym artykule
postaramy się obadać proces resetu ustawień telefonu na przykładzie &lt;a href=&#34;http://www.neffos.pl/product/details/C5&#34;&gt;smartfona Neffos
C5&lt;/a&gt; od TP-LINK z Androidem 5.1 (Lollipop).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak przenieść kontakty ze starego telefonu do smartfona</title>
      <link>https://morfikov.github.io/post/jak-przeniesc-kontakty-telefon-smartfon/</link>
      <pubDate>Sat, 24 Sep 2016 00:53:01 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-przeniesc-kontakty-telefon-smartfon/</guid>
      <description>&lt;p&gt;Przy zmianie telefonu, zwłaszcza z tych nieco starszych na te nowsze smartfony, może pojawić się
problem z przeniesieniem listy kontaktów. Jeśli nasz stary telefon ma slot na kartę SD, to kontakty
zapisane w pamięci tego telefonu można zrzucić na kartę SD i na nowym telefonie z niej zaimportować.
Co jednak w przypadku, gdy nasz stary telefon nie dysponuje takim slotem, a my na liście kontaktów
mamy zapisanych ze 100-200 pozycji albo nawet i więcej? Nie będziemy raczej przepisywać każdego
kontaktu ręcznie, bo trochę się nam z tym zejdzie. Możemy za to nieco inaczej podejść do procesu
przenoszenia kontaktów. Najprościej to wykonać backup listy kontaktów starego telefonu do pliku i
zapisać go na komputerze. Oczywiście zwykle jest do tego celu potrzebny przewód USB, bluetooth czy
IrDA. Na linux&#39;ach będzie nam także niezbędne &lt;a href=&#34;&#34;&gt;narzędzie Wammu&lt;/a&gt;, które umożliwi nam zrobienie
takiego backupu.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>