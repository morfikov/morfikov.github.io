<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lte on Morfitronik</title>
    <link>https://morfikov.github.io/tags/lte/</link>
    <description>Recent content in lte on Morfitronik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language>
    <lastBuildDate>Fri, 13 Jan 2017 18:43:37 +0000</lastBuildDate><atom:link href="https://morfikov.github.io/tags/lte/feed.xml" rel="self" type="application/rss" />
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak wymusić pasmo/częstotliwość LTE pod LEDE/OpenWRT</title>
      <link>https://morfikov.github.io/post/jak-wymusic-pasmo-czestotliwosc-lte-pod-lede-openwrt/</link>
      <pubDate>Fri, 13 Jan 2017 18:43:37 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-wymusic-pasmo-czestotliwosc-lte-pod-lede-openwrt/</guid>
      <description>&lt;p&gt;Zainspirowany &lt;a href=&#34;http://forum.jdtech.pl/Watek-wybor-czestotliwosci-lte-na-przykladzie-huawei-e3372&#34;&gt;wątkiem na forum
JDtech&lt;/a&gt; na temat
testów transferów w konkretnych pasmach/częstotliwościach LTE, postanowiłem sprawdzić jak ta sprawa
wygląda w mojej okolicy. Generalnie ja obecnie u siebie mam modem Huawei E3372s-153 w wersji
NON-HiLink podpięty do &lt;a href=&#34;http://www.tp-link.com.pl/products/details/Archer-C2600.html&#34;&gt;routera TP-LINK Archer
C2600&lt;/a&gt;. Oczywiście na tym routerze
jest wgrany alternatywny firmware LEDE/OpenWRT, bo inaczej nie miałbym możliwości skorzystać z tego
modemu. Standardowa konfiguracja LTE w LEDE/OpenWRT daje nam jedynie możliwość wyboru między
ustawieniami &lt;code&gt;auto&lt;/code&gt; , &lt;code&gt;gsm&lt;/code&gt; , &lt;code&gt;umts&lt;/code&gt; , &lt;code&gt;lte&lt;/code&gt; , &lt;code&gt;preferumts&lt;/code&gt; oraz &lt;code&gt;preferlte&lt;/code&gt; . W przypadku internetu
LTE, zwykle wybieramy tutaj tryb &lt;code&gt;auto&lt;/code&gt; , ewentualnie też &lt;code&gt;lte&lt;/code&gt; , by wymusić konkretny tryb pracy
modemu, co może mieć kolosalne znaczenie przy darmowym internecie od RBM/Play. Niemniej jednak,
nawet w przypadku wyboru &lt;code&gt;lte&lt;/code&gt; , częstotliwość na jakiej będzie pracował modem w dalszym ciągu jest
dobierana automatycznie w oparciu o parametry sygnału docierającego z dostępnych w okolicy BTS&#39;ów. W
przypadku modemu E3372 można jednak wymusić, by połączenie LTE było realizowane na konkretnej
częstotliwości, np. 2100/1800/2600/900/800 MHz i by taki stan rzeczy osiągnąć, trzeba nieco
przerobić konfigurację tego alternatywnego oprogramowania znajdującego się w naszym routerze WiFi.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Recenzja: Router LTE Archer MR200 od TP-LINK</title>
      <link>https://morfikov.github.io/post/recenzja-router-lte-archer-mr200-tp-link/</link>
      <pubDate>Thu, 29 Dec 2016 18:53:07 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/recenzja-router-lte-archer-mr200-tp-link/</guid>
      <description>&lt;p&gt;Do momentu upowszechnienia się technologii LTE, ludzkość była zdana na przewodowe łącza internetowe
oferowane przez lokalnych ISP. Jeśli chodzi o tych lokalnych providerów, to zwykle nie mają oni
praktycznie żadnej konkurencji w danej części miasta/wsi. Czy taki stan rzeczy jest wynikiem
dostarczania najlepszych jakościowo usług za najniższą cenę? W moim przypadku nie były to ani
najlepsze usługi, ani też najniższa cena, tylko tak dobrane przepisy prawne, by zewnętrznemu ISP nie
opłacało się świadczyć usług w mojej okolicy, bo za ten fakt dostawał on z miejsca szereg opłat/kar.
Teraz, gdy już praktycznie każdy z nas jest w zasięgu LTE, możemy porzucić tych lokalnych ISP i
obserwować ich nieuchronny upadek, no chyba, że w końcu zaczną dbać o swoich klientów. Niemniej
jednak, w dalszym ciągu, by korzystać z technologi LTE potrzebny nam jest odpowiedni sprzęt, zwykle
jest to jakiś modem, np. Huawei E3372s-153. Problem z modemem jest taki, że standardowo można go
podłączyć tylko do jednego komputera w danej chwili, no chyba, że mamy router WiFi z wgranym
alternatywnym oprogramowaniem pokroju OpenWRT/LEDE. Niemniej jednak, w dalszym ciągu trzeba nieco
wprawy, by ten modem ogarnąć i udostępnić połączenie internetowe hostom w lokalnej sieci. Dlatego
też od jakiegoś czasu na rynku zaczęły pojawiać się routery WiFi, które mają wbudowany modemem LTE.
Jedno z takich urządzeń dotarło do mnie kilka dni temu, a konkretnie jest &lt;a href=&#34;http://www.tp-link.com.pl/products/details/cat-4691_Archer-MR200.html&#34;&gt;model Archer
MR200&lt;/a&gt; od TP-LINK.
Postanowiłem zatem zobaczyć co oferuje ten sprzęt w standardzie, oraz czy jest dla niego jakieś
alternatywne oprogramowanie.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Udostępnianie LTE/3G ze smartfona przez router OpenWRT (tethering)</title>
      <link>https://morfikov.github.io/post/udostepnianie-lte-3g-ze-smartfona-przez-router-openwrt-tethering/</link>
      <pubDate>Tue, 01 Nov 2016 18:14:53 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/udostepnianie-lte-3g-ze-smartfona-przez-router-openwrt-tethering/</guid>
      <description>&lt;p&gt;Przeglądając &lt;a href=&#34;http://eko.one.pl/forum/viewtopic.php?pid=175547&#34;&gt;forum eko.one.pl natrafiłem ciekawy
problem&lt;/a&gt;, nad którym też się zastanawiałem jakiś
czas temu. Chodzi o udostępnienie internetu komórkowego (LTE/3G) komputerom w domowej sieci za
pomocą smartfona (tzw. &lt;a href=&#34;https://pl.wikipedia.org/wiki/Tethering&#34;&gt;tethering&lt;/a&gt;). W takiej sytuacji, w
przypadku problemów z lokalnym dostawcą internetu moglibyśmy przepiąć wszystkie komputery na
internet świadczony przez operatora GSM, z którego korzystamy. Z reguły standardowy firmware
routerów WiFi nie pozwala na tego typu rozwiązania. Niemniej jednak, mając do dyspozycji router z
OpenWRT można spróbować połączyć go z naszym smartfonem udostępniając sieci lokalnej internet
LTE/3G. W tym artykule zostanie przedstawione tego typu rozwiązanie przy wykorzystaniu &lt;a href=&#34;http://www.tp-link.com.pl/en/products/details/cat-9_Archer-C7.html&#34;&gt;routera
Archer C7&lt;/a&gt; v2 od TP-LINK oraz
&lt;a href=&#34;http://www.neffos.com/en/product/details/C5&#34;&gt;smartfona Neffos C5&lt;/a&gt;, również od TP-LINK. Na routerze
zaś jest wgrana najnowsza stabilna wersja OpenWRT (Chaos Calmer). Sprawdzimy sobie jak takie
rozwiązanie wygląda oraz sprawuje się w praktyce i czy jest ono w ogóle godne jakiegoś większego
zainteresowania.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Recenzja: Przenośny router LTE/3G (MiFi) M7310 od TP-LINK</title>
      <link>https://morfikov.github.io/post/recenzja-przenosny-router-lte3g-mifi-m7310-od-tp-link/</link>
      <pubDate>Sun, 25 Sep 2016 22:06:06 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/recenzja-przenosny-router-lte3g-mifi-m7310-od-tp-link/</guid>
      <description>&lt;p&gt;Wielu zaawansowanych użytkowników komputera, zwłaszcza tych korzystających z linux&#39;a, bardzo ceni
sobie możliwość bezgranicznego zarządzania posiadanym sprzętem elektronicznym. Nie chodzi tylko o
zwykłego desktopa czy laptopa ale też o urządzenia z systemami wbudowanymi jak, np. routery WiFi.
Większość routerów nie obsługuje modemów LTE ale mogłaby, gdyby pozwalało im na to zainstalowane na
nich oprogramowanie. Na moim blogu jest kilka artykułów dotyczących &lt;a href=&#34;https://morfikov.github.io/post/tag/modem/&#34;&gt;instalacji i konfiguracji
modemów LTE&lt;/a&gt; właśnie na takich routerach, z tym, że w oparciu o
firmware OpenWRT/LEDE. Niemniej jednak, w przypadku takiego alternatywnego firmware wymagana jest
drobna znajomość obsługi komputera, a cała masa użytkowników nie chce poświęcać czasu na zgłębianie
technik informatycznych. Te osoby chcą zwyczajnie podłączyć dane urządzenie do prądu i móc z niego
korzystać tuż po wyjęciu go z pudełka. Mam właśnie jedno takie urządzenie, które byłoby w stanie
zaspokoić większość osób z tego grona. Nie jest to co prawda pełnowymiarowy router WiFi z modemem
LTE na pokładzie ale w przeciwieństwie do swoich kolegów jest o wiele bardziej mobilny. Mowa o
&lt;a href=&#34;http://www.tp-link.com.pl/products/details/M7310.html&#34;&gt;przenośnym hotspocie LTE M7310&lt;/a&gt; od TP-LINK.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Recenzja: Przenośny router 3G/4G TL-MR3020  od TP-LINK</title>
      <link>https://morfikov.github.io/post/recenzja-router-3g-4g-tl-mr3020-tp-link/</link>
      <pubDate>Tue, 30 Aug 2016 17:44:53 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/recenzja-router-3g-4g-tl-mr3020-tp-link/</guid>
      <description>&lt;p&gt;Coraz więcej użytkowników migruje od lokalnych providerów internetowych na technologię LTE, która
zapewnia nam połączenie z siecią globalną niezależnie od naszej fizycznej lokalizacji. Do obsługi
LTE potrzebny jest odpowiedni modem lub router WiFi, który już ma taki modem wbudowany. Jeśli
posiadamy modem LTE, to może się pojawić problem z udostępnianiem połączenia, np. w sieci domowej.
Jakby nie patrzeć taki modem jest przeznaczony na jedno urządzenie. Oczywiście w dalszym ciągu
możemy przerobić nasz router WiFi i dodać do niego obsługę modemów LTE ale takie rozwiązanie wymaga
firmware OpenWRT/LEDE. Istnieje prostsza alternatywa, która, można by rzec, działa OOTB i nie trzeba
się zbytnio wysilać przy jej implementacji. Musimy jednak posiadać odpowiednie urządzenie. W tym
artykule obadamy sobie &lt;a href=&#34;http://www.tp-link.com.pl/products/details/TL-MR3020.html&#34;&gt;przenośny router 3G/4G
TL-MR3020&lt;/a&gt; od TP-LINK.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Automatyczna blokada internetu LTE w OpenWRT</title>
      <link>https://morfikov.github.io/post/automatyczna-blokada-internetu-lte-w-openwrt/</link>
      <pubDate>Thu, 05 May 2016 15:20:14 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/automatyczna-blokada-internetu-lte-w-openwrt/</guid>
      <description>&lt;p&gt;Jakiś czas temu opisywałem &lt;a href=&#34;https://morfikov.github.io/post/darmowy-internet-lte-od-rbmplay/&#34;&gt;darmowy internet LTE w
RBM/PLAY&lt;/a&gt;. Jego niewątpliwą zaletą jest
fakt, że jest za free, o ile posiadamy odpowiedni modem. Niemniej jednak, ta usługa jest na 30 dni,
po upływie których trzeba ją aktywować na nowo. Jeśli z jakichś przyczyn się tego nie zrobi, to
wtedy korzystanie z internetu może nas słono kosztować. Niby można zaprzęgnąć do pomocy &lt;a href=&#34;https://morfikov.github.io/post/gammu-smsd-czyli-wysylanie-odbieranie-sms/&#34;&gt;gammu-smsd,
który będzie nas powiadamiał
SMS&#39;em&lt;/a&gt;, że usługa została
wyłączona lub włączona. Niemniej jednak, w dalszym ciągu pozostaje do ogarnięcia kwestia czasu,
przez który czekamy na włączenie usługi. Najlepszym wyjściem jest całkowita blokada internetu na
routerze, tak by przez ten moment nie nawiązać żadnego połączenia. Jeśli nie nawiążemy połączenia,
to dane z pakietu danych nie będą nam uciekać. W momencie, gdy usługa zostanie aktywowana, to
blokada będzie zdejmowana. Tego typu rozwiązanie można zaimplementować w OpenWRT za sprawą
&lt;a href=&#34;http://smstools3.kekekasvi.com/&#34;&gt;oprogramowania smstools&lt;/a&gt; dostępnego w pakiecie &lt;code&gt;smstools3&lt;/code&gt; . W tym
wpisie postaramy się zaprojektować swojego rodzaju automatyczne blokowanie internet w zależności od
otrzymywanych komunikatów od operatora GSM.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Monitor połączenia 3G/LTE W OpenWRT (3ginfo)</title>
      <link>https://morfikov.github.io/post/monitor-polaczenia-3glte-w-openwrt-3ginfo/</link>
      <pubDate>Fri, 22 Apr 2016 19:53:08 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/monitor-polaczenia-3glte-w-openwrt-3ginfo/</guid>
      <description>&lt;p&gt;W pewnych sytuacjach lub też ze zwykłej ciekawości możemy chcieć sprawdzić jak sprawuje się
połączenie LTE, którego obsługę zaimplementowaliśmy na naszym routerze mającym na pokładzie
firmware OpenWRT. Nie będę tutaj opisywał samej konfiguracji takiego połączenia, bo to zostało
zrobione we wpisie poświęconym &lt;a href=&#34;https://morfikov.github.io/post/modem-lte-pod-openwrt/&#34;&gt;konfiguracji modemu Huawei E3372 pod
OpenWRT&lt;/a&gt;, jak i przy okazji &lt;a href=&#34;https://morfikov.github.io/post/konfiguracja-polaczenia-aero2-na-openwrt/&#34;&gt;konfiguracji połączenia
Aero2&lt;/a&gt;. W tym wpisie zaś skupimy
się na monitorowaniu za pomocą &lt;code&gt;3ginfo&lt;/code&gt; już działającego połączenia, które jest realizowane za
pomocą modemu LTE podłączonego do portu USB routera.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Konfiguracja połączenia Aero2 na OpenWRT</title>
      <link>https://morfikov.github.io/post/konfiguracja-polaczenia-aero2-na-openwrt/</link>
      <pubDate>Fri, 22 Apr 2016 16:19:41 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-polaczenia-aero2-na-openwrt/</guid>
      <description>&lt;p&gt;Darmowy internet oferowany przez Aero2 nie grzeszy zbytnio osiągami, bo mamy do dyspozycji jedynie
512 kbit/s. Niemniej jednak, taka prędkość w zupełności wystarcza do przeglądania stron
internetowych. Gorzej z oglądaniem materiałów video w serwisach takich jak YouTube. To jednak nie ma
raczej większego znaczenia, bo przecie usługa jest za free, a poza tym, możemy dokupić szereg
pakietów aktywujących pełną prędkość w technologi LTE. Problem w tym, że od Aero2 możemy otrzymać
tylko jedną kartę SIM na użytkownika. Może i mamy możliwość dostania kilku kart na jeden adres
zamieszkania ale i tak trzeba by dla każdego SIM załatwić osobny modem LTE. Zwykle takie rozwiązanie
nie wchodzi w grę, zwłaszcza, gdy z internetu korzystamy raczej sporadycznie. Mając jednak router z
alternatywnym firmware OpenWRT, możemy do jednego z jego portów USB doczepić taki modem i udostępnić
połączenie internetowe wszystkim urządzeniom w naszej sieci domowej. W tym artykule postaramy się to
zadanie zrealizować.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Obsługa kodów USSD w modemach LTE</title>
      <link>https://morfikov.github.io/post/obsluga-kodow-ussd-w-modemach-lte/</link>
      <pubDate>Wed, 20 Apr 2016 15:31:46 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/obsluga-kodow-ussd-w-modemach-lte/</guid>
      <description>&lt;p&gt;Każdy, kto ma lub miał prepaid&#39;a, prędzej czy później musiał nauczyć się obsługi &lt;a href=&#34;https://pl.wikipedia.org/wiki/Unstructured_Supplementary_Service_Data&#34;&gt;kodów
USSD&lt;/a&gt;. To za ich pomocą
jesteśmy w stanie sprawdzić stan konta czy też aktywować poszczególne usługi. Co się jednak stanie,
gdy taki prepaid zostanie umieszczony w modemie LTE? Teoretycznie modem powinien nam zapewnić
połączenie LTE ale to jest nieco inna technologia niż GSM czy UMTS, a to za ich pomocą mogą być
przesyłane zarówno kody USSD i SMS. Niby modemy LTE potrafią operować również na UMTS i GSM ale pod
linux&#39;em przesyłanie kodów USSD może być nieco problematyczne. Jedynym oprogramowaniem będącym w
stanie operować na tych kodach był &lt;code&gt;modem-manager-gui&lt;/code&gt; . Problem w tym, że zajmuje on praktycznie
cały modem dla siebie, co w pewnych sytuacjach może nie być pożądane. Zatem jakie alternatywy nam
pozostają? W jaki sposób operować na tych kodach USSD pod linux&#39;em?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Wvdial i PPP, czyli modem LTE w trybie RAS</title>
      <link>https://morfikov.github.io/post/wvdial-ppp-czyli-modem-lte-w-trybie-ras/</link>
      <pubDate>Thu, 14 Apr 2016 19:01:46 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/wvdial-ppp-czyli-modem-lte-w-trybie-ras/</guid>
      <description>&lt;p&gt;Jak wielu użytkowników linux&#39;a zapewne wie, modem GSM/UMTS/LTE może pracować w kilku trybach.
Najpopularniejszym z nich jest tryb RAS wykorzystujący interfejsy udostępniane przez to urządzenie
w katalogu &lt;code&gt;/dev/&lt;/code&gt; , zwykle &lt;code&gt;ttyUSB0&lt;/code&gt; , &lt;code&gt;ttyUSB1&lt;/code&gt; , etc. By taki modem mógł nawiązać połączenie z
siecią, potrzebny jest demon &lt;a href=&#34;https://pl.wikipedia.org/wiki/Point_to_Point_Protocol&#34;&gt;PPP&lt;/a&gt;. O trybie
RAS wspominałem już parokrotnie, min. we wpisach dotyczących &lt;a href=&#34;https://morfikov.github.io/post/darmowy-internet-lte-od-rbmplay/&#34;&gt;konfiguracji połączenia LTE w
RBM/Play&lt;/a&gt; jak i przy omawianiu &lt;a href=&#34;https://morfikov.github.io/post/aero2-w-polaczeniu-z-dnsmasq-dnscrypt-proxy/&#34;&gt;problemów
z resolver&#39;em DNS w przypadku
Aero2&lt;/a&gt;. Generalnie ten tryb
różni się trochę od &lt;a href=&#34;https://morfikov.github.io/post/konfiguracja-modemu-lte-w-trybie-ndis-ncm/&#34;&gt;trybu
NDIS(NCM)&lt;/a&gt; głównie tym, że tutaj
nie uzyskamy większych prędkości niż 20-30 mbit/s. Niemniej jednak, jeśli nie mamy dobrej jakości
połączenia LTE, lub nasz modem z jakiegoś powodu pod linux&#39;em nie potrafi pracować w trybie NDIS,
to możemy skonfigurować połączenie w trybie RAS wykorzystując do tego celu &lt;code&gt;wvdial&lt;/code&gt; oraz demona PPP.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Zmiana nazwy interfejsu modemu ttyUSB0</title>
      <link>https://morfikov.github.io/post/zmiana-nazwy-interfejsu-modemu-ttyusb0/</link>
      <pubDate>Sat, 09 Apr 2016 18:50:19 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/zmiana-nazwy-interfejsu-modemu-ttyusb0/</guid>
      <description>&lt;p&gt;Spora część osób posiada różnego rodzaju urządzenia do komunikacji GSM/UMTS/LTE. Mogą to być
smartfony, czy też modemy USB. Zwykle po podpięciu takiego urządzenia do portu USB, system wykrywa
je i oddaje nam do dyspozycji kilka interfejsów w katalogu &lt;code&gt;/dev/&lt;/code&gt; . W przypadku modemu Huawei
E3372s-153 w wersji NON-HiLink, standardowo są dwa interfejsy: &lt;code&gt;ttyUSB0&lt;/code&gt; oraz &lt;code&gt;ttyUSB1&lt;/code&gt; . Gdy
podłączamy tylko jedno urządzenie, to nie mamy problemy z tymi nazwami. Co się jednak stanie w
przypadku, gdzie tych urządzeń będzie więcej i podepniemy je w losowej kolejności? Nawet jeśli
będziemy wiedzieć które interfejsy są od jakich urządzeń, to i tak trzeba będzie przepisywać pliki
konfiguracyjne różnych aplikacji pod kątem dostosowania tych nazw. Możemy jednak stworzyć unikalne
nazwy interfejsów w oparciu o &lt;a href=&#34;https://en.wikipedia.org/wiki/Udev&#34;&gt;reguły udev&#39;a&lt;/a&gt; i tym zajmiemy się
w niniejszym wpisie.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Modem LTE HUAWEI E3372 bez usb-modeswitch</title>
      <link>https://morfikov.github.io/post/modem-lte-huawei-e3372-bez-usb-modeswitch/</link>
      <pubDate>Wed, 06 Apr 2016 18:51:58 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/modem-lte-huawei-e3372-bez-usb-modeswitch/</guid>
      <description>&lt;p&gt;Ten artykuł, podobnie jak kilka poprzednich, powstał w oparciu o moje badania przeprowadzane nad
modemem LTE HUAWEI E3372s-153 w wersji NON-HiLink. Niby rozwiązań dotyczących konfiguracji modemów
pod linux&#39;em jest pełno w sieci ale zasadniczą różnicą niżej opisanego sposobu jest kompletne
pozbycie się pakietu &lt;code&gt;usb-modeswitch&lt;/code&gt; . Dla przypomnienia, ten pakiet odpowiada za przełączanie
trybu modemu. Zwykle są dostępne dwa tryby. Pierwszy z nich jest w stanie dostarczyć sterowniki (pod
windows), po instalacji których modem przechodzi w drugi tryb, już ten właściwy. Na linux&#39;ach to
przełączanie jest realizowane via &lt;code&gt;usb-modeswitch&lt;/code&gt; . I tu się nasuwa pytanie, czy ten modem
faktycznie trzeba przełączać? A może istnieje sposób, który by automatycznie ustawił modem na taki
tryb, który linux&#39;y lubią najbardziej? Okazało się, że istnieje i w tym wpisie zostanie on
przestawiony.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Konfiguracja modemu LTE w trybie NDIS (NCM)</title>
      <link>https://morfikov.github.io/post/konfiguracja-modemu-lte-w-trybie-ndis-ncm/</link>
      <pubDate>Tue, 05 Apr 2016 15:45:10 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-modemu-lte-w-trybie-ndis-ncm/</guid>
      <description>&lt;p&gt;Sporo modemów LTE potrafi pracować w kilku trybach. Weźmy na przykład modem Huawei E3372s-153 w
wersji NON-HiLink. Standardowo obsługuje on tryb RAS (&lt;a href=&#34;https://en.wikipedia.org/wiki/Remote_Access_Service&#34;&gt;Remote Access
Services&lt;/a&gt;) jak i NDIS (&lt;a href=&#34;https://en.wikipedia.org/wiki/Network_Driver_Interface_Specification&#34;&gt;Network Driver
Interface Specification&lt;/a&gt;).
Domyślnie też włączony jest NDIS ale, by móc z tego trybu korzystać na debianie, musimy nieco
inaczej skonfigurować sobie połączenie sieciowe. Gdy w grę wchodzą modemy LTE, to użytkownicy zwykli
korzystać z narzędzia &lt;code&gt;wvdial&lt;/code&gt; , który zaprzęga do pracy demona PPP i w ten sposób modem zaczyna
pracować w trybie RAS, a nie NDIS. W tym wpisie skonfigurujemy sobie połączenie sieciowe na debianie
w taki sposób, by wykorzystywało ono potencjał trybu NDIS.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Modem LTE pod OpenWRT (Huawei E3372s-153)</title>
      <link>https://morfikov.github.io/post/modem-lte-pod-openwrt/</link>
      <pubDate>Mon, 04 Apr 2016 19:44:30 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/modem-lte-pod-openwrt/</guid>
      <description>&lt;p&gt;Modem LTE jest zwykle przeznaczony dla jednej stacji roboczej. Podpina się go do portu USB i zwykle
po chwili można zestawić połączenie z siecią. W przypadku, gdy mamy kilka komputerów i na każdym z
nich chcemy mieć internet, to mamy z grubsza trzy wyjścia. Pierwszym z nich jest dokupienie
kolejnych modemów LTE, co zwykle nie wchodzi w grę. Drugą opcją jest zakup routera LTE. Różni się on
od zwykłego routera WiFi tym, że ma już wbudowany modem LTE. Jeśli jednak dysponujemy własnym
routerem WiFi, to niekoniecznie musimy się go pozbywać, zwłaszcza w przypadku, gdy już zakupiliśmy
osobno modem LTE. Jeśli na tym routerze WiFi jesteśmy w stanie zainstalować firmware OpenWRT, to
istnieje duża szansa na to, że damy radę ten router przerobić na router LTE. W tym wpisie postaramy
się ten zabieg przeprowadzić z wykorzystaniem routera &lt;a href=&#34;http://www.tp-link.com.pl/products/details/cat-9_Archer-C7.html&#34;&gt;TP-LINK Archer C7
v2&lt;/a&gt; oraz modemu LTE Huawei
E3372s-153 w wersji NON-HiLink.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Darmowy internet LTE od RBM (Play)</title>
      <link>https://morfikov.github.io/post/darmowy-internet-lte-od-rbmplay/</link>
      <pubDate>Sun, 03 Apr 2016 14:57:40 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/darmowy-internet-lte-od-rbmplay/</guid>
      <description>&lt;p&gt;We wpisie dotyczącym &lt;a href=&#34;https://morfikov.github.io/post/aero2-w-polaczeniu-z-dnsmasq-dnscrypt-proxy/&#34;&gt;konfiguracji serwerów DNS na potrzeby
Aero2&lt;/a&gt; wspomniałem, że ten
operator daje możliwość korzystania z internetu LTE praktycznie za darmo. Trzeba tam, co prawda,
złożyć wniosek i zapłacić jakieś grosze za przysłanie karty SIM ale opłat jako takich za
połączenie internetowe nie ma żadnych. Uporczywy może być jedynie kod CAPTCHA, który trzeba
wpisywać co 60 minut. Szukając na necie informacji na temat darmowego internetu LTE &lt;a href=&#34;http://jdtech.pl/2015/09/darmowy-internet-lte-w-redbullmobile-porady-2015.html&#34;&gt;doszukałem się
tego oto wpisu&lt;/a&gt;.
Jest tam przedstawiony sposób na włączenie bezpłatnej usługi internetu LTE u operatora RBM (Play). Z
początku wydawało mi się to niezbyt wiarygodne, by tego typu oferta była w ogóle dostępna ale
okazało się jednak, że nie ma tutaj żadnego haczyka i ten internet LTE faktycznie można włączyć i
korzystać z niego za free. W tym wpisie postaramy się skonfigurować Debiana właśnie na potrzeby tej
usługi.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Aero2 w połączeniu z dnsmasq i dnscrypt-proxy</title>
      <link>https://morfikov.github.io/post/aero2-w-polaczeniu-z-dnsmasq-dnscrypt-proxy/</link>
      <pubDate>Sat, 02 Apr 2016 18:47:47 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/aero2-w-polaczeniu-z-dnsmasq-dnscrypt-proxy/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aero2.pl/&#34;&gt;Aero2&lt;/a&gt; już od dość dawna oferuje darmowy dostęp do internetu w technologi LTE ale jakoś
wcześniej nie byłem tym tematem zainteresowany. Parę dni temu złożyłem jednak wniosek o kartę SIM,
tak by posiadać zapasowe łącze na wypadek, gdyby mój obecny ISP z jakiegoś powodu padł. Aero2
oferuje wersję komercyjną jak i tę za free i każda z nich ma swoje wady i zalety. Jako, że to łącze
ma robić jedynie za zapas, to korzystam z wersji FREE, a jest ono dość poważne ograniczenie, tj.
występuje tutaj &lt;a href=&#34;https://pl.wikipedia.org/wiki/CAPTCHA&#34;&gt;kod CAPTCHA&lt;/a&gt;, który trzeba wpisywać tak co godzinę, po czym należy resetować
modem. Ten kod może zostać zaserwowany jedynie w przypadku korzystania z DNS Aero2 i pozornie
odpada możliwość używania własnego systemu DNS opartego o &lt;a href=&#34;http://www.thekelleys.org.uk/dnsmasq/doc.html&#34;&gt;dnsmasq&lt;/a&gt; i &lt;a href=&#34;https://dnscrypt.org/&#34;&gt;dnscrypt-proxy&lt;/a&gt;. Po
kilku dniach eksperymentów udało mi się wypracować przyzwoitą konfigurację, która potrafi obejść to
ograniczenie, poprawiając tym samym prywatność i bezpieczeństwo w internecie korzystając z
darmowego LTE za sprawą Aero2. W tym wpisie postaramy się zaimplementować ten mechanizm na debianie.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
