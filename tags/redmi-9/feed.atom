<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redmi-9 on Morfitronik</title>
    <link>https://morfikov.github.io/tags/redmi-9/</link>
    <description>Recent content in redmi-9 on Morfitronik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language>
    <lastBuildDate>Fri, 08 Oct 2021 23:47:00 +0200</lastBuildDate><atom:link href="https://morfikov.github.io/tags/redmi-9/feed.atom" rel="self" type="application/atom+xml" />
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Zmiana implementacji WebView z Google/AOSP na Bromite w Androidzie</title>
      <link>https://morfikov.github.io/post/zmiana-implementacji-webview-z-google-aosp-na-bromite-w-androidzie/</link>
      <pubDate>Fri, 08 Oct 2021 23:47:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/zmiana-implementacji-webview-z-google-aosp-na-bromite-w-androidzie/</guid>
      <description>&lt;p&gt;Przeglądając ostatnio opcje deweloperskie w swoim telefonie z Androidem 11, wpadła mi w oczy pozycja
&lt;code&gt;WebView implementation&lt;/code&gt; . Nie ukrywam, że trochę mnie ona zainteresowała i zacząłem się
zastanawiać czym tak naprawdę jest ten cały WebView. Mój smartfon działa aktualnie pod kontrolą
crDroid (ROM na bazie AOSP/LineageOS) i nie jest on sprzęgnięty z usługami od Google (brak
jakichkolwiek GAPPS&#39;ów). Dlatego też w tym przypadku w implementacji WebView widnieje w zasadzie
tylko jedna opcja, tj. Android System WebView. W przypadku stock&#39;owych ROM&#39;ów producentów telefonów
będziemy mieli zaś do czynienia z Google System WebView. Jakby nie patrzeć, zarówno Android/AOSP
System WebView, jak i Google System WebView pochodzą od Google, który niezbyt troszczy się o naszą
prywatność. W mojej głowie pojawiło się zatem pytanie na temat tego czym te dwie implementacje się
od siebie różnią, no i naturalnie też czy są jakieś alternatywne implementacje WebView, z których
można by skorzystać zastępując te domyślnie preinstalowane?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Po co smartfonom Xiaomi ROM&#39;y fastboot i jak z nich korzystać</title>
      <link>https://morfikov.github.io/post/po-co-smartfonom-xiaomi-rom-fastboot-i-jak-z-nich-korzystac/</link>
      <pubDate>Tue, 05 Oct 2021 00:47:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/po-co-smartfonom-xiaomi-rom-fastboot-i-jak-z-nich-korzystac/</guid>
      <description>&lt;p&gt;Przeglądając jakiś czas temu oficjalną stronę Xiaomi w poszukiwaniu nowszych wersji oficjalnego
ROM&#39;u na mój smartfon Redmi 9, zauważyłem, że są tam dostępne &lt;a href=&#34;https://c.mi.com/oc/miuidownload/detail?guide=2&#34;&gt;instrukcje na temat wgrania&lt;/a&gt;
takiego oprogramowania za pomocą trybu &lt;code&gt;fastboot&lt;/code&gt;. Trochę się zdziwiłem, bo przecie ROM&#39;y
dostarczane są w paczkach &lt;code&gt;.zip&lt;/code&gt; , przez co nie są one przeznaczone do wgrywania w tym trybie. Tak
czy inaczej, zgodnie z informacją, która widnieje na tamtej stronie, te linki do obrazów fastboot
jeszcze nie zostały wypuszczone, przynajmniej oficjalnie. Nieoficjalnie zaś można je pobrać ze
strony &lt;a href=&#34;https://xiaomifirmwareupdater.com/miui/lancelot/&#34;&gt;xiaomifirmwareupdater.com&lt;/a&gt;. To, co się rzuca od razu w oczy, to rozmiar takiego pliku,
bo standardowo pliki z ROM&#39;em MIUI ważą około 2,2 GiB. ROM&#39;y fastboot mają rozmiar około 4,5 GiB.
Kolejna sprawa, to rozszerzenie samego pliku. W przypadku standardowego ROM&#39;u mamy &lt;code&gt;.zip&lt;/code&gt; , a ROM&#39;y
fastboot mają już rozszerzenie &lt;code&gt;.tar.gz&lt;/code&gt; lub &lt;code&gt;.tgz&lt;/code&gt; .  Nie mogłem przejść obojętnie obok tej
zagadki i postanowiłem sprawdzić, co taka paczka w sobie zawiera i do czego ewentualnie ona może
nam się przydać w kontekście alternatywnego oprogramowania wrzucanego na telefon.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak zaktualizować firmware custom ROM&#39;ów w smartfonach Xiaomi</title>
      <link>https://morfikov.github.io/post/jak-zaktualizowac-firmware-custom-rom-w-smartfonach-xiaomi/</link>
      <pubDate>Thu, 30 Sep 2021 02:43:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-zaktualizowac-firmware-custom-rom-w-smartfonach-xiaomi/</guid>
      <description>&lt;p&gt;Te bardziej szanujące się marki produkujące smartfony zwykle zapewniają wsparcie dla swoich
urządzeń przez co najmniej dwa lata (a czasem nawet i dłużej) od momentu ich wypuszczenia na rynek.
Po wgraniu sobie alternatywnego ROM&#39;u na nasz telefon, oprogramowanie w nim może być aktualizowane
przez opiekuna czy dewelopera takiego ROM&#39;u znacznie dłużej niż producent przewidział. W ten sposób
nie musimy wydawać pieniążków na nowy sprzęt, oczywiście zakładając, że mu nic nie dolega, np. pod
względem wydajności, czy też ewentualnie nie zużył on się nam jakoś bardziej podczas eksploatacji.
Jedną rzeczą, o której posiadacze smartfonów z Androidem zapominają po wgraniu custom ROM&#39;ów na
bazie AOSP/LineageOS, to fakt, że o ile ROM faktycznie dostaje aktualizacje czy to bezpieczeństwa,
czy też upgrade do nowszej wersji Androida, o tyle sam firmware zwykle pozostaje nietknięty. W
przypadku mojego modelu smartfona Redmi 9, Xiaomi od czasu do czasu wypuszcza aktualizacje firmware
do tego urządzenia i przydałoby się ten firmware co jakiś czas zaktualizować. Na szczęście nie
trzeba w tym celu powracać do stock&#39;owego oprogramowania, a cały proces możemy przeprowadzić z
poziomu dowolnej dystrybucji linux&#39;a.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak wgrać crDroid Android ROM na Xiaomi Redmi 9 (lancelot/galahad)</title>
      <link>https://morfikov.github.io/post/jak-wgrac-crdroid-android-rom-na-xiaomi-redmi-9-lancelot-galahad/</link>
      <pubDate>Wed, 29 Sep 2021 17:09:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-wgrac-crdroid-android-rom-na-xiaomi-redmi-9-lancelot-galahad/</guid>
      <description>&lt;p&gt;Przyszła pora pozbyć się w końcu tego stock&#39;owego oprogramowania, które zostało wgrane na mojego
smartfona Xiaomi Redmi 9 (lancelot/galahad) przez producenta tego urządzenia. Przez ostatnich parę
tygodni testowałem różne wersje ROM&#39;ów na bazie AOSP/LineageOS, z których bardziej użyteczne
okazały się &lt;a href=&#34;https://forum.xda-developers.com/t/rom-11-official-pixelplusui-for-redmi-9-poco-m2-lancelot-shiva.4254891/&#34;&gt;PixelPlusUI&lt;/a&gt;, &lt;a href=&#34;https://forum.xda-developers.com/t/rom-11-pixel-extended-official-redmi-9-poco-m2-lava.4296941/&#34;&gt;Pixel Extended&lt;/a&gt; oraz &lt;a href=&#34;https://forum.xda-developers.com/t/rom-official-crdroidandroid-for-redmi-9-poco-m2-lancelot-galahad-shiva.4333181/&#34;&gt;crDroid Anadroid&lt;/a&gt;. Niestety nikt jeszcze
nie opracował LineageOS na ten telefon, więc pozostaje w zasadzie wgranie jednej z tych trzech
powyższych pozycji, jako że Xiaomi Redmi 9 jest oficjalnie przez te ROM&#39;y wspierany. Obecnie Pixel
Extended ma jednak problemy z hostowaniem swoich plików i od paru miesięcy nie miał praktycznie
żadnej aktualizacji, przez co wybór został ograniczony do dwóch pozostałych ROM&#39;ów. Powodem, dla
którego zdecydowałem się wgrać crDroid Android, jest fakt, że nie ma on zintegrowanych aplikacji od
Google (GAPPS). Oczywiście można po instalacji samego ROM&#39;u wgrać także Open GAPPS ale naturalnie
nie jest to wymagane, przez co można sobie skonfigurować cały telefon według własnego uznania
wykorzystując jako bazę początkową microG. W tym artykule zostanie przedstawiony sposób wgrania
ROM&#39;u crDroid Android na smartfon, tak by czasem nie uszkodzić tego urządzenia.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Czym jest tryb lockdown w smartfonie z Androidem</title>
      <link>https://morfikov.github.io/post/czym-jest-tryb-lockdown-w-smartfonie-z-androidem/</link>
      <pubDate>Mon, 27 Sep 2021 05:50:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/czym-jest-tryb-lockdown-w-smartfonie-z-androidem/</guid>
      <description>&lt;p&gt;Jeśli mamy wgranego w miarę nowego Androida (9+) na naszego smartfona i korzystamy aktywnie z tego
urządzenia, to zapewne zdążyliśmy się już przyzwyczaić, że co kilka dni musimy wpisywać ręcznie
hasło do blokady ekranu i to nawet pomimo aktywnej biometrii w ustawieniach systemu. Co ciekawe,
w stock&#39;owych ROM&#39;ach producentów telefonów (nawet w moim Xiaomi Redmi 9), nie ma żadnej opcji,
która byłaby w stanie skonfigurować czas, po którym taki monit z hasłem ma wyskakiwać. Przyznam, że
trochę mnie ten ficzer denerwował ale nie mogłem z nim w zasadzie nic zrobić i trzeba było nauczyć
się go tolerować. Do niedawna nawet nie wiedziałem, że takie pytanie użytkownika o hasło bierze się
z faktu przejścia telefonu w jeden ze jego trybów pracy, tj. &lt;a href=&#34;https://android-developers.googleblog.com/2020/09/lockscreen-and-authentication.html&#34;&gt;tryb lockdown&lt;/a&gt;, w który telefon
jest przełączany automatycznie zwykle co 72 godziny (3 dni). Ludzie mówią, że ten tryb ma chronić
użytkownika smartfona na wypadek utraty urządzenia. Z racji, że aktualnie wgrałem sobie custom ROM
na bazie AOSP/LineageOS, to postanowiłem sprawdzić czy jakieś opcje konfiguracji tego trybu są w
nim dostępne. Przy okazji chciałem nieco bardziej zapoznać się z tym mechanizmem lockdown&#39;u i
zweryfikować na ile może on być użyteczny.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Kopia zapasowa danych smartfona z Androidem (OAndBackupX, Syncthing)</title>
      <link>https://morfikov.github.io/post/kopia-zapasowa-danych-smartfona-z-androidem-oandbackupx-syncthing/</link>
      <pubDate>Sun, 26 Sep 2021 16:44:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/kopia-zapasowa-danych-smartfona-z-androidem-oandbackupx-syncthing/</guid>
      <description>&lt;p&gt;Jak to zwykło się mawiać w świecie IT: ludzie dzielą się na te osobniki, które robią backup i
te, co backup robić będą. Jakiś czas temu pochyliłem się nad zagadnieniem &lt;a href=&#34;/post/czy-smartfon-z-androidem-bez-google-apps-services-ma-sens/&#34;&gt;czy smartfon z
Androidem bez Google Play Services ma sens&lt;/a&gt;. Poruszyłem tam problem tworzenia kopi zapasowej
danych użytkownika zgromadzonych w telefonie. W tym podlinkowanym artykule zostało przestawione jak
przy pomocy TWRP dokonać pełnego backupu całego systemu urządzenia i o ile pod względem technicznym
takie podejście było jak najbardziej w pełni do zaakceptowania, to jednak to rozwiązanie miało dość
istotną wadę, tj. na czas backup&#39;u trzeba było wyłączyć smartfon. Parę dni temu natrafiłem
na &lt;a href=&#34;https://github.com/machiav3lli/oandbackupx&#34;&gt;narzędzia OAndBackupX&lt;/a&gt;, które jest w stanie zrobić kopię zapasową wszystkich zainstalowanych
w Androidzie aplikacji (oraz ich ustawień), wliczając w to nawet appki systemowe. OAndBackupX jest
o tyle lepszym rozwiązaniem w stosunku do TWRP, że można przy jego pomocy robić kopię danych
pojedynczych aplikacji, a nie od razu całego ROM&#39;u, co nie tylko jest czasochłonne ale również
zjada sporo miejsca na dysku komputera, czy gdzie ten backup zamierzamy przechowywać. Niestety
OAndBackupX wymaga uprawnień root, zatem na stock&#39;owym ROM&#39;ie producenta naszego telefonu nie damy
rady z tego narzędzia skorzystać. Jeśli jednak mamy alternatywny ROM na bazie AOSP/LineageOS, to
przydałoby się rzucić okiem na ten kawałek oprogramowania, bo zdaje się ono być wielce użyteczne,
zwłaszcza w przypadku osób mojego pokroju, czyli linux&#39;iarzy, którzy o backup swoich danych chcą
zatroszczyć się tylko i wyłącznie we własnym zakresie, zaprzęgając do pracy choćby &lt;a href=&#34;https://github.com/syncthing/syncthing&#34;&gt;Syncthing&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Optymalizacja procesu ładowania baterii via ACC w smartfonie z Androidem</title>
      <link>https://morfikov.github.io/post/optymalizacja-procesu-ladowania-baterii-via-acc-w-smartfonie-z-androidem/</link>
      <pubDate>Fri, 03 Sep 2021 20:53:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/optymalizacja-procesu-ladowania-baterii-via-acc-w-smartfonie-z-androidem/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;/post/jak-wgrac-twrp-recovery-i-magisk-w-xiaomi-redmi-9-galahad-lancelot/&#34;&gt;Odblokowanie bootloader&#39;a&lt;/a&gt; w smartfonie Xiaomi Redmi 9 (Galahad/Lancelot) mamy już z głowy.
Podobnie sprawa wygląda z &lt;a href=&#34;/post/jak-odblokowac-bootloader-w-xiaomi-redmi-9-galahad-lancelot/&#34;&gt;wgrywaniem na partycję recovery obrazu TWRP&lt;/a&gt; i uzyskiwaniem praw
administratora systemu root za sprawą Magisk&#39;a. Te dwa kluczowe procesy otworzyły nam drogę do
nieco bardziej zaawansowanych prac jeśli chodzi o konfigurację samego urządzenia. W tym artykule
nie będziemy się jeszcze bawić we wgrywanie alternatywnych ROM&#39;ów na bazie AOSP/LineageOS ale za to
zainteresujemy się nieco bardziej procesem ładowania samej baterii w takim telefonie. Chodzi
generalnie o fakt przedłużenia żywotności baterii smartfona za sprawą limitowania maksymalnej
wartości, do jakiej można taką baterię podładować podłączając telefon czy to do portu USB
komputera, czy też do pełnowymiarowej ładowarki. Taki stopień konfiguracji można osiągnąć
zaprzęgając do pracy zaawansowany kontroler ładowania (&lt;a href=&#34;https://github.com/VR-25/acc&#34;&gt;Advanced Charging Controller&lt;/a&gt;, ACC),
który manipuluje niskopoziomowymi ustawieniami kernela linux. W standardowym Androidzie tego typu
funkcjonalności nie uświadczymy, przez co bateria zużywa się parokrotnie szybciej niż powinna, co
przekłada się na wymianę urządzenia na nowe po niecałym roku czy dwóch jego użytkowania. Jeśli nie
uśmiecha nam się wydawać hajsu co roku na nowy telefon tylko dlatego, że nie można w nim wymienić
baterii, to powinniśmy rozważyć rozwiązanie jakie nam daje ACC.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak wgrać TWRP recovery i Magisk w Xiaomi Redmi 9 (galahad/lancelot)</title>
      <link>https://morfikov.github.io/post/jak-wgrac-twrp-recovery-i-magisk-w-xiaomi-redmi-9-galahad-lancelot/</link>
      <pubDate>Tue, 31 Aug 2021 19:45:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-wgrac-twrp-recovery-i-magisk-w-xiaomi-redmi-9-galahad-lancelot/</guid>
      <description>&lt;p&gt;Parę dni temu udało mi się &lt;a href=&#34;/post/jak-odblokowac-bootloader-w-xiaomi-redmi-9-galahad-lancelot/&#34;&gt;odblokować bootloader w moim smartfonie Xiaomi Redmi 9
(galahad/lancelot)&lt;/a&gt;. Nie licząc błędnego URI przy logowaniu na konto Mi wewnątrz appki
XiaoMiTool, nie było zbytnio problemów z tym procesem. Takie odblokowanie bootloader&#39;a w telefonie
w zasadzie nic nam samo z siebie nie daje, no może poza ściągnięciem z niego zabezpieczeń, co
ułatwia dostanie się syfu na Androida, no i też ułatwia złodziejom robotę, bo gdy takie odblokowane
urządzenie wpadnie w ich łapki, to mamy praktycznie pozamiatane. Niemniej jednak, odblokowany
bootloader daje nam możliwość wgrania custom recovery, np. TWRP, co z kolei otwiera nam drogę do
uzyskania praw administratora systemu root, np. za sprawą zainstalowania Magisk&#39;a. Mając dostęp do
root, będziemy mogli takim urządzeniem dowolnie zarządzać. Naturalnie, TWRP daje nam też możliwość
wgrania alternatywnych ROM&#39;ów na bazie AOSP/LineageOS ale w tym artykule skupimy się jedynie na
wrzuceniu TWRP recovery na tego Xiaomi Redmi 9 i ukorzenimy jego Androida przy pomocy wspomnianej już aplikacji Magisk.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak odblokować bootloader w Xiaomi Redmi 9 (galahad/lancelot)</title>
      <link>https://morfikov.github.io/post/jak-odblokowac-bootloader-w-xiaomi-redmi-9-galahad-lancelot/</link>
      <pubDate>Fri, 27 Aug 2021 22:26:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-odblokowac-bootloader-w-xiaomi-redmi-9-galahad-lancelot/</guid>
      <description>&lt;p&gt;Jakiś czas temu wpadł w moje łapki smartfon Xiaomi Redmi 9 (galahad albo lancelot, bo w różnych
częściach systemu jest to inaczej określone), który miał preinstalowanego Androida 10 oraz MIUI 11.
Przez parę miesięcy używania telefonu, dostał on dwa albo trzy większe update całego ROM&#39;u,
wliczając w to aktualizację MIUI do 12.0.1 ze stanem zabezpieczeń na dzień 2021-01-05. Zatem
ostatnia aktualizacja zabezpieczeń tego telefonu miała miejsce zaraz na początku Stycznia. Od tego
czasu cisza. Niby w przypadku tego modelu telefonu aktualizacje miały być wydawane &lt;a href=&#34;https://www.mi.com/global/service/support/security-update-1.html&#34;&gt;co trzy
miesiące do roku 2023&lt;/a&gt; ale najwyraźniej coś jest nie tak i urządzenie od ponad pół roku nie
dostało żadnych aktualizacji. Niby pod tym linkiem można wyczytać informację, że planowana jest
aktualizacja do Androida 11 ale prawdę mówiąc jestem nieco zawiedziony opieszałością Xiaomi. Tak
się złożyło, że przez przypadek trafiłem w &lt;a href=&#34;https://forum.xda-developers.com/f/redmi-9-poco-m2-roms-kernels-recoveries-dev.11175/&#34;&gt;to miejsce na forum XDA&lt;/a&gt;, gdzie z kolei znalazłem
m.in. &lt;a href=&#34;https://forum.xda-developers.com/t/rom-unofficial-11-0-pixel-plus-ui-for-redmi-9-lancelot-galahad.4243813/&#34;&gt;ten wątek&lt;/a&gt;. Zatem alternatywne ROM&#39;y na mój smartfon istnieją i tego faktu nie byłem
świadomy, bo w zeszłym roku jeszcze nic nie szło znaleźć. Postanowiłem zatem odblokować bootloader
w swoim Xiaomi Redmi 9 i spróbować wgrać na niego TWRP i jeden (a może nawet kilka) przykładowy ROM
na bazie AOSP/LineageOS. Proces odblokowania bootloader&#39;a w urządzeniach Xiaomi nie wymaga zbytnio
wysiłku i da się go przeprowadzić w całości pod linux korzystając czy to z XiaoMiTool, czy też przy
pomocy &lt;a href=&#34;/post/wirtualizacja-qemu-kvm-libvirt-na-debian-linux/&#34;&gt;maszyn wirtualnych na bazie QEMU/KVM&lt;/a&gt;. Ten proces nie do końca jest dla każdego taki
oczywisty, dlatego postanowiłem go dokładnie opisać.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
