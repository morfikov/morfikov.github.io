<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>adb on Morfitronik</title>
    <link>https://morfikov.github.io/tags/adb/</link>
    <description>Recent content in adb on Morfitronik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language>
    <lastBuildDate>Sun, 01 Nov 2020 09:01:00 +0100</lastBuildDate><atom:link href="https://morfikov.github.io/tags/adb/feed.xml" rel="self" type="application/rss+xml" />
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Blokowanie reklam w YouTube na smartfonie z Androidem bez root</title>
      <link>https://morfikov.github.io/post/blokowanie-reklam-w-youtube-na-smartfonie-z-androidem-bez-root/</link>
      <pubDate>Sun, 01 Nov 2020 09:01:00 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/blokowanie-reklam-w-youtube-na-smartfonie-z-androidem-bez-root/</guid>
      <description>&lt;p&gt;Użytkownicy Androida do przeglądania serwisu YouTube używają z reguły tej dedykowanej aplikacji od
Google. Problem z tą appką jest taki, że serwuje ona całą masę reklam, których to nie można wykroić
stosując popularne rozwiązania na bazie &lt;a href=&#34;https://blokada.org/&#34;&gt;Blokada&lt;/a&gt; czy &lt;a href=&#34;https://adaway.org/&#34;&gt;AdAway&lt;/a&gt;. Niektórzy starają się
korzystać z innych aplikacji pokroju &lt;a href=&#34;https://newpipe.schabi.org/&#34;&gt;NewPipe&lt;/a&gt; czy &lt;a href=&#34;https://skytube-app.com/&#34;&gt;SkyTube&lt;/a&gt; ale one mają swoje ograniczenia,
np. nie można pisać komentarzy czy też nie działają powiadomienia push. Kiedyś by rozwiązać ten
problem reklam w appce YouTube &lt;a href=&#34;https://forum.xda-developers.com/apps/magisk/official-magisk-v7-universal-systemless-t3473445&#34;&gt;korzystałem z Magisk&#39;a&lt;/a&gt; i jego modułu YouTube Vanced ale to
rozwiązanie od jakiegoś czasu nie jest już wspierane, choć w dalszym ciągu można z niego korzystać.
Jako, że od paru miechów nie zaglądałem na &lt;a href=&#34;https://vancedapp.com/&#34;&gt;stronę YouTube Vanced&lt;/a&gt;, to postanowiłem sprawdzić
czy coś w tej kwestii się zmieniło. Wygląda na to, że jednak coś drgnęło, bo teraz dostępny jest
Vanced Manager, który to jest w stanie tak skonfigurować nasz telefon, by aplikacja YT Vanced
działała bez problemu nawet na nieukorzenionym Androidzie (nie trzeba mieć root&#39;a). Możemy zatem
zachować całą funkcjonalność serwisu YouTube pozbywając się przy tym reklam oraz segmentów
sponsorowanych, no i też nie musimy nic kombinować z telefonem, tj. odblokowywać bootloader&#39;a czy
wgrywać TWRP. Problematyczne może być jednak zainstalowanie YouTube Vanced, bo czasami powiadomienia
(notyfikacje push) mogą nam nie działać poprawnie. Właśnie dlatego postanowiłem napisać parę słów
na temat instalacji tej aplikacji z wykorzystaniem Vanced Manager w Androidach bez root, by uniknąć
tego jak i innych problemów.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak usunąć aplikacje bloatware ze smartfona z Androidem bez root</title>
      <link>https://morfikov.github.io/post/jak-usunac-aplikacje-bloatware-ze-smartfona-z-androidem-bez-root/</link>
      <pubDate>Sun, 27 Jan 2019 06:01:02 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-usunac-aplikacje-bloatware-ze-smartfona-z-androidem-bez-root/</guid>
      <description>&lt;p&gt;Jeśli mamy smartfon z Androidem na pokładzie, to zapewne każdy za nas zadawał sobie pytanie, czy da
radę z takiego telefonu pozbyć się szeregu aplikacji, z których praktycznie nie korzystamy na co
dzień. Część z tych programów można wyłączyć w ustawieniach systemowych ale są też i takie
aplikacje (głównie producenta telefonu, czy też operatora GSM albo te od Google), których
standardowo nie da się wyłączyć z poziomu działającego Androida. Nawet jeśli wymusimy zatrzymanie
stosownych usług, to za chwilę (lub po restarcie urządzenia) one i tak nam automatycznie wystartują.
Im więcej zbędnych aplikacji działa w tle, tym częstsze wybudzanie telefonu, a więc i szybsze
wyczerpywanie się baterii. Dlatego też jeśli nie korzystamy z wbudowanego w ROM &lt;a href=&#34;https://en.wikipedia.org/wiki/Software_bloat&#34;&gt;bloatware&lt;/a&gt;, to
przydałoby się go usunąć lub chociaż trwale wyłączyć. Co ciekawe, tego typu proces nie musi odbywać
się za sprawą administratora systemu (root), bo w zasadzie każda aplikacja w Androidzie może zostać
zainstalowana/odinstalowana dla konkretnego użytkownika w systemie. Nie potrzebujemy mieć zatem
nawet ukorzenionego Androida, by pozbyć się tego całego syfu z systemu, który naszemu urządzeniu
spędza sen z powiek i nie daje mu się przy tym porządnie wyspać.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak przy pomocy Magisk&#39;a pogodzić SafetyNet i ADB/USB debug</title>
      <link>https://morfikov.github.io/post/jak-przy-pomocy-magiska-pogodzic-safetynet-i-adb-usb-debug/</link>
      <pubDate>Sat, 19 Jan 2019 21:12:11 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-przy-pomocy-magiska-pogodzic-safetynet-i-adb-usb-debug/</guid>
      <description>&lt;p&gt;Do tej pory zbytnio nie interesowałem się zagadnieniami dotyczącymi mechanizmu &lt;a href=&#34;https://lineageos.org/Safetynet/&#34;&gt;SafetyNet&lt;/a&gt;, który
ma na celu utrudnić nieco życie użytkownikom smartfonów z Androidem lubiącym posiadać pełny dostęp
do systemu swoich urządzeń za sprawą uzyskania praw administratora (root). To co się zmieniło na
przestrzeni ostatnich paru miesięcy, to fakt, że coraz więcej aplikacji polega na tym całym
SafetyNet, a przynajmniej ja zaczynam coraz częściej korzystać z tego typu oprogramowania. Jeśli
jednak nasze urządzenie nie przejdzie testów SafetyNet, to funkcjonalność aplikacji polegających na
tym mechanizmie może zostać dość znacznie ograniczona. Przykładem może być appka Revolut i jej
odblokowanie za pomocą czytnika linii papilarnych. Bez SafetyNet trzeba podawać PIN za każdym
razem, gdy się do tej aplikacji będziemy próbowali zalogować. Zwykle do obejścia SafetyNet używa
się Magisk&#39;a ale w pewnych sytuacjach, nawet i on nie jest w stanie z tym zdaniem sobie poradzić,
przynajmniej nie bez dodatkowej konfiguracji. Jeśli na co dzień korzystamy z opcji debugowania
ADB/USB, to może nas spotkać nie lada dylemat -- ADB/USB debug vs. SafetyNet. Okazuje się, że można
pogodzić te dwie rzeczy.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Repartycjonowanie flash&#39;a w Neffos C5 i C5 MAX od TP-LINK</title>
      <link>https://morfikov.github.io/post/repartycjonowanie-flash-w-neffos-c5-i-c5-max-od-tp-link/</link>
      <pubDate>Mon, 03 Apr 2017 19:51:32 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/repartycjonowanie-flash-w-neffos-c5-i-c5-max-od-tp-link/</guid>
      <description>&lt;p&gt;Analizując sobie fabryczny podział przestrzeni flash w TP-LINK&#39;owych smartfonach, a konkretnie w
modelach Neffos C5 i C5 MAX, doszedłem do wniosku, że producent tych urządzeń nieco zaszalał
przeznaczając aż 4 GiB przestrzeni na partycję &lt;code&gt;/system/&lt;/code&gt; . W zasadzie ROM w tych telefonach zajmuje
około 2 GiB. Zatem pozostałe 2 GiB zwyczajnie się marnuje i przeciętny użytkownik smartfona nie
będzie w stanie tego obszaru w żaden sposób wykorzystać. Można by zatem inaczej przepartycjonować
ten flash, tak by nieco skurczyć samą partycję &lt;code&gt;/system/&lt;/code&gt; , przeznaczając jednocześnie odzyskane
miejsce na powiększenie partycji &lt;code&gt;/data/&lt;/code&gt; . W tym wpisie postaramy się właśnie taki zabieg zmiany
rozmiaru partycji &lt;code&gt;/system/&lt;/code&gt; przeprowadzić dla tych dwóch wyżej wymienionych modeli smartfonów.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Root w smartfonach Neffos od TP-LINK (X1, C5, C5 MAX, Y5, Y5L)</title>
      <link>https://morfikov.github.io/post/root-w-smartfonach-neffos-od-tp-link-x1-c5-c5-max-y5-y5l/</link>
      <pubDate>Sun, 02 Apr 2017 19:27:56 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/root-w-smartfonach-neffos-od-tp-link-x1-c5-c5-max-y5-y5l/</guid>
      <description>&lt;p&gt;Jakiś czas temu opisywałem proces ukorzeniania (root) smartfonów Neffos, a konkretnie były to
modele &lt;a href=&#34;http://www.neffos.pl/product/details/C5&#34;&gt;C5&lt;/a&gt;, &lt;a href=&#34;http://www.neffos.pl/product/details/C5-Max&#34;&gt;C5 MAX&lt;/a&gt;, &lt;a href=&#34;http://www.neffos.pl/product/details/Y5&#34;&gt;Y5&lt;/a&gt; i &lt;a href=&#34;http://www.neffos.pl/product/details/Y5L&#34;&gt;Y5L&lt;/a&gt;. Od tamtego czasu zdążyłem się nieco bardziej
zagłębić w struktury Androida i udało mi się ze źródeł &lt;a href=&#34;https://omnirom.org/&#34;&gt;OMNI ROM&lt;/a&gt; zbudować natwyne obrazy TWRP
dla każdego z tych ww. telefonów. Oczywiście TP-LINK ma w swojej ofercie jeszcze modele &lt;a href=&#34;http://www.neffos.pl/product/details/C5L&#34;&gt;C5L&lt;/a&gt;,
&lt;a href=&#34;http://www.neffos.com/en/product/details/Y50&#34;&gt;Y50&lt;/a&gt;, &lt;a href=&#34;http://www.neffos.com/en/product/details/X1&#34;&gt;X1&lt;/a&gt; oraz &lt;a href=&#34;http://www.neffos.com/en/product/details/X1Max&#34;&gt;X1 MAX&lt;/a&gt; ale póki co nie będę w stanie przygotować obrazu TWRP i opisu
jak ukorzenić Androidy w trzech z tych czterech smartfonów. Chodzi o to, że C5L został wycofany z
produkcji i raczej nie wpadnie on w moje łapki. Natomiast modele Y50 oraz X1 MAX nie są jeszcze
dostępne w polskiej ofercie TP-LINK&#39;a, przez co minie trochę czasu zanim uda mi się do nich dobrać.
Postanowiłem napisać świeży artykuł dotyczący procesu root w smartfonach Neffos C5, C5 MAX, Y5, Y5L
oraz X1. Po co pisać kolejny artykuł o ukorzenianiu Androida w Neffos&#39;ach? Generalnie rzecz biorąc,
w tych poprzednich wpisach było bardzo dużo informacji zbędnych z punktu widzenia przeciętnego
użytkownika, który chce zrootować system w swoim telefonie. Teraz, gdy dysponuję natywnymi obrazami
TWRP własnej roboty i zdobyłem nieco wiedzy z zakresu operowania na Androidzie, to proces root jest
o wiele prostszy i właśnie dlatego przydałoby się to wszystko opisać na nowo.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Android: Wgrywanie update.zip przez ADB sideload via TWRP recovery</title>
      <link>https://morfikov.github.io/post/android-wgrywanie-update-zip-przez-adb-sideload-via-twrp-recovery/</link>
      <pubDate>Thu, 09 Mar 2017 18:31:55 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/android-wgrywanie-update-zip-przez-adb-sideload-via-twrp-recovery/</guid>
      <description>&lt;p&gt;Po uszkodzeniu jednego z moich smartfonów TP-LINK i skasowaniu na nim wszystkich danych na partycji
&lt;code&gt;/system/&lt;/code&gt; trzeba było pomyśleć nad przywróceniem tego urządzenia do życia. Jednym z rozwiązać było
&lt;a href=&#34;https://morfikov.github.io/post/android-jak-odratowac-smartfon-po-usunieciu-partycji-system/&#34;&gt;binarne wgranie obrazu systemowej partycji bezpośrednio na flash przy pomocy narzędzia dd&lt;/a&gt;. Co
jednak w przypadku, gdy nie mamy dostępu do backup&#39;u lub tez zwyczajnie go nie zrobiliśmy? Co w
takiej sytuacji uczynić i czy jest jakaś nadzieja dla naszego telefonu? Odpowiedź jest naturalnie
twierdząca ale wymagane są dwie rzeczy: działający tryb recovery (najlepiej TWRP) ze wsparciem dla
trybu &amp;quot;ADB sideload&amp;quot; oraz paczka &lt;code&gt;update.zip&lt;/code&gt; z firmware, którą można pobrać bezpośrednio ze strony
TP-LINK/Neffos. By ulżyć nieco osobom, które do mnie piszą z zapytaniem o pomoc w przypadku
skasowania danych na partycji &lt;code&gt;/system/&lt;/code&gt; (czy uszkodzenia jej w jakiś sposób), postanowiłem napisać
krótkie howto na temat używania trybu ADB sideload. W tym artykule w rolach głównych weźmie udział
&lt;a href=&#34;http://www.neffos.pl/product/details/Y5&#34;&gt;Neffos Y5&lt;/a&gt; ale bez problemu można te kroki przeprowadzić chyba na każdym innym smartfonie.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Android: Jak odratować smartfon po usunięciu partycji /system/</title>
      <link>https://morfikov.github.io/post/android-jak-odratowac-smartfon-po-usunieciu-partycji-system/</link>
      <pubDate>Thu, 09 Mar 2017 14:24:44 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/android-jak-odratowac-smartfon-po-usunieciu-partycji-system/</guid>
      <description>&lt;p&gt;Zawsze mnie zastanawiało jak to jest możliwe, by przez przypadek można było usunąć dane na jeden z
kluczowych partycji w smartfonie jaką jest partycja &lt;code&gt;/system/&lt;/code&gt; . Ostatnio wiele osób do mnie pisało
z tego typu problemami i zapytaniem &amp;quot;jak odratować w takiej sytuacji telefon&amp;quot;. Odpowiedź wydawała mi
się prosta: wystarczy wgrać uprzednio zrobiony backup wyczyszczonej partycji via &lt;code&gt;fastboot&lt;/code&gt; .
Problem w tym, że po usunięciu danych z partycji &lt;code&gt;/system/&lt;/code&gt; , &lt;code&gt;fastboot&lt;/code&gt; nie działa. A skąd to wiem?
Ano &amp;quot;przez przypadek&amp;quot; usunąłem sobie dane na tej partycji. W sumie to tylko testowałem &lt;a href=&#34;https://twrp.me/faq/ADBSideload.html&#34;&gt;ficzer w
TWRP zwany ADB Sideload&lt;/a&gt;, który niby ma za zadanie wgrać ROM z paczki &lt;code&gt;.zip&lt;/code&gt; . Coś poszło nie
tak i w zasadzie zostałem z pustą partycją &lt;code&gt;/system/&lt;/code&gt; . Przy odpalaniu telefonu w takim stanie, ten
w zasadzie jedynie się resetuje co kilka chwil. Może i &lt;code&gt;fastboot&lt;/code&gt; nie działa ale można wbić do
trybu recovery. Jeśli tylko mamy wgrany TWRP, to jest spora szansa na odratowanie smartfona. W tym
artykule w rolach głównych wystąpi &lt;a href=&#34;http://www.neffos.pl/product/details/Y5L&#34;&gt;Neffos Y5L&lt;/a&gt;, który ma SoC od Qualcomm&#39;a, zatem nie damy rady
się pobawić SP Flash Tool i całą robotę trzeba będzie odwalić ręcznie.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak zmienić hasło do zaszyfrowanego smartfona z Androidem</title>
      <link>https://morfikov.github.io/post/jak-zmienic-haslo-do-zaszyfrowanego-smartfona-z-androidem/</link>
      <pubDate>Fri, 03 Mar 2017 17:58:36 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-zmienic-haslo-do-zaszyfrowanego-smartfona-z-androidem/</guid>
      <description>&lt;p&gt;Każdy nowszy smartfon z Androidem oferuje możliwość zaszyfrowania wszystkich danych użytkownika
zlokalizowanych na partycji &lt;code&gt;/data/&lt;/code&gt; . Cały proces można przeprowadzić w bardzo prosty sposób i bez
większych problemów. Raz zaszyfrowanego telefonu nie da rady cofnąć do stadium przed szyfrowaniem i
w zasadzie to zabezpieczenie można zdjąć jedynie przez przywrócenie urządzenia do ustawień
fabrycznych. My tutaj jednak nie będziemy zajmować się samym szyfrowaniem smartfona i skupimy się
bardziej na hasłach zabezpieczających mających stać na straży dostępu do naszych cennych danych,
które mamy w telefonie. Większość z nas wykorzystuje krótkie hasło do odblokowania ekranu. To samo
hasło z kolei jest wykorzystywane do zaszyfrowania klucza używanego w procesie
szyfrowania/deszyfrowania danych na flash&#39;u smartfona. W ustawieniach Androida nie ma jednak opcji
rozdzielenia tych haseł i można by pomyśleć, że wykorzystanie czterocyfrowego kodu PIN jako
zabezpieczenie mija się z celem. Na pewno w części smartfonów tak ale niekoniecznie we wszystkich
modelach. Tak się składa, że akurat leży u mnie nieużywany Neffos Y5 od TP-LINK, to postanowiłem
przyjrzeć się nieco bliżej tej kwestii haseł i sprawdzić czy jest się czego obawiać stosując krótkie
hasła w zaszyfrowanych Androidach.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Budowanie obrazu TWRP recovery ze źródeł OMNI ROM</title>
      <link>https://morfikov.github.io/post/budowanie-obrazu-twrp-recovery-ze-zrodel-omni-rom/</link>
      <pubDate>Sun, 19 Feb 2017 21:06:04 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/budowanie-obrazu-twrp-recovery-ze-zrodel-omni-rom/</guid>
      <description>&lt;p&gt;Gdy zamierzamy zbudować sobie własny ROM na smartfon z Androidem, np. &lt;a href=&#34;https://lineageos.org/&#34;&gt;LineageOS&lt;/a&gt; (CyanogenMod
nie jest już rozwijany) czy nawet jedynie obraz recovery (&lt;a href=&#34;https://twrp.me/&#34;&gt;TWRP&lt;/a&gt; albo &lt;a href=&#34;https://www.clockworkmod.com/&#34;&gt;CWM&lt;/a&gt;), to potrzebne nam
jest stosowne urządzenie oraz odpowiedni kod źródłowy. Skoro chcemy budować te ww. rzeczy, to
prawdopodobnie nasz telefon nie jest przez to oprogramowanie jeszcze wspierany lub też sam soft nie
jest regularnie aktualizowany przez dewelopera. W zasadzie zarówno pełne ROM&#39;y jak i obrazy recovery
są budowane ze źródeł Androida. Niemniej jednak, oficjalny kod dostarczany przez Google budzi czasem
wiele kontrowersji i ci nieco bardziej zaawansowani użytkownicy zmieniają go, np. czyniąc go w pełni
OpenSource czy też implementując w nim pewną niestandardową funkcjonalność. Tak powstają Custom
ROM&#39;y, które w późniejszym czasie z racji swojej popularności przestają być &amp;quot;Custom&amp;quot; i zaczynają żyć
swoim własnym życiem obok tego Góglowskiego Androida. W przypadku budowania obrazu recovery nie są
nam potrzebne całe źródła konkretnego ROM&#39;u. Jakby nie patrzeć, potrafią one zajmować trochę
miejsca, a poza tym proces ich budowania jest stosunkowo czasochłonny. Tak czy inaczej, jakieś
źródła trzeba pozyskać i przygotować je do dalszej pracy. W tym artykule nie będziemy sobie
jeszcze budować całego ROM&#39;u i skupimy się na zbudowaniu od podstaw jedynie obrazu TWRP recovery ze
źródeł &lt;a href=&#34;https://omnirom.org/&#34;&gt;OMNI ROM&lt;/a&gt;. Ten proces zostanie pokazany na przykładzie smartfona Neffos Y5 od TP-LINK
przy wykorzystaniu systemu linux, a konkretnie dystrybucji Debian.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Problem z zaszyfrowaniem partycji /data/ na smartfonie z Androidem</title>
      <link>https://morfikov.github.io/post/problem-z-zaszyfrowaniem-partycji-data-na-smartfonie-z-androidem/</link>
      <pubDate>Sat, 11 Feb 2017 18:59:25 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/problem-z-zaszyfrowaniem-partycji-data-na-smartfonie-z-androidem/</guid>
      <description>&lt;p&gt;Bawiąc się ostatnio trochę mechanizmami szyfrującymi w moich smartfonach Neffos podesłanych przez
TP-LINK, po raz kolejny coś nieopatrznie uszkodziłem. Tym razem sprawa wygląda nieco bardziej
poważnie, bo uwalony został cały moduł szyfrujący urządzenie. Chodzi generalnie o to, że w
Androidzie w wersji 4.4/5.0 została wprowadzona &lt;a href=&#34;https://source.android.com/security/encryption/full-disk&#34;&gt;możliwość zaszyfrowania wszystkich danych
użytkownika&lt;/a&gt;, tj. informacji przechowywanych na partycji &lt;code&gt;/data/&lt;/code&gt; . Do odszyfrowania tej partycji
potrzebny jest klucz szyfrujący. Problem w tym, że Android musi gdzieś ten klucz trzymać i to w taki
sposób, by proces Factory Reset był w stanie ten klucz usunąć, choćby na wypadek zapomnienia hasła i
próby odzyskania w takiej sytuacji władzy nad smartfonem. Pech chciał, że akurat na moim Neffos Y5
mam wgrane TWRP recovery i z jakiegoś powodu nie mogłem zresetować ustawień telefonu do fabrycznych
przez ten tryb i posłużyłem się narzędziem &lt;code&gt;fastboot&lt;/code&gt; . Ono najwyraźniej nieco inaczej formatuje
partycję &lt;code&gt;/data/&lt;/code&gt; i w ten sposób uwala cały mechanizm szyfrowania oferowany przez Androida. Czy da
radę jakoś poprawić ten problem, a jeśli tak to w jaki sposób?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak odszyfrować zawartość karty SD w smartfonie z Androidem</title>
      <link>https://morfikov.github.io/post/jak-odszyfrowac-zawartosc-karty-sd-w-smartfonie-z-androidem/</link>
      <pubDate>Thu, 09 Feb 2017 18:01:56 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-odszyfrowac-zawartosc-karty-sd-w-smartfonie-z-androidem/</guid>
      <description>&lt;p&gt;W Androidzie 6.0 Marshmallow został wprowadzony ciekawy mechanizm zwany &lt;a href=&#34;https://source.android.com/devices/storage/adoptable&#34;&gt;Adoptable Storage&lt;/a&gt;,
który umożliwia &lt;a href=&#34;https://morfikov.github.io/post/android-formatowanie-karty-sd-jako-pamiec-wewnetrzna/&#34;&gt;zamontowanie karty SD w smartfonie jako pamięć wewnętrzna&lt;/a&gt;. W ten
sposób pamięć flash w telefonach, które mają jej niewiele, może zostać nieco rozbudowana. Jedyny
problem z tym całym Adoptable Storage jest taki, że Android szyfruje zawartość karty SD
automatycznie, przez co nie jesteśmy w stanie odczytać żadnych informacji z takiego nośnika na
innych urządzeniach. Istnieje jednak sposób, by rozszyfrować i tym samym uzyskać dostęp do danych
zgromadzonych na karcie SD z poziomu linux&#39;a, np. dystrybucji Debian. W tym artykule prześledzimy
sobie właśnie ten proces na przykładzie &lt;a href=&#34;http://www.neffos.pl/product/details/Y5&#34;&gt;smartfona Neffos Y5&lt;/a&gt; od TP-LINK.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak przeprowadzić unroot na smartfonie Neffos Y5L od TP-LINK</title>
      <link>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-y5l-tp-link/</link>
      <pubDate>Thu, 12 Jan 2017 20:07:33 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-y5l-tp-link/</guid>
      <description>&lt;p&gt;Przeprowadzenie &lt;a href=&#34;https://morfikov.github.io/post/android-root-smartfona-neffos-y5l-tp-link/&#34;&gt;procesu root na smartfonie Neffos Y5L&lt;/a&gt; od TP-LINK nie było tak łatwe jak w
przypadku innych modeli telefonów tego producenta. Niemniej jednak, trzeba zdawać sobie sprawę, że
ukorzenianie Androida niesie za sobą pewne zagrożenia. Nie chodzi tutaj tylko o niezaufane
aplikacje ale też trzeba brać pod uwagę możliwość przypadkowego (przypadki nie istnieją) skasowania
czy zmienienia plików systemowych, przez co nasz telefon może przestać nam działać poprawnie lub
też przestanie się w ogóle uruchamiać. Jeśli natomiast wgraliśmy SuperSU i praktycznie w ogóle z
niego nie korzystamy, to moim zdaniem lepiej jest przeprowadzić proces unroot i korzystać z
Neffos&#39;a Y5L, tak jak ze zwykłego urządzenia z Androidem na pokładzie. Proces cofania zmian w
systemie nie jest jakoś specjalnie trudny ale trzeba uważać, by w jego trakcie nie uszkodzić
smartfona. Ten artykuł ma na celu pokazanie jak cofnąć wszelkie zmiany wprowadzone w telefonie za
sprawą dostępu do praw administracyjnych w Neffos Y5L.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Android: Root smartfona Neffos Y5L od TP-LINK</title>
      <link>https://morfikov.github.io/post/android-root-smartfona-neffos-y5l-tp-link/</link>
      <pubDate>Wed, 11 Jan 2017 19:30:26 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/android-root-smartfona-neffos-y5l-tp-link/</guid>
      <description>&lt;p&gt;Może i ten najtańszy smartfon w ofercie TP-LINK nie może popisać się najmocniejszymi podzespołami
ale w zasadzie ten fakt nie przeszkadza nam, by przeprowadzić na Neffos Y5L (TP801A) proces root.
Ten smartfon ma zbliżony SoC do Neffos Y5, a konkretnie mamy tutaj do czynienia z Snapdragon 210
(MSM8209) od Qualcomm&#39;a. Ten fakt sprawia, że w przypadku Neffos Y5L cały proces uzyskiwania
uprawnień administratora systemu przebiega bardzo podobnie do tego &lt;a href=&#34;https://morfikov.github.io/post/android-root-smartfona-neffos-y5-od-tp-link/&#34;&gt;opisywanego wcześniej dla Neffos
Y5&lt;/a&gt;. Dlatego też poniższy artykuł za bardzo się nie różni i w zasadzie został jedynie lekko
przerobiony pod kątem zgodności ze smartfonem Neffos Y5L.&lt;/p&gt;
&lt;p&gt;Prostszy sposób na przeprowadzanie procesu root w smartfonach Neffos od TP-LINK z wykorzystaniem
natywnych obrazów TWRP &lt;a href=&#34;https://morfikov.github.io/post/root-w-smartfonach-neffos-od-tp-link-x1-c5-c5-max-y5-y5l/&#34;&gt;został opisany w nowym wątku&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Android: Root smartfona Neffos Y5 od TP-LINK</title>
      <link>https://morfikov.github.io/post/android-root-smartfona-neffos-y5-od-tp-link/</link>
      <pubDate>Fri, 06 Jan 2017 18:16:17 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/android-root-smartfona-neffos-y5-od-tp-link/</guid>
      <description>&lt;p&gt;Nie we wszystkich smartfonach Neffos da radę przeprowadzić proces root tak łatwo jak to miało
miejsce w przypadku modeli &lt;a href=&#34;https://morfikov.github.io/post/android-root-smartfona-neffos-c5-od-tp-link/&#34;&gt;Neffos C5&lt;/a&gt; i &lt;a href=&#34;https://morfikov.github.io/post/android-root-smartfona-neffos-c5-max-od-tp-link/&#34;&gt;Neffos C5 MAX&lt;/a&gt;. TP-LINK ma w swojej ofercie również
&lt;a href=&#34;http://www.neffos.pl/product/details/Y5&#34;&gt;model Neffos Y5&lt;/a&gt; (TP802A) i on w odróżnieniu do tych dwóch poprzednich ma inne podzespoły, a
konkretnie SoC, którzy pochodzi od producenta Qualcomm (Snapdragon 210, model MSM8909). Root
smartfonów opartych o tego typu SoC przebiega nieco inaczej ale jest generalnie do zrobienia, choć
trzeba trochę się przyłożyć do procesu backup&#39;u flash&#39;a telefonu. Pozostała część jest w miarę
standardowa. W tym wpisie zostanie przeprowadzony proces root smartfona Neffos Y5.&lt;/p&gt;
&lt;p&gt;Prostszy sposób na przeprowadzanie procesu root w smartfonach Neffos od TP-LINK z wykorzystaniem
natywnych obrazów TWRP &lt;a href=&#34;https://morfikov.github.io/post/root-w-smartfonach-neffos-od-tp-link-x1-c5-c5-max-y5-y5l/&#34;&gt;został opisany w nowym wątku&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak przeprowadzić unroot na smartfonie Neffos C5 MAX od TP-LINK</title>
      <link>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-c5-max-od-tp-link/</link>
      <pubDate>Wed, 14 Dec 2016 19:08:01 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-c5-max-od-tp-link/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://morfikov.github.io/post/android-root-smartfona-neffos-c5-max-od-tp-link/&#34;&gt;Proces root na smartfonie Neffos C5 MAX&lt;/a&gt; od TP-LINK można przeprowadzić w miarę bez większych
problemów, choć nie jest to rozwiązanie działające OOTB. Niemniej jednak, taki root telefonu czyni
go bardziej podatnym na zagrożenia ze strony wrogich aplikacji. Ponadto, kasując czy też zmieniając
pliki systemowe, możemy sprawić, że nasze urządzenie zwyczajnie przestanie nam działać, tj. już się
nie uruchomi. Niektórzy użytkownicy smartfonów nie zdają sobie z tego sprawy i ukorzeniają Androida
bez głębszego zastanowienia się. Mi jako linux&#39;iarzowi, root jest niezbędny do pracy ale czy aby na
pewno każdy musi go mieć? Ci z was, którzy taki root systemu przeprowadzili i nie korzystają z niego
praktycznie wcale, zastanawiają się pewnie czy istnieje sposób, by cofnąć wprowadzone zmiany i
przywrócić Androida do stanu pierwotnego. Krótka odpowiedź brzmi: &amp;quot;oczywiście, że tak&amp;quot; i temu
procesowi przyjrzymy się w niniejszym artykule.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Android: Root smartfona Neffos C5 MAX od TP-LINK</title>
      <link>https://morfikov.github.io/post/android-root-smartfona-neffos-c5-max-od-tp-link/</link>
      <pubDate>Tue, 13 Dec 2016 17:27:37 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/android-root-smartfona-neffos-c5-max-od-tp-link/</guid>
      <description>&lt;p&gt;Bawiąc się ostatnio &lt;a href=&#34;https://morfikov.github.io/post/recenzja-smartfon-neffos-c5-max-od-tp-link/&#34;&gt;smartfonem Neffos C5 MAX&lt;/a&gt; od TP-LINK, obiecałem sobie, że jak tylko będę
miał chwilę czasu, to postaram się ukorzenić Androida, który w tym telefonie siedzi (Lollipop).
Generalnie rzecz biorąc, sposób root&#39;owania tego urządzenia jest bardzo podobny do tego, który
miałem już możliwość &lt;a href=&#34;https://morfikov.github.io/post/android-root-smartfona-neffos-c5-od-tp-link/&#34;&gt;przeprowadzić na innym modelu TP-LINK&#39;a, tj. Neffos C5&lt;/a&gt;. Dlatego też
poniższy artykuł jest bardzo zbliżony treścią, choć lekko zaktualizowany pod kątem Neffos&#39;a C5 MAX.
Grunt, że nie było żadnych problemów z przeprowadzeniem backup&#39;u flash&#39;a telefonu jak i samego
procesu root.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Android: Formatowanie karty SD jako pamięć wewnętrzna</title>
      <link>https://morfikov.github.io/post/android-formatowanie-karty-sd-jako-pamiec-wewnetrzna/</link>
      <pubDate>Sun, 04 Dec 2016 19:18:40 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/android-formatowanie-karty-sd-jako-pamiec-wewnetrzna/</guid>
      <description>&lt;p&gt;Jakiś czas temu bawiąc się jednym z TP-LINK&#39;owch smartfonów, konkretnie to był &lt;a href=&#34;http://www.neffos.pl/product/details/C5&#34;&gt;model Neffos C5&lt;/a&gt;,
nie byłem zbytnio zadowolony z faktu, że karta SD w takim telefonie może być sformatowana jedynie
systemem plików z rodziny FAT. Takie rozwiązanie niesie ze sobą pewne niedogodności, bo &lt;a href=&#34;https://pl.wikipedia.org/wiki/FAT32&#34;&gt;system
plików FAT ma dość spore ograniczenia&lt;/a&gt; jeśli chodzi o przechowywanie informacji. Niekoniecznie
wszyscy musimy wgrywać na smartfona bardzo duże pliki czy też trzymać ich tam setki GiB, bo to jest
raczej rzadkością, ale brak wsparcia uprawnień do plików i katalogów w systemie plików FAT powoduje,
że aplikacje w Androidzie nie chcą zapisywać swoich danych na karcie SD, która taki system plików
wykorzystuje. W efekcie trzeba kombinować, by &lt;a href=&#34;https://morfikov.github.io/post/android-brak-mozliwosci-zapisu-danych-na-karcie-sd-neffos-c5/&#34;&gt;aplikacja kamery/aparatu zapisywała zdjęcia czy
materiał video na karcie SD&lt;/a&gt;. Na smartfonach TP-LINK&#39;a, które mają zainstalowany Android 6.0
Marshmallow, np. &lt;a href=&#34;http://www.neffos.pl/product/details/Y5&#34;&gt;Y5&lt;/a&gt; czy &lt;a href=&#34;http://www.neffos.pl/product/details/Y5L&#34;&gt;Y5L&lt;/a&gt;), jesteśmy w stanie sformatować karty SD jako pamięć
wewnętrzna za sprawą wprowadzonego w tej wersji Androida &lt;a href=&#34;https://source.android.com/devices/storage/adoptable&#34;&gt;mechanizmu Adoptable Storage&lt;/a&gt;.
Postanowiłem zatem sprawdzić jak taki proces formatowania karty SD przebiega i co dokładnie może
nam przynieść jego przeprowadzenie.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak przeprowadzić unroot na smartfonie Neffos C5 od TP-LINK</title>
      <link>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-c5-od-tp-link/</link>
      <pubDate>Thu, 20 Oct 2016 22:58:57 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-c5-od-tp-link/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://morfikov.github.io/post/android-root-smartfona-neffos-c5-od-tp-link/&#34;&gt;Proces root na smartfonie Neffos C5&lt;/a&gt; od TP-LINK można przeprowadzić w miarę bez większych
problemów, choć nie jest to rozwiązanie działające OOTB. Niemniej jednak, taki root telefonu czyni
go bardziej podatnym na zagrożenia ze strony wrogich aplikacji. Ponadto, kasując czy też zmieniając
pliki systemowe, możemy sprawić, że nasze urządzenie zwyczajnie przestanie nam działać, tj. już się
nie uruchomi. Niektórzy użytkownicy smartfonów nie zdają sobie z tego sprawy i ukorzeniają Androida
bez głębszego zastanowienia się. Mi jako linux&#39;iarzowi, root jest niezbędny do pracy ale czy aby na
pewno każdy musi go mieć? Ci z was, którzy taki root systemu przeprowadzili i nie korzystają z niego
praktycznie wcale, zastanawiają się pewnie czy istnieje sposób, by cofnąć wprowadzone zmiany i
przywrócić Androida do stanu pierwotnego. Krótka odpowiedź brzmi: &amp;quot;oczywiście, że tak&amp;quot; i temu
procesowi przyjrzymy się w niniejszym artykule.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Android: Root smartfona Neffos C5 od TP-LINK</title>
      <link>https://morfikov.github.io/post/android-root-smartfona-neffos-c5-od-tp-link/</link>
      <pubDate>Sun, 09 Oct 2016 18:08:36 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/android-root-smartfona-neffos-c5-od-tp-link/</guid>
      <description>&lt;p&gt;Smartfony mają to do siebie, że ogromna większość z nich pracuje pod kontrolą systemu linux, a
konkretnie jest to jakiś Android. Tak też jest w przypadku &lt;a href=&#34;http://www.neffos.pl/product/details/C5&#34;&gt;Neffos&#39;a C5&lt;/a&gt; od TP-LINK, gdzie mamy
zainstalowaną wersję 5.1 (Lollipop). My linux&#39;iarze chcemy mieć pełny dostęp do systemu
operacyjnego, by bez większych przeszkód móc zarządzać urządzeniem, które pod jego kontrolą pracuje.
Problem w tym, że ten Neffos C5 nie ma w standardzie root&#39;a i nie mamy administracyjnego dostępu do
całego systemu plików telefonu. Jest kilka metod root&#39;owania smartfona, np. za pomocą
Kingoroot/Kingroot ale nie działają one w przypadku tego telefonu (i całe szczęście). W tym
artykule zostanie pokazany sposób na root systemu Neffos&#39;a C5 przy zachowaniu wszelkich norm
bezpieczeństwa, które w sytuacjach podbramkowych pomogą nam odzyskać kontrolę nad telefonem.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Android: Jak zainstalować ADB i fastboot pod linux</title>
      <link>https://morfikov.github.io/post/android-jak-zainstalowac-adb-i-fastboot-pod-linux/</link>
      <pubDate>Sat, 08 Oct 2016 20:34:36 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/android-jak-zainstalowac-adb-i-fastboot-pod-linux/</guid>
      <description>&lt;p&gt;Bawiąc się &lt;a href=&#34;http://www.neffos.pl/product/details/C5&#34;&gt;smartfonem Neffos C5&lt;/a&gt; od TP-LINK chciałem sprawdzić czy da radę zainstalowanemu na
nim Androidowi 5.1 (Lollipop) zrobić root&#39;a. Chodzi o uzyskanie dostępu administracyjnego do systemu
plików na flash&#39;u telefonu. Proces się powiódł, z tym, że by do niego przystąpić, potrzebne są
narzędzia takie jak &lt;code&gt;adb&lt;/code&gt; i &lt;code&gt;fastboot&lt;/code&gt; , bo przy ich pomocy możemy sterować telefonem, np. z poziomu
jakiegoś linux&#39;a. Niemniej jednak, system komputera jak i smartfona trzeba pierw przygotować
odpowiednio, by taka komunikacja była możliwa i ten proces zostanie właśnie opisany poniżej.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
