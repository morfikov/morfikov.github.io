<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>marshmallow on Morfitronik</title>
    <link>https://morfikov.github.io/tags/marshmallow/</link>
    <description>Recent content in marshmallow on Morfitronik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language>
    <lastBuildDate>Sun, 05 Mar 2017 18:25:13 +0000</lastBuildDate><atom:link href="https://morfikov.github.io/tags/marshmallow/feed.xml" rel="self" type="application/rss" />
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Android: Zmiana trybu USB z Charge-Only na MTP w Marshmallow</title>
      <link>https://morfikov.github.io/post/android-zmiana-trybu-usb-z-charge-only-na-mtp-w-marshmallow/</link>
      <pubDate>Sun, 05 Mar 2017 18:25:13 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-zmiana-trybu-usb-z-charge-only-na-mtp-w-marshmallow/</guid>
      <description>&lt;p&gt;System Android w większej lub mniejszej części zmienia się z wydania na wydanie. Te nowsze wersje
zwykle zawierają całą masę nowych mechanizmów i rozbudowują te już istniejące, tak by ten OS w
lepszym stopniu zaspokajał zachcianki użytkowników smartfonów. Problem w tym, że niektóre kroki
deweloperów Androida potrafią wprawić w zastanowienie niejednego logicznie myślącego osobnika.
Przykładem może być przestawienie domyślnego trybu USB w Marshmallow z MTP na Charge-Only (tylko
ładowanie). Jedni mówią, że takie posunięcie jest podyktowane względami bezpieczeństwa, a inni, że
chodzi o performance przy ładowaniu baterii, gdzie moduł USB nie działa w tym drugim trybie i nie
konsumuje energii, przez co ładowanie ma przebiegać szybciej. Ile w tym prawdy, tego nie wiem ale ja
za bardzo nie widzę żadnych wymiernych korzyści z przestawienia tego trybu na Charge-Only. Natomiast
widzę bardzo wyraźnie utrudnienia przy interakcji telefonu z komputerem za sprawą tej zmiany.
Poszukałem trochę informacji na ten temat i znalazłem rozwiązanie w postaci aplikacji MTP enabler.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Android: Framework Xposed i moduły do YouTube</title>
      <link>https://morfikov.github.io/post/android-framework-xposed-i-moduly-do-youtube/</link>
      <pubDate>Sat, 04 Mar 2017 21:56:54 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-framework-xposed-i-moduly-do-youtube/</guid>
      <description>&lt;p&gt;Stock&#39;owe Androidy w smartfonach mają ten problem, że zawierają całą masę preinstalowanych aplikacji
od Google. Nie to by jakoś mnie to bolało, no może za wyjątkiem braku możliwości ich wywalenia czy
wyłączenia. To co mnie trochę irytuje, to fakt obecności reklam w aplikacji YouTube. Nie da rady się
ich pozbyć praktycznie w żaden sposób. Zdaję sobie sprawę, że serwis YT można przeglądać w
Firefox&#39;ie i jeśli mamy &lt;a href=&#34;https://morfikov.github.io
/post/android-blokowanie-reklam-z-adaway-na-smartfonie/&#34;&gt;zainstalowanego w telefonie adblock&#39;a, np.
AdAway&lt;/a&gt;, czy też &lt;a href=&#34;https://morfikov.github.io
/post/blokowanie-reklam-adblock-na-domowym-routerze-wifi/&#34;&gt;wdrożony
podobny filtr na domowym routerze WiFi z
LEDE/OpenWRT&lt;/a&gt;, to te
reklamy mogą zostać z powodzeniem odfiltrowane, przynajmniej w Firefox&#39;ie. Jestem też świadom
istnienia &lt;a href=&#34;https://morfikov.github.io
/post/android-youtube-bez-reklam-na-smartfonie-newpipe/&#34;&gt;aplikacji
NewPipe&lt;/a&gt; , która jest
zubożonym klientem YouTube. Niemniej jednak, te opisane wyżej sposoby mają jedną podstawową wadę.
Mianowicie tracimy lwią część funkcjonalności serwisu YouTube. Przykładem mogą być powiadamiania w
przypadku, gdy na jeden z subskrybowanych kanałów zostanie wrzucony jaki materiał video. Taką opcję
ma ta aplikacja od Google ale klikając w powiadomienie jest niemal pewne, że włączy nam się jakaś
wredna reklama o wiele głośniejsza niż sam filmik, który zamierzamy obejrzeć. Innym problemem w
przypadku tej góglowskiej aplikacji jest brak możliwości odtwarzania video w tle czy też przy
zgaszonym wyświetlaczu. Postanowiłem w końcu wziąć się za ogarnięcie tej góglowskiej aplikacji
YouTube i wyeliminować te drażniące mnie problemy &lt;a href=&#34;http://repo.xposed.info/module/de.robv.android.xposed.installer&#34;&gt;instalując w smartfonie framework
Xposed&lt;/a&gt; wraz z odpowiednimi
modułami: &lt;a href=&#34;http://repo.xposed.info/module/com.pyler.youtubebackgroundplayback&#34;&gt;YouTube Background
Playback&lt;/a&gt; oraz &lt;a href=&#34;http://repo.xposed.info/module/ma.wanam.youtubeadaway&#34;&gt;YouTube
AdAway&lt;/a&gt;. Jako, że nie jest to proces łatwy,
to postanowiłem go opisać krok po kroku.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak zmienić hasło do zaszyfrowanego smartfona z Androidem</title>
      <link>https://morfikov.github.io/post/jak-zmienic-haslo-do-zaszyfrowanego-smartfona-z-androidem/</link>
      <pubDate>Fri, 03 Mar 2017 17:58:36 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-zmienic-haslo-do-zaszyfrowanego-smartfona-z-androidem/</guid>
      <description>&lt;p&gt;Każdy nowszy smartfon z Androidem oferuje możliwość zaszyfrowania wszystkich danych użytkownika
zlokalizowanych na partycji &lt;code&gt;/data/&lt;/code&gt; . Cały proces można przeprowadzić w bardzo prosty sposób i bez
większych problemów. Raz zaszyfrowanego telefonu nie da rady cofnąć do stadium przed szyfrowaniem i
w zasadzie to zabezpieczenie można zdjąć jedynie przez przywrócenie urządzenia do ustawień
fabrycznych. My tutaj jednak nie będziemy zajmować się samym szyfrowaniem smartfona i skupimy się
bardziej na hasłach zabezpieczających mających stać na straży dostępu do naszych cennych danych,
które mamy w telefonie. Większość z nas wykorzystuje krótkie hasło do odblokowania ekranu. To samo
hasło z kolei jest wykorzystywane do zaszyfrowania klucza używanego w procesie
szyfrowania/deszyfrowania danych na flash&#39;u smartfona. W ustawieniach Androida nie ma jednak opcji
rozdzielenia tych haseł i można by pomyśleć, że wykorzystanie czterocyfrowego kodu PIN jako
zabezpieczenie mija się z celem. Na pewno w części smartfonów tak ale niekoniecznie we wszystkich
modelach. Tak się składa, że akurat leży u mnie nieużywany Neffos Y5 od TP-LINK, to postanowiłem
przyjrzeć się nieco bliżej tej kwestii haseł i sprawdzić czy jest się czego obawiać stosując krótkie
hasła w zaszyfrowanych Androidach.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Budowanie obrazu TWRP recovery ze źródeł OMNI ROM</title>
      <link>https://morfikov.github.io/post/budowanie-obrazu-twrp-recovery-ze-zrodel-omni-rom/</link>
      <pubDate>Sun, 19 Feb 2017 21:06:04 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/budowanie-obrazu-twrp-recovery-ze-zrodel-omni-rom/</guid>
      <description>&lt;p&gt;Gdy zamierzamy zbudować sobie własny ROM na smartfon z Androidem, np.
&lt;a href=&#34;https://lineageos.org/&#34;&gt;LineageOS&lt;/a&gt; (CyanogenMod nie jest już rozwijany) czy nawet jedynie obraz
recovery (&lt;a href=&#34;https://twrp.me/&#34;&gt;TWRP&lt;/a&gt; albo &lt;a href=&#34;https://www.clockworkmod.com/&#34;&gt;CWM&lt;/a&gt;), to potrzebne nam jest
stosowne urządzenie oraz odpowiedni kod źródłowy. Skoro chcemy budować te ww. rzeczy, to
prawdopodobnie nasz telefon nie jest przez to oprogramowanie jeszcze wspierany lub też sam soft nie
jest regularnie aktualizowany przez dewelopera. W zasadzie zarówno pełne ROM&#39;y jak i obrazy recovery
są budowane ze źródeł Androida. Niemniej jednak, oficjalny kod dostarczany przez Google budzi czasem
wiele kontrowersji i ci nieco bardziej zaawansowani użytkownicy zmieniają go, np. czyniąc go w pełni
OpenSource czy też implementując w nim pewną niestandardową funkcjonalność. Tak powstają Custom
ROM&#39;y, które w późniejszym czasie z racji swojej popularności przestają być &amp;quot;Custom&amp;quot; i zaczynają żyć
swoim własnym życiem obok tego Góglowskiego Androida. W przypadku budowania obrazu recovery nie są
nam potrzebne całe źródła konkretnego ROM&#39;u. Jakby nie patrzeć, potrafią one zajmować trochę
miejsca, a poza tym proces ich budowania jest stosunkowo czasochłonny. Tak czy inaczej, jakieś
źródła trzeba pozyskać i przygotować je do dalszej pracy. W tym artykule nie będziemy sobie
jeszcze budować całego ROM&#39;u i skupimy się na zbudowaniu od podstaw jedynie obrazu TWRP recovery ze
źródeł &lt;a href=&#34;https://omnirom.org/&#34;&gt;OMNI ROM&lt;/a&gt;. Ten proces zostanie pokazany na przykładzie smartfona
Neffos Y5 od TP-LINK przy wykorzystaniu systemu linux, a konkretnie dystrybucji Debian.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Problem z zaszyfrowaniem partycji /data/ na smartfonie z Androidem</title>
      <link>https://morfikov.github.io/post/problem-z-zaszyfrowaniem-partycji-data-na-smartfonie-z-androidem/</link>
      <pubDate>Sat, 11 Feb 2017 18:59:25 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/problem-z-zaszyfrowaniem-partycji-data-na-smartfonie-z-androidem/</guid>
      <description>&lt;p&gt;Bawiąc się ostatnio trochę mechanizmami szyfrującymi w moich smartfonach Neffos podesłanych przez
TP-LINK, po raz kolejny coś nieopatrznie uszkodziłem. Tym razem sprawa wygląda nieco bardziej
poważnie, bo uwalony został cały moduł szyfrujący urządzenie. Chodzi generalnie o to, że w
Androidzie w wersji 4.4/5.0 została wprowadzona &lt;a href=&#34;https://source.android.com/security/encryption/full-disk&#34;&gt;możliwość zaszyfrowania wszystkich danych
użytkownika&lt;/a&gt;, tj. informacji
przechowywanych na partycji &lt;code&gt;/data/&lt;/code&gt; . Do odszyfrowania tej partycji potrzebny jest klucz
szyfrujący. Problem w tym, że Android musi gdzieś ten klucz trzymać i to w taki sposób, by proces
Factory Reset był w stanie ten klucz usunąć, choćby na wypadek zapomnienia hasła i próby odzyskania
w takiej sytuacji władzy nad smartfonem. Pech chciał, że akurat na moim Neffos Y5 mam wgrane TWRP
recovery i z jakiegoś powodu nie mogłem zresetować ustawień telefonu do fabrycznych przez ten tryb i
posłużyłem się narzędziem &lt;code&gt;fastboot&lt;/code&gt; . Ono najwyraźniej nieco inaczej formatuje partycję &lt;code&gt;/data/&lt;/code&gt; i
w ten sposób uwala cały mechanizm szyfrowania oferowany przez Androida. Czy da radę jakoś poprawić
ten problem, a jeśli tak to w jaki sposób?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak odszyfrować zawartość karty SD w smartfonie z Androidem</title>
      <link>https://morfikov.github.io/post/jak-odszyfrowac-zawartosc-karty-sd-w-smartfonie-z-androidem/</link>
      <pubDate>Thu, 09 Feb 2017 18:01:56 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-odszyfrowac-zawartosc-karty-sd-w-smartfonie-z-androidem/</guid>
      <description>&lt;p&gt;W Androidzie 6.0 Marshmallow został wprowadzony ciekawy mechanizm zwany &lt;a href=&#34;https://source.android.com/devices/storage/adoptable&#34;&gt;Adoptable
Storage&lt;/a&gt;, który umożliwia &lt;a href=&#34;https://morfikov.github.io
/post/android-formatowanie-karty-sd-jako-pamiec-wewnetrzna/&#34;&gt;zamontowanie karty
SD w smartfonie jako pamięć
wewnętrzna&lt;/a&gt;. W ten
sposób pamięć flash w telefonach, które mają jej niewiele, może zostać nieco rozbudowana. Jedyny
problem z tym całym Adoptable Storage jest taki, że Android szyfruje zawartość karty SD
automatycznie, przez co nie jesteśmy w stanie odczytać żadnych informacji z takiego nośnika na
innych urządzeniach. Istnieje jednak sposób, by rozszyfrować i tym samym uzyskać dostęp do danych
zgromadzonych na karcie SD z poziomu linux&#39;a, np. dystrybucji Debian. W tym artykule prześledzimy
sobie właśnie ten proces na przykładzie &lt;a href=&#34;http://www.neffos.pl/product/details/Y5&#34;&gt;smartfona Neffos
Y5&lt;/a&gt; od TP-LINK.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Android Studio i Android SDK pod linux</title>
      <link>https://morfikov.github.io/post/android-studio-i-android-sdk-pod-linux/</link>
      <pubDate>Sun, 29 Jan 2017 18:29:36 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-studio-i-android-sdk-pod-linux/</guid>
      <description>&lt;p&gt;Rozpoczynając przygodę z Androidem (tylko taką nieco bardziej deweloperską) trzeba posiadać w
systemie szereg niezbędnych narzędzi. Chodzi tutaj oczywiście o Android SDK. Metod na instalację
tego pakietu na linux&#39;ie, a konkretnie w dystrybucji Debian, jest co najmniej kilka. Chodzi o to, że
Google udostępnia paczkę &lt;code&gt;.zip&lt;/code&gt; z Android SDK, którą można pobrać sobie z oficjalnej strony
Androida. Dodatkowo, na tej samej stronie mamy coś o nazwie Android Studio, które również jest w
stanie nam potrzebne narzędzia dostarczyć. Poza tym, te narzędzia można także skompilować sobie ze
źródeł Androida, jak i również zainstalować bezpośrednio z repozytorium samego Debiana. Niemniej
jednak, część z tych sposobów nie jest zbytnio wygodna, a pozostała część zakłada, że korzystamy z
najnowszej wersji Androida (obecnie Nougat). A co w przypadku, gdybyśmy chcieli operować na
Androidzie 5.1 (Lollipop) czy 6.0 (Marshmallow)? Jak zainstalować pasujące wersje narzędzi, by nic
nam się nie gryzło ze sobą?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak zlokalizować skradziony/zagubiony smartfon z Androidem</title>
      <link>https://morfikov.github.io/post/jak-zlokalizowac-skradziony-zagubiony-smartfon-z-androidem/</link>
      <pubDate>Fri, 27 Jan 2017 18:52:06 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-zlokalizowac-skradziony-zagubiony-smartfon-z-androidem/</guid>
      <description>&lt;p&gt;Smartfony towarzyszą nam w codziennym życiu praktycznie cały czas. Dlatego też zaczynamy
przechowywać w tych urządzeniach coraz to więcej informacji osobistych, które są w stanie dość
dokładnie opisać nasze życie prywatne. Co jednak w przypadku, gdy taki telefon zgubimy lub też
zostanie nam on skradziony przez kogoś? Gdy chodzi o urządzenia z Androidem, to Google oferuje
usługę, która jest w stanie połączyć się z naszym smartfonem i przy odrobinie szczęścia ujawnić
nam jego położenie geograficzne lub też pozwolić nam na zdalne zablokowanie systemu w telefonie.
Chodzi oczywiście o usługę &amp;quot;Znajdź telefon/smartfon&amp;quot; (find my phone), na którą rzucimy sobie okiem w
tym artykule.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Factory Reset Protection (FRP) w smartfonach z Androidem</title>
      <link>https://morfikov.github.io/post/factory-reset-protection-frp-w-smartfonach-z-androidem/</link>
      <pubDate>Fri, 20 Jan 2017 18:37:11 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/factory-reset-protection-frp-w-smartfonach-z-androidem/</guid>
      <description>&lt;p&gt;Kupowanie telefonów czy smartfonów z Androidem z innych źródeł niż oficjalne punkty sprzedaży nie
zawsze jest bezpieczną opcją. Gdy nabywamy takie urządzenie od znajomego, to raczej nie powinniśmy
się martwić o to, że ten telefon może być kradziony. Niemniej jednak, po zakupie takiego urządzenia,
poprzedni użytkownik zwykle resetuje jego ustawienia do fabrycznych, by klient miał świeży system i
nie był w stanie uzyskać dostępu do prywatnych danych poprzedniego właściciela smartfona. Nie byłoby
w tym nic nadzwyczajnego, gdyby nie fakt, że nabywca tak odsprzedanego telefonu może mieć pewne
problemy ze skonfigurowaniem Androida, bo ten system zwróci mu komunikat: &amp;quot;Urządzenie zostało
zresetowane. Aby kontynuować, zaloguj się na konto Google, które było wcześniej synchronizowane na
tym urządzeniu&amp;quot;, czyli telefon został zablokowany przez mechanizm Factory Reset Protection Lock (FRP
Lock). Jeśli znajomy mieszka blisko nas, to naturalnie możemy się przejść do niego w celu zdjęcia
tej blokady. A co w przypadku, gdy nabyliśmy urządzenie na odległość? Czy jest jakiś sposób na
obejście tej blokady w przypadku smartfonów Neffos od TP-LINK?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Backup partycji /data/ w smartfonach przez recovery TWRP</title>
      <link>https://morfikov.github.io/post/backup-partycji-data-w-smartfonach-przez-recovery-twrp/</link>
      <pubDate>Sun, 15 Jan 2017 18:20:11 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/backup-partycji-data-w-smartfonach-przez-recovery-twrp/</guid>
      <description>&lt;p&gt;W artykułach dotyczących przeprowadzania procesu root na smartfonach Neffos
&lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-y5-od-tp-link/&#34;&gt;Y5&lt;/a&gt; oraz
&lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-y5l-tp-link/&#34;&gt;Y5L&lt;/a&gt; był pokazany sposób na
dokonanie backup&#39;u całego flash&#39;a tych urządzeń. Jeśli Android w naszym telefonie jest ukorzeniony
albo chociaż mamy wgrany obraz TWRP na partycję &lt;code&gt;/recovery/&lt;/code&gt; , to jesteśmy w stanie przeprowadzać
regularny backup wszystkich danych użytkownika z poziomu trybu recovery. Proces takiego backup&#39;u
będzie się nieco różnił w stosunku do tego opisywanego w wyżej podlinkowanych artykułach. W tym
przypadku nie będziemy robić kopii binarnej, a jedynie zgramy sobie wszystkie pliki znajdujące się
na partycji &lt;code&gt;/data/&lt;/code&gt; . W tym artykule zostanie pokazany sposób na przeprowadzanie procesu kopii
zapasowej w smartfonie Neffos Y5. Niemniej jednak, taki regularny backup można przeprowadzać
praktycznie w każdym smartfonie posiadającym recovery z TWRP.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak przeprowadzić unroot na smartfonie Neffos Y5L od TP-LINK</title>
      <link>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-y5l-tp-link/</link>
      <pubDate>Thu, 12 Jan 2017 20:07:33 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-y5l-tp-link/</guid>
      <description>&lt;p&gt;Przeprowadzenie &lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-y5l-tp-link/&#34;&gt;procesu root na smartfonie Neffos
Y5L&lt;/a&gt; od TP-LINK nie było tak
łatwe jak w przypadku innych modeli telefonów tego producenta. Niemniej jednak, trzeba zdawać sobie
sprawę, że ukorzenianie Androida niesie za sobą pewne zagrożenia. Nie chodzi tutaj tylko o
niezaufane aplikacje ale też trzeba brać pod uwagę możliwość przypadkowego (przypadki nie istnieją)
skasowania czy zmienienia plików systemowych, przez co nasz telefon może przestać nam działać
poprawnie lub też przestanie się w ogóle uruchamiać. Jeśli natomiast wgraliśmy SuperSU i praktycznie
w ogóle z niego nie korzystamy, to moim zdaniem lepiej jest przeprowadzić proces unroot i korzystać
z Neffos&#39;a Y5L, tak jak ze zwykłego urządzenia z Androidem na pokładzie. Proces cofania zmian w
systemie nie jest jakoś specjalnie trudny ale trzeba uważać, by w jego trakcie nie uszkodzić
smartfona. Ten artykuł ma na celu pokazanie jak cofnąć wszelkie zmiany wprowadzone w telefonie za
sprawą dostępu do praw administracyjnych w Neffos Y5L.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Android: Root smartfona Neffos Y5L od TP-LINK</title>
      <link>https://morfikov.github.io/post/android-root-smartfona-neffos-y5l-tp-link/</link>
      <pubDate>Wed, 11 Jan 2017 19:30:26 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-root-smartfona-neffos-y5l-tp-link/</guid>
      <description>&lt;p&gt;Może i ten najtańszy smartfon w ofercie TP-LINK nie może popisać się najmocniejszymi podzespołami
ale w zasadzie ten fakt nie przeszkadza nam, by przeprowadzić na Neffos Y5L (TP801A) proces root.
Ten smartfon ma zbliżony SoC do Neffos Y5, a konkretnie mamy tutaj do czynienia z Snapdragon 210
(MSM8209) od Qualcomm&#39;a. Ten fakt sprawia, że w przypadku Neffos Y5L cały proces uzyskiwania
uprawnień administratora systemu przebiega bardzo podobnie do tego &lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-y5-od-tp-link/&#34;&gt;opisywanego wcześniej dla Neffos
Y5&lt;/a&gt;. Dlatego też poniższy
artykuł za bardzo się nie różni i w zasadzie został jedynie lekko przerobiony pod kątem zgodności ze
smartfonem Neffos Y5L.&lt;/p&gt;
&lt;p&gt;Prostszy sposób na przeprowadzanie procesu root w smartfonach Neffos od TP-LINK z wykorzystaniem
natywnych obrazów TWRP &lt;a href=&#34;https://morfikov.github.io
/post/root-w-smartfonach-neffos-od-tp-link-x1-c5-c5-max-y5-y5l/&#34;&gt;został opisany w nowym wątku&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Root Integrity Check w smartfonach z Androidem</title>
      <link>https://morfikov.github.io/post/root-integrity-check-w-smartfonach-z-androidem/</link>
      <pubDate>Tue, 10 Jan 2017 18:24:47 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/root-integrity-check-w-smartfonach-z-androidem/</guid>
      <description>&lt;p&gt;W smartfonach Neffos od TP-LINK, którymi mam możliwość się bawić, standardowo jest dostępny tryb
recovery, a telefon można uruchomić w tym trybie przez przyciśnięcie przycisków VolumeUP + Power. W
zasadzie jest to jeden z podstawowych trybów pracy smartfona, który może nam pomóc, gdy mamy
problemy z uruchomieniem urządzenia. Zwykle w trybie recovery przeprowadza się takie czynności jak
czyszczenie partycji &lt;code&gt;/cache/&lt;/code&gt; i &lt;code&gt;/data/&lt;/code&gt; (Factory Reset). Z poziomu trybu recovery jesteśmy także w
stanie przeprowadzić aktualizację firmware (tego oprogramowania, które zarządza naszym telefonem). W
tym artykule jednak nie będziemy dokonywać żadnych z tych powyżej opisanych czynności. W menu trybu
recovery jest jeszcze jedna ciekawa opcja, tj. Root Integrity Check. Do czego ona służy i jak
interpretować wynik skanowania?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak przeprowadzić unroot na smartfonie Neffos Y5 od TP-LINK</title>
      <link>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-y5-od-tp-link/</link>
      <pubDate>Sat, 07 Jan 2017 18:56:00 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-przeprowadzic-unroot-na-smartfonie-neffos-y5-od-tp-link/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-y5-od-tp-link/&#34;&gt;Przeprowadzenie procesu root na smartfonie Neffos
Y5&lt;/a&gt; od TP-LINK nie było tak
łatwe jak w przypadku innych modeli telefonów tego producenta. Niemniej jednak, trzeba zdawać sobie
sprawę, że ukorzenianie Androida niesie za sobą pewne zagrożenia. Nie chodzi tutaj tylko o
niezaufane aplikacje ale też trzeba brać pod uwagę możliwość przypadkowego (przypadki nie istnieją)
skasowania czy zmienienia plików systemowych, przez co nasz telefon może przestać nam działać
poprawnie lub też przestanie się w ogóle uruchamiać. Jeśli natomiast wgraliśmy SuperSU i praktycznie
w ogóle z niego nie korzystamy, to moim zdaniem lepiej jest przeprowadzić proces unroot i korzystać
z Neffos&#39;a Y5, tak jak ze zwykłego urządzenia z Androidem na pokładzie. Proces cofania zmian w
systemie nie jest jakoś specjalnie trudny ale trzeba uważać, by w jego trakcie nie uszkodzić
smartfona. Ten artykuł ma na celu pokazanie jak cofnąć wszelkie zmiany wprowadzone w telefonie za
sprawą dostępu do praw administracyjnych w Neffos Y5.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Android: Root smartfona Neffos Y5 od TP-LINK</title>
      <link>https://morfikov.github.io/post/android-root-smartfona-neffos-y5-od-tp-link/</link>
      <pubDate>Fri, 06 Jan 2017 18:16:17 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-root-smartfona-neffos-y5-od-tp-link/</guid>
      <description>&lt;p&gt;Nie we wszystkich smartfonach Neffos da radę przeprowadzić proces root tak łatwo jak to miało
miejsce w przypadku modeli &lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-c5-od-tp-link/&#34;&gt;Neffos
C5&lt;/a&gt; i &lt;a href=&#34;https://morfikov.github.io
/post/android-root-smartfona-neffos-c5-max-od-tp-link/&#34;&gt;Neffos C5
MAX&lt;/a&gt;. TP-LINK ma w swojej
ofercie również &lt;a href=&#34;http://www.neffos.pl/product/details/Y5&#34;&gt;model Neffos Y5&lt;/a&gt; (TP802A) i on w
odróżnieniu do tych dwóch poprzednich ma inne podzespoły, a konkretnie SoC, którzy pochodzi od
producenta Qualcomm (Snapdragon 210, model MSM8909). Root smartfonów opartych o tego typu SoC
przebiega nieco inaczej ale jest generalnie do zrobienia, choć trzeba trochę się przyłożyć do
procesu backup&#39;u flash&#39;a telefonu. Pozostała część jest w miarę standardowa. W tym wpisie zostanie
przeprowadzony proces root smartfona Neffos Y5.&lt;/p&gt;
&lt;p&gt;Prostszy sposób na przeprowadzanie procesu root w smartfonach Neffos od TP-LINK z wykorzystaniem
natywnych obrazów TWRP &lt;a href=&#34;https://morfikov.github.io
/post/root-w-smartfonach-neffos-od-tp-link-x1-c5-c5-max-y5-y5l/&#34;&gt;został opisany w nowym wątku&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Android: Formatowanie karty SD jako pamięć wewnętrzna</title>
      <link>https://morfikov.github.io/post/android-formatowanie-karty-sd-jako-pamiec-wewnetrzna/</link>
      <pubDate>Sun, 04 Dec 2016 19:18:40 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/android-formatowanie-karty-sd-jako-pamiec-wewnetrzna/</guid>
      <description>&lt;p&gt;Jakiś czas temu bawiąc się jednym z TP-LINK&#39;owch smartfonów, konkretnie to był &lt;a href=&#34;http://www.neffos.pl/product/details/C5&#34;&gt;model Neffos
C5&lt;/a&gt;, nie byłem zbytnio zadowolony z faktu, że karta SD w
takim telefonie może być sformatowana jedynie systemem plików z rodziny FAT. Takie rozwiązanie
niesie ze sobą pewne niedogodności, bo &lt;a href=&#34;https://pl.wikipedia.org/wiki/FAT32&#34;&gt;system plików FAT ma dość spore
ograniczenia&lt;/a&gt; jeśli chodzi o przechowywanie informacji.
Niekoniecznie wszyscy musimy wgrywać na smartfona bardzo duże pliki czy też trzymać ich tam setki
GiB, bo to jest raczej rzadkością, ale brak wsparcia uprawnień do plików i katalogów w systemie
plików FAT powoduje, że aplikacje w Androidzie nie chcą zapisywać swoich danych na karcie SD, która
taki system plików wykorzystuje. W efekcie trzeba kombinować, by &lt;a href=&#34;https://morfikov.github.io
/post/android-brak-mozliwosci-zapisu-danych-na-karcie-sd-neffos-c5/&#34;&gt;aplikacja kamery/aparatu
zapisywała zdjęcia czy materiał video na karcie
SD&lt;/a&gt;. Na
smartfonach TP-LINK&#39;a, które mają zainstalowany Android 6.0 Marshmallow, np.
&lt;a href=&#34;http://www.neffos.pl/product/details/Y5L&#34;&gt;Y5&lt;/a&gt; czy &lt;a href=&#34;http://www.neffos.pl/product/details/Y5L&#34;&gt;Y5L&lt;/a&gt;),
jesteśmy w stanie sformatować karty SD jako pamięć wewnętrzna za sprawą wprowadzonego w tej wersji
Androida &lt;a href=&#34;https://source.android.com/devices/storage/adoptable&#34;&gt;mechanizmu Adoptable Storage&lt;/a&gt;.
Postanowiłem zatem sprawdzić jak taki proces formatowania karty SD przebiega i co dokładnie może nam
przynieść jego przeprowadzenie.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
