<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gpg on Morfitronik</title>
    <link>https://morfikov.github.io/tags/gpg/</link>
    <description>Recent content in gpg on Morfitronik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language>
    <lastBuildDate>Sun, 03 Jul 2016 15:30:22 +0000</lastBuildDate><atom:link href="https://morfikov.github.io/tags/gpg/feed.xml" rel="self" type="application/rss" />
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Implementacja kluczy GPG na github&#39;ie</title>
      <link>https://morfikov.github.io/post/implementacja-kluczy-gpg-githubie/</link>
      <pubDate>Sun, 03 Jul 2016 15:30:22 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/implementacja-kluczy-gpg-githubie/</guid>
      <description>&lt;p&gt;Github to serwis, w którym użytkownicy mogą pracować wspólnie nad różnymi projektami utrzymywanymi w
systemie kontroli wersji GIT. Konto w w/w serwisie może być łakomym kąskiem dla przestępców,
zwłaszcza gdy uczestniczymy w dość rozbudowanych projektach i przyczyniamy się do ich tworzenia w
dużym stopniu. Z tego powodu github implementuje rozwiązania, które mają na celu poprawić
bezpieczeństwo naszej pracy. Mamy już uwierzytelnianie dwuetapowe, &lt;a href=&#34;https://morfikov.github.io
/post/github-z-obsluga-kluczy-ssh/&#34;&gt;obsługę kluczy
SSH&lt;/a&gt; ale nadal brakowało odpornego systemu,
który by uwierzytelnił osoby współdziałające z nami. Chodzi o to, że wszelkie zmiany w repozytorium
GIT muszą być przez kogoś poczynione. Każdy commit ma zatem swojego właściciela ale my nigdy nie
mamy pewności co do tego, kto tak naprawdę tej zmiany dokonał. Dlatego też &lt;a href=&#34;https://github.com/blog/2144-gpg-signature-verification&#34;&gt;github umożliwił
ostatnio podpisywanie tagów i commit&#39;ów przy pomocy kluczy
GPG&lt;/a&gt;. To właśnie temu tematowi będzie
poświęcony niniejszy wpis.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Manualna weryfikacja pakietu deb w debianie</title>
      <link>https://morfikov.github.io/post/manualna-weryfikacja-pakietu-deb-w-debianie/</link>
      <pubDate>Mon, 02 Nov 2015 00:16:03 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/manualna-weryfikacja-pakietu-deb-w-debianie/</guid>
      <description>&lt;p&gt;W dobie całego tego świata informatycznego zwykliśmy polegać na osobach, których nigdy w życiu na
oczy nie wiedzieliśmy, nie wspominając o jakimkolwiek kontakcie fizycznym. Zaufanie to obecnie chyba
najbardziej krytyczna luka bezpieczeństwa jeśli chodzi o oprogramowanie, z którego korzystamy na co
dzień. My, którzy używamy debiana w swojej pracy, polegamy na mechanizmach jakie oferuje nam &lt;code&gt;apt&lt;/code&gt;
czy &lt;code&gt;aptitude&lt;/code&gt; przy &lt;a href=&#34;https://wiki.debian.org/SecureApt&#34;&gt;weryfikacji pakietów przed ich instalacją&lt;/a&gt; w
systemie. Co się jednak by stało gdyby w tych menadżerach pojawił się błąd, który by uniemożliwiał
poprawną weryfikację pakietów? Skąd wiemy czy te mechanizmy zabezpieczające w ogóle działają? Może
one nam dają jedynie fałszywe poczucie bezpieczeństwa, a tak naprawdę przez niczym nas nie chronią?
W tym wpisie postaramy się odpowiedzieć na te powyższe pytania i sprawdzimy czy manualna weryfikacja
pakietu jest w ogóle możliwa&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Klucze do repozytoriów debiana (trusted.gpg)</title>
      <link>https://morfikov.github.io/post/klucze-do-repozytoriow-debiana-trusted-gpg/</link>
      <pubDate>Sun, 01 Nov 2015 19:14:55 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/klucze-do-repozytoriow-debiana-trusted-gpg/</guid>
      <description>&lt;p&gt;Obecnie systemy operacyjne stają się nieco bardziej stabilne i czasy, w których reinstalacja
takiego systemu, czy też nawet format dysku, odchodzą powoli w niebyt. &lt;a href=&#34;https://morfikov.github.io
/post/dokladna-data-instalacji-systemu-linux/&#34;&gt;Data instalacji mojego
linux&#39;a&lt;/a&gt; wskazuje na prawie 2 lata wstecz. Jakby nie patrzeć jest to szmat czasu, w czasie
którego przez mojego Debiana przetoczyła się ogromna ilość oprogramowania. Nie zawsze były to
pakiety, które pochodziły z głównych repozytoriów tej dystrybucji. Niemniej jednak, każde
repozytorium z pakietami jest podpisane i by móc z nich bezpiecznie korzystać, trzeba pozyskać
&lt;a href=&#34;https://pl.wikipedia.org/wiki/GNU_Privacy_Guard&#34;&gt;klucz GPG&lt;/a&gt; i dokonać jego weryfikacji. Prędzej czy później przyjdzie czas, gdy takie klucze GPG
przestaną być ważne lub też zmianie ulegną źródła pakietów. W ten sposób baza danych kluczy
zawierać będzie szereg zbędnych pozycji. Może wielu ludziom nie przeszkadza ten fakt ale raz na
jakiś czas przydałoby się oczyścić keyring ze śmieci, które są już nam do niczego niepotrzebne.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Konfiguracja GPG w pliku gpg.conf</title>
      <link>https://morfikov.github.io/post/konfiguracja-gpg-w-pliku-gpg-conf/</link>
      <pubDate>Sun, 14 Jun 2015 23:19:51 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-gpg-w-pliku-gpg-conf/</guid>
      <description>&lt;p&gt;Narzędzie &lt;code&gt;gpg&lt;/code&gt; posiada swój własny plik konfiguracyjnych, który zwykle jest zlokalizowany w
&lt;code&gt;~/.gnupg/gpg.conf&lt;/code&gt; . Można w nim sprecyzować większość z opcji, które zwykle są podawane w
terminalu przy wywoływaniu polecenia &lt;code&gt;gpg&lt;/code&gt; . Po zdefiniowaniu odpowiednich wpisów w pliku
konfiguracyjnym, nie będziemy musieli już wyraźnie podawać tych parametrów ilekroć będziemy chcieli
skorzystać z &lt;code&gt;gpg&lt;/code&gt; . Przy okazji szukania info o kluczach GPG, natknąłem się na dość ciekawy
&lt;a href=&#34;https://riseup.net/security/message-security/openpgp/best-practices&#34;&gt;artykuł na temat GnuPG&lt;/a&gt;. Jest
tam sporo informacji, które są wielce użyteczne w procesie konfiguracji tego narzędzia poprawiając
tym samym dość znacznie bezpieczeństwo komunikacji.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Bezpieczny klucz GPG</title>
      <link>https://morfikov.github.io/post/bezpieczny-klucz-gpg/</link>
      <pubDate>Sun, 14 Jun 2015 11:55:26 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/bezpieczny-klucz-gpg/</guid>
      <description>&lt;p&gt;W poprzednim wpisie przygotowywaliśmy sobie &lt;a href=&#34;https://morfikov.github.io
/post/konfiguracja-gpg-w-pliku-gpg-conf/&#34;&gt;plik
gpg.conf&lt;/a&gt;. Opcje w nim ustawione są
niezbędne do wygenerowania dobrego pod względem bezpieczeństwa klucza GPG. Taki klucz GPG nie
powinien być krótszy niż 4096 bitów. Dodatkowo, nie powinno się ustawiać daty ważności dłuższej niż
2 lata, a to z tego powodu, że zawszę tę datę można zmienić i to nawet w przypadku gdy klucz straci
ważność. Chodzi generalnie o ustawienie jakiegoś mechanizmu zabezpieczającego na wypadek gdyby nasz
klucz GPG wpadł w niepowołane ręce i stracilibyśmy nad nim panowanie. Wtedy po jakimś czasie
automatycznie się on unieważni i nie będziemy musieli się martwić czy ktoś może przez przypadek go
używać. Jest również szereg innych rzecz, o które powinniśmy się zatroszczyć i tej tematyce będzie
poświęcony ten wpis, który w dużej mierze powstał w oparciu o te
&lt;a href=&#34;https://www.gnupg.org/gph/en/manual/book1.html&#34;&gt;dwa&lt;/a&gt;
&lt;a href=&#34;https://riseup.net/security/message-security/openpgp/best-practices&#34;&gt;linki&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Implementacja kluczy GPG w repozytorium GIT</title>
      <link>https://morfikov.github.io/post/implementacja-kluczy-gpg-repozytorium-git/</link>
      <pubDate>Sun, 17 May 2015 21:11:41 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/implementacja-kluczy-gpg-repozytorium-git/</guid>
      <description>&lt;p&gt;W tym artykule zostanie przedstawiony sposób na wykorzystanie kluczy GPG w przypadku
przeprowadzanych działań w repozytorium GIT. Będziemy w ten sposób w stanie podpisać swoje commit&#39;y
czy tagi, by było wiadomo, że zmiany, które zostały poczynione pochodzą naprawdę od konkretnego
użytkownika. Oczywiście to może się wydać przesadą dla wielu ludzi ale skoro mamy udostępnioną
możliwość wykorzystania kluczy GPG, to czemu z tej opcji nie skorzystać? Potrzebne będą nam tylko
&lt;a href=&#34;https://morfikov.github.io
/post/bezpieczny-klucz-gpg/&#34;&gt;klucze GPG&lt;/a&gt;. Sposób ich tworzenia jak i &lt;a href=&#34;https://morfikov.github.io
/post/konfiguracja-gpg-w-pliku-gpg-conf/&#34;&gt;konfiguracja
zdefiniowana w pliku gpg.conf&lt;/a&gt; nie
zostaną tutaj opisane. Zamiast tego skupimy się jedynie na implementacji samych kluczy GPG.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
