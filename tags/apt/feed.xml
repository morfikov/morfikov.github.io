<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>apt on Morfitronik</title>
    <link>https://morfikov.github.io/tags/apt/</link>
    <description>Recent content in apt on Morfitronik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language>
    <lastBuildDate>Sun, 14 Apr 2019 00:10:11 +0000</lastBuildDate><atom:link href="https://morfikov.github.io/tags/apt/feed.xml" rel="self" type="application/rss" />
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Mechanizm trigger&#39;ów dla apt/aptitude w Debianie</title>
      <link>https://morfikov.github.io/post/mechanizm-trigger-dla-apt-aptitude-w-debianie/</link>
      <pubDate>Sun, 14 Apr 2019 00:10:11 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/mechanizm-trigger-dla-apt-aptitude-w-debianie/</guid>
      <description>&lt;p&gt;Czasami pewna niestandardowa konfiguracja naszego linux&#39;a może sprawiać pewne problemy podczas
aktualizacji zainstalowanych w nim pakietów. Dla przykładu, wykorzystując mechanizm AppArmor do
okrojenia profilów Firefox&#39;a, muszę tworzyć osobne twarde dowiązania do binarki tej przeglądarki.
Te dowiązania mają taki problem, że jak usunie się plik, na który wskazywały, np. podczas
aktualizacji paczki, to utworzenie pliku w tym samym miejscu przez menadżer pakietów
&lt;code&gt;apt&lt;/code&gt;/&lt;code&gt;aptitude&lt;/code&gt; nie sprawi, że te dowiązania zaczną ponownie funkcjonować poprawnie (tak jak to
jest w przypadku dowiązań symbolicznych). Z początku usuwałem te stare dowiązania i tworzyłem nowe
ale postanowiłem w końcu &lt;a href=&#34;https://forum.dug.net.pl/viewtopic.php?id=30382&#34;&gt;poszukać rozwiązania&lt;/a&gt;,
które by zautomatyzowało cały ten proces i uczyniło go transparentnym dla użytkownika końcowego.
Tak natrafiłem na mechanizm Debianowych
trigger&#39;ów (&lt;a href=&#34;https://manpages.debian.org/unstable/dpkg-dev/deb-triggers.5.en.html&#34;&gt;deb-trigger&lt;/a&gt;),
które aktywują się za każdym razem ilekroć pliki w konkretnych ścieżkach są ruszane w jakiś sposób
przez menadżer pakietów. W tym artykule spróbujemy sobie zaprojektować taki trigger i obadać czy
może on nam się w ogóle do czegoś przydać&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Debian: Bezpieczne pobieranie aktualizacji (apt-transport-https)</title>
      <link>https://morfikov.github.io/post/debian-bezpieczne-pobieranie-aktualizacji-apt-transport-https/</link>
      <pubDate>Tue, 09 Aug 2016 16:04:54 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/debian-bezpieczne-pobieranie-aktualizacji-apt-transport-https/</guid>
      <description>&lt;p&gt;Posiadanie aktualnego systemu za sprawą regularnych aktualizacji może znacząco przyczynić się do
poprawy bezpieczeństwa naszego linux&#39;a. Niemniej jednak, niezabezpieczony proces aktualizacji może
zdradzić pewne informacje, które mogą się okazać przydatne dla potencjalnego atakującego. Dlatego
też menadżer pakietów &lt;code&gt;apt&lt;/code&gt;/&lt;code&gt;aptitude&lt;/code&gt; w Debianie wyposażony jest w dodatkowe transporty
umożliwiające komunikację z serwerem repozytorium w oparciu o różne protokoły. Standardowy
protokół, którym posługują się maszyny mające na pokładzie dystrybucję Debian, to HTTP
(ewentualnie FTP). Oba z nich ślą wszelkie informacje w postaci czystego tekstu, który nadaje się do
analizy przez człowieka. Możemy jednak skorzystać z protokołu SSL/TLS i zaszyfrować proces
pobierania aktualizacji za sprawą pakietu &lt;code&gt;apt-transport-https&lt;/code&gt; .&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak wybrać optymalny mirror repozytorium Debiana</title>
      <link>https://morfikov.github.io/post/jak-wybrac-optymalny-mirror-repozytorium-debiana/</link>
      <pubDate>Sun, 07 Aug 2016 15:15:20 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-wybrac-optymalny-mirror-repozytorium-debiana/</guid>
      <description>&lt;p&gt;Debian to dość stara i rozbudowana dystrybucja linux&#39;a, którą można spotkać praktycznie w każdym
zakątku naszego globu. Dziesiątki tysięcy pakietów dostępne w oficjalnych repozytoriach tylko
czekają aż je pobierzemy i zainstalujemy w swoim systemie. Problem zaczyna się jednak w momencie,
gdy wielu użytkowników w tym samym czasie zaczyna pobierać pakiety i to z tego samego serwera. Wtedy
aktualizacja Debiana może trwać dłużej niż zazwyczaj. By zaadresować ten problem, developerzy tej
dystrybucji stawiają serwery lustrzane (mirror) w różnych częściach świata i rozładowują w ten
sposób ruch, który by powędrował do głównego serwera. Spora część krajów ma kilka własnych
mirror&#39;ów ale ich jakość może czasami zostawić wiele do życzenia. Co w przypadku, gdy taki mirror,
z którego my korzystamy, ulegnie awarii? Trzeba będzie poddać edycji plik &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; i
zmienić adres repozytorium przez dostosowanie w nim części odpowiedzialnej za lokalizację, np.
&lt;code&gt;ftp.pl&lt;/code&gt; czy &lt;code&gt;ftp.us&lt;/code&gt; . Istnieje jednak sposób, który dostosuje lokalizację serwera lustrzanego
automatycznie, a my już nie będziemy musieli sobie głowy zawracać edycją wspomnianego wyżej pliku.&lt;/p&gt;
&lt;p&gt;Projekt, o którym traktuje poniższy wpis, nie jest już rozwijany przez Debiana. Więcej info
&lt;a href=&#34;https://wiki.debian.org/DebianGeoMirror&#34;&gt;tutaj&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Debian: Anonimowe pobieranie aktualizacji (apt-transport-tor)</title>
      <link>https://morfikov.github.io/post/debian-anonimowe-pobieranie-aktualizacji-apt-transport-tor/</link>
      <pubDate>Sun, 07 Aug 2016 13:06:03 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/debian-anonimowe-pobieranie-aktualizacji-apt-transport-tor/</guid>
      <description>&lt;p&gt;Dystrybucja linux&#39;a Debian oferuje możliwość pobierania pakietów &lt;code&gt;.deb&lt;/code&gt; za pomocą sieci TOR. W ten
sposób jesteśmy w stanie ukryć nieco informacji na temat zainstalowanego w naszym systemie
oprogramowania. Jakby nie patrzeć, aplikacje mają pełno dziur i nie wszystkie z tych programików są
łatane natychmiast po opublikowaniu podatności. Z chwilą dokonywania aktualizacji systemu,
potencjalny atakujący może dowiedzieć się zatem z jakich programów korzystamy, wliczając w to ich
wersje. Znając te dane, można ocenić czy system posiada jakieś błędy. By zaimplementować w
menadżerze pakietów &lt;code&gt;apt&lt;/code&gt;/&lt;code&gt;aptitude&lt;/code&gt; możliwość korzystania z &lt;a href=&#34;https://www.torproject.org/&#34;&gt;sieci
TOR&lt;/a&gt;, musimy posiadać w systemie skonfigurowanego klienta TOR oraz
zainstalować pakiet &lt;code&gt;apt-transport-tor&lt;/code&gt; . W tym artykule postaramy się skonfigurować ten cały
mechanizm TOR&#39;owych aktualizacji.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Migawka (snapshot) repozytorium debiana</title>
      <link>https://morfikov.github.io/post/migawka-snapshot-repozytorium-debiana/</link>
      <pubDate>Wed, 04 Nov 2015 18:23:36 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/migawka-snapshot-repozytorium-debiana/</guid>
      <description>&lt;p&gt;Aktualizacje systemu niosą ze sobą nowsze wersje pakietów. Czasami mają one błędy, które wychodzą na
jaw po jakimś czasie korzystania z danej aplikacji. W takiej sytuacji zwykle zachodzi potrzeba
cofnięcia wersji kilku pakietów. Jest jednak wielce prawdopodobne, że akurat tej wersji pakietu,
której potrzebujemy, nie znajdziemy z repozytorium debiana. Pobieranie pojedynczych pakietów z
internetu przez klikanie w pierwszy lepszy link, który zostanie nam zwrócony przez wyszukiwarkę, nie
jest dobrym pomysłem. Na szczęście w przypadku debiana nie musimy się aż tak narażać. A to z tego
względu, że &lt;a href=&#34;http://snapshot.debian.org/archive/debian/&#34;&gt;debian robi migawki (shapshots) swoich
repozytoriów&lt;/a&gt; 4 razy dziennie (co 6 godzin). W ten
sposób mamy dostęp do różnych stanów repozytoriów, w tym też tych, które zawierają pakiety
aktualnie niedostępne w repozytoriach. W tym wpisie postaramy się pobrać i zainstalować
nieistniejące pakiety z takich snapshot&#39;ów.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Konfiguracja multiarch w dystrybucji Debian</title>
      <link>https://morfikov.github.io/post/konfiguracja-multiarch-na-debianie/</link>
      <pubDate>Mon, 02 Nov 2015 20:20:09 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-multiarch-na-debianie/</guid>
      <description>&lt;p&gt;Posiadając nowszej klasy procesor, jesteśmy w stanie korzystać z 64 bitowego systemu operacyjnego. W
przypadku windowsów uruchamianie aplikacji 32 czy 64 bitowych nie stanowi większego problemu. W na
debianie sprawa wygląda nieco inaczej. Gdy mamy wgranego 64 bitowego debiana, aplikacje 32 bitowe
nie będą chciały się nam odpalić. Wszystkiemu winne są biblioteki 32 bitowe, które są wykorzystywane
przez dany program, a bez nich on zwyczajnie nie może działać. Jednym z rozwiązań tego problemu może
być &lt;a href=&#34;https://morfikov.github.io/post/konfiguracja-kontenerow-lxc/&#34;&gt;kontener LXC&lt;/a&gt;, gdzie jesteśmy w stanie
zainstalować 32 bitowy system wewnątrz środowiska 64 bitowego i to z tego systemu możemy uruchamiać
32 bitowe aplikacje. Skonfigurowanie takiego kontenera może być nieco skomplikowane, dlatego też
dużo lepszym rozwiązaniem jest przerobienie naszego 64 bitowego systemu na
&lt;a href=&#34;https://wiki.debian.org/Multiarch&#34;&gt;muliarch&lt;/a&gt;, czyli taki, który jest w stanie obsługiwać wiele
architektur (multiarch).&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Manualna weryfikacja pakietu deb w debianie</title>
      <link>https://morfikov.github.io/post/manualna-weryfikacja-pakietu-deb-w-debianie/</link>
      <pubDate>Mon, 02 Nov 2015 00:16:03 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/manualna-weryfikacja-pakietu-deb-w-debianie/</guid>
      <description>&lt;p&gt;W dobie całego tego świata informatycznego zwykliśmy polegać na osobach, których nigdy w życiu na
oczy nie wiedzieliśmy, nie wspominając o jakimkolwiek kontakcie fizycznym. Zaufanie to obecnie chyba
najbardziej krytyczna luka bezpieczeństwa jeśli chodzi o oprogramowanie, z którego korzystamy na co
dzień. My, którzy używamy debiana w swojej pracy, polegamy na mechanizmach jakie oferuje nam &lt;code&gt;apt&lt;/code&gt;
czy &lt;code&gt;aptitude&lt;/code&gt; przy &lt;a href=&#34;https://wiki.debian.org/SecureApt&#34;&gt;weryfikacji pakietów przed ich instalacją&lt;/a&gt; w
systemie. Co się jednak by stało gdyby w tych menadżerach pojawił się błąd, który by uniemożliwiał
poprawną weryfikację pakietów? Skąd wiemy czy te mechanizmy zabezpieczające w ogóle działają? Może
one nam dają jedynie fałszywe poczucie bezpieczeństwa, a tak naprawdę przez niczym nas nie chronią?
W tym wpisie postaramy się odpowiedzieć na te powyższe pytania i sprawdzimy czy manualna weryfikacja
pakietu jest w ogóle możliwa&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Klucze do repozytoriów debiana (trusted.gpg)</title>
      <link>https://morfikov.github.io/post/klucze-do-repozytoriow-debiana-trusted-gpg/</link>
      <pubDate>Sun, 01 Nov 2015 19:14:55 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/klucze-do-repozytoriow-debiana-trusted-gpg/</guid>
      <description>&lt;p&gt;Obecnie systemy operacyjne stają się nieco bardziej stabilne i czasy, w których reinstalacja
takiego systemu, czy też nawet format dysku, odchodzą powoli w niebyt. &lt;a href=&#34;https://morfikov.github.io/post/dokladna-data-instalacji-systemu-linux/&#34;&gt;Data instalacji mojego
linux&#39;a&lt;/a&gt; wskazuje na prawie 2 lata wstecz. Jakby nie patrzeć jest to szmat czasu, w czasie
którego przez mojego Debiana przetoczyła się ogromna ilość oprogramowania. Nie zawsze były to
pakiety, które pochodziły z głównych repozytoriów tej dystrybucji. Niemniej jednak, każde
repozytorium z pakietami jest podpisane i by móc z nich bezpiecznie korzystać, trzeba pozyskać
&lt;a href=&#34;https://pl.wikipedia.org/wiki/GNU_Privacy_Guard&#34;&gt;klucz GPG&lt;/a&gt; i dokonać jego weryfikacji. Prędzej czy później przyjdzie czas, gdy takie klucze GPG
przestaną być ważne lub też zmianie ulegną źródła pakietów. W ten sposób baza danych kluczy
zawierać będzie szereg zbędnych pozycji. Może wielu ludziom nie przeszkadza ten fakt ale raz na
jakiś czas przydałoby się oczyścić keyring ze śmieci, które są już nam do niczego niepotrzebne.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Pobieranie pakietów przy pomocy cron-apt</title>
      <link>https://morfikov.github.io/post/pobieranie-pakietow-przy-pomocy-cron-apt/</link>
      <pubDate>Fri, 23 Oct 2015 14:42:17 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/pobieranie-pakietow-przy-pomocy-cron-apt/</guid>
      <description>&lt;p&gt;Jakiś czas temu opisywałem konfigurację dla menadżera pakietów &lt;code&gt;apt&lt;/code&gt; i &lt;code&gt;aptitude&lt;/code&gt; &lt;a href=&#34;https://morfikov.github.io/post/konfiguracja-apt-i-aptitude-w-pliku-apt-conf/&#34;&gt;w pliku
apt.conf&lt;/a&gt; . Ten wpis również
tyczy się konfiguracji wspomnianych menadżerów, z tym, że zostanie tutaj opisana pewna
funkcjonalność, która może nam zaoszczędzić trochę czasu przy aktualizacji systemu. Chodzi o to,
że pakiety praktycznie zawsze muszą być pobrane na dysk przed ich instalacją. Gdy nie dysponujemy
dobrym pod względem przepustowości łączem, proces pobierania pakietów jest zwykle dłuższy niż sama
ich instalacja. Przydałoby się zatem zaprogramować pobieranie plików w tle, tak by nie musieć ich
pobierać tuż przez przed procesem instalacyjnym.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Konfiguracja apt i aptitude w pliku apt.conf</title>
      <link>https://morfikov.github.io/post/konfiguracja-apt-i-aptitude-w-pliku-apt-conf/</link>
      <pubDate>Sun, 18 Oct 2015 20:04:30 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-apt-i-aptitude-w-pliku-apt-conf/</guid>
      <description>&lt;p&gt;Praktycznie każdy z nas korzysta z menadżera pakietów &lt;code&gt;apt&lt;/code&gt; lub też jego nakładki &lt;code&gt;aptitude&lt;/code&gt; .
Operowanie na debianie bez tych narzędzi raczej by nam nieco utrudniło życie. Sporo osób ogranicza
się jedynie do podstawowych poleceń, typu &lt;code&gt;update&lt;/code&gt; , &lt;code&gt;upgrade&lt;/code&gt; czy &lt;code&gt;dist-upgrade&lt;/code&gt; , pomijając przy
tym całą konfigurację w/w narzędzi. W tym wpisie zostanie zaprezentowanych szereg opcji, które można
zdefiniować na stałe w pliku konfiguracyjnym &lt;code&gt;/etc/apt/apt.conf&lt;/code&gt; , tak by nie trzeba było ich ciągle
wpisywać w terminalu ilekroć tylko korzystamy któregoś menadżera pakietów.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Usuwanie środowiska graficznego</title>
      <link>https://morfikov.github.io/post/usuwanie-srodowiska-graficznego/</link>
      <pubDate>Sun, 18 Oct 2015 17:52:42 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/usuwanie-srodowiska-graficznego/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://forum.dug.net.pl/viewtopic.php?id=27813&#34;&gt;Na forum DUG&#39;a&lt;/a&gt; znów został poruszony ciekawy
wątek, tym razem odnośnie usunięcia całego środowiska graficznego z systemu. Pozornie niby nic
nadzwyczajnego, przecie każdy z nas potrafi odinstalować szereg pakietów via &lt;code&gt;apt&lt;/code&gt; czy &lt;code&gt;aptitude&lt;/code&gt; .
Problematyczne za to mogą się okazać zależne pakiety, które nie zostaną automatycznie usunięte wraz
z konkretnym metapakietem od środowiska graficznego. Jak zatem usunąć te pozostałości?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Aktualizacja systemu i logowanie komunikatów</title>
      <link>https://morfikov.github.io/post/aktualizacja-systemu-logowanie-komunikatow/</link>
      <pubDate>Thu, 08 Oct 2015 12:39:32 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/aktualizacja-systemu-logowanie-komunikatow/</guid>
      <description>&lt;p&gt;Aktualizacja systemu to chyba jedna z bardziej podstawowych czynności, które przeprowadzamy niemalże
codziennie. Tak się złożyło, że chwilę po zakończeniu tego procesu musiałem wyłączyć w pośpiechu
komputer. Nie zdążyłem przy tym przeczytać uważnie informacji, które zwrócił mi terminal. Oczywiście
mógłbym zahibernować maszynę i wrócić do logu instalacji w wolnej chwili ale nie zawsze hibernacja
jest możliwa. Poza tym, na myśl przychodzą mi osoby, które często zakładają wątki na forach o tym,
że aktualizacja uwaliła ich system. Zawsze w takiej sytuacji prosi się danego człowieka o podanie
logu z aktualizacji systemu albo przynajmniej próbuje się wyciągnąć od takiego delikwenta informację
na temat tego co było aktualizowane. W większości przypadków, taki człowiek nie ma o tym kompletnie
pojęcia, a jak już, to podaje bardzo nieprecyzyjne dane. Ten post ma na celu ułatwienie znalezienia
informacji o tym co było przedmiotem aktualizacji, tak by mieć nieco jaśniejszy obraz tego co mogło
nawalić.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Przeszukiwanie zawartości pakietów (apt-file)</title>
      <link>https://morfikov.github.io/post/przeszukiwanie-zawartosci-pakietow-apt-file/</link>
      <pubDate>Tue, 30 Jun 2015 12:03:20 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/przeszukiwanie-zawartosci-pakietow-apt-file/</guid>
      <description>&lt;p&gt;Podczas procesu kompilacji pakietów często zdarza się tak, że brakuje jakichś zależności, bez
których dany pakietów nie chce się nam zbudować. W większości przypadków, system powinien nam
podpowiedzieć jaki pakiet powinniśmy doinstalować. Nie zawsze jednak będzie to takie oczywiste i
jedyne co nam zostanie zwrócone, to ścieżka danego pliku lub tylko jego nazwa. Nawet jeśli nie
kompilujemy programów, to podczas zwykłego użytkowania komputera możemy potrzebować odnaleźć pakiet,
który zawiera pewien określony plik binarny czy konfiguracyjny. Jak zatem odnaleźć się w gąszczu
plików i katalogów by efektywnie ustalić pakiet, który zawiera interesujące nas pliki?&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
