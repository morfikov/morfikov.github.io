<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aosp on Morfitronik</title>
    <link>https://morfikov.github.io/tags/aosp/</link>
    <description>Recent content in Aosp on Morfitronik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language>
    <lastBuildDate>Sun, 29 Jan 2023 19:33:00 +0100</lastBuildDate><atom:link href="https://morfikov.github.io/tags/aosp/feed.xml" rel="self" type="application/rss+xml" />
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Martwy smartfon Xiaomi Redmi 9 i jego odzysk via SP Flash Tool</title>
      <link>https://morfikov.github.io/post/martwy-smartfon-xiaomi-redmi-9-i-jego-odzysk-via-sp-flash-tool/</link>
      <pubDate>Sun, 29 Jan 2023 19:33:00 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/martwy-smartfon-xiaomi-redmi-9-i-jego-odzysk-via-sp-flash-tool/</guid>
      <description>&lt;p&gt;Przeglądając ostatnio stronę &lt;code&gt;xiaomifirmwareupdater.com&lt;/code&gt; zauważyłem, że jest tam &lt;a href=&#34;https://xiaomifirmwareupdater.com/firmware/lancelot/&#34;&gt;dostępna nowsza
wersja firmware dla mojego telefonu Xiaomi Redmi 9&lt;/a&gt; (lancelot/galahad). Patrząc po numerkach
&lt;code&gt;V13.0.1.0.SJCEUXM&lt;/code&gt; (nowy dla Android 12) oraz &lt;code&gt;V12.5.4.0.RJCEUXM&lt;/code&gt; (stary dla Android 11), miałem
pewne wątpliwości czy wgrać sobie ten nowszy firmware. Niby na tym smartfonie mam wgrany &lt;a href=&#34;https://crdroid.net/lava/8&#34;&gt;ROM
crDrdoid v8.9&lt;/a&gt;, który dostarcza Androida 12.1, więc &lt;a href=&#34;https://morfikov.github.io/post/jak-zaktualizowac-firmware-custom-rom-w-smartfonach-xiaomi/&#34;&gt;aktualizacja firmware sposobem opisanym
tutaj&lt;/a&gt; powinna przebiec bez żadnych problemów. No i przebiegła, tylko po zrestartowaniu telefonu,
ten już się nie uruchomił. Działał mi jedynie tryb fastboot (normalny boot i tryb recovery były
martwe). Postanowiłem przywrócić poprzedni firmware wydobywając obrazy ze starej paczki firmware i
ręcznie przy pomocy narzędzia &lt;code&gt;fastboot&lt;/code&gt; wgrać te obrazy na odpowiadające im partycje w telefonie z
poziomu mojego Debiana. Tutaj jednak zostało poczynionych parę błędów (o tym później), które
doprowadziły do całkowitego uwalenia telefonu (hard brick), gdzie nawet tryb fastboot zdechł. W
efekcie telefon już nie reagował na żadne kombinacje przycisków, a ekran pozostawał czarny -- jednym
słowem nie działał żaden tryb pracy telefonu i wyglądało na to, że mam w łapkach już tylko sam złom
elektroniczny i tak by w istocie było, gdyby z pomocą nie przyszedł mi SP Flash Tool.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak zainstalować Magisk bez dostępu do TWRP/SHRP recovery</title>
      <link>https://morfikov.github.io/post/jak-zainstalowac-magisk-bez-dostepu-do-twrp-shrp-recovery/</link>
      <pubDate>Mon, 28 Feb 2022 19:46:00 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-zainstalowac-magisk-bez-dostepu-do-twrp-shrp-recovery/</guid>
      <description>&lt;p&gt;Parę dni temu na mój telefon Xiaomi Redmi 9 (lancelot/galahad/shiva/lava) &lt;a href=&#34;https://crdroid.net/lava/8&#34;&gt;została wypuszczona
aktualizacja ROM&#39;u crDroid&lt;/a&gt;, który bazuje na AOSP/LineageOS. Ten update nie tylko miał
uwzględnione najnowsze poprawki bezpieczeństwa ale również podbijał wersję Androida z 11 na 12.
Problem w tym, że TWRP/SHRP recovery ma problemy z obsługą sposobu szyfrowania partycji &lt;code&gt;/data/&lt;/code&gt; ,
który najwyraźniej uległ przeobrażeniu w Androidzie 12. Efektem braku wsparcia dla szyfrowania w
TWRP/SHRP jest naturalnie brak możliwości wgrywania danych na partycję &lt;code&gt;/data/&lt;/code&gt; . Niestety niesie
to za sobą przykre konsekwencje w postaci uniemożliwienia użytkownikowi przeprowadzenia procesu
patch&#39;owania obrazu partycji &lt;code&gt;/boot/&lt;/code&gt; z poziomu trybu recovery, czego efektem jest brak możliwości
zainstalowania Magisk&#39;a w systemie smartfona. Bez Magisk&#39;a nie damy rady ukorzenić systemu, tj.
uzyskać w nim praw administratora root. Na szczęście nie wszystko stracone. Magisk&#39;a można
zainstalować w telefonie ręcznie przy pomocy ADB oraz trybu bootloader&#39;a (fastboot) eliminując tym
samym potrzebę przełączenia się w tryb recovery. Niniejszy artykuł ma na celu pokazanie jak
zainstalować Magisk&#39;a bez odwoływania się do trybu TWRP/SHRP recovery.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Tryb bezczynności baterii (IDLE mode) w smartfonach z Androidem</title>
      <link>https://morfikov.github.io/post/tryb-bezczynnosci-baterii-idle-mode-w-smartfonach-z-androidem/</link>
      <pubDate>Sun, 06 Feb 2022 17:52:00 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/tryb-bezczynnosci-baterii-idle-mode-w-smartfonach-z-androidem/</guid>
      <description>&lt;p&gt;Gdy zapytamy użytkowników smartfonów z Androidem o to, czy taki sprzęt jest w stanie pracować z
pominięciem układu baterii, zapewne wiele z tych osób odpowiedziałoby, że nie ma takiej opcji, bo
przecież w tych telefonach od lat baterii się już nie da wyciągnąć. Nawet w tych starszych
modelach, po wyjęciu baterii i podłączeniu ładowarki, system w takim urządzeniu nie chciał się
uruchomić. Okazuje się jednak, że nie trzeba wyjmować akumulatora ze smartfona, by to urządzenie
było w stanie działać z pominięciem układu baterii, tj. w tzw. trybie bezczynności baterii (battery
IDLE mode), coś na wzór rozwiązania stosowanego od dekad w laptopach. Niemniej jednak, takiej
funkcjonalności zwykle nie uświadczymy w stock&#39;owych Androidach. Możemy się jednak o nią postarać
ale do tego celu niezbędne będzie nam uzyskanie praw administratora systemu root, choć lepiej wgrać
sobie na smartfon ROM na bazie AOSP/LineageOS. Bez ukorzenionego Androida nie mamy nawet co
podchodzić do implementacji tego mechanizmu. Dodatkowo będzie nam potrzebny &lt;a href=&#34;https://github.com/VR-25/acc&#34;&gt;zaawansowany kontroler
ładowania baterii ACC&lt;/a&gt; (w postaci modułu do Magisk&#39;a) i opcjonalnie też &lt;a href=&#34;https://github.com/MatteCarra/AccA&#34;&gt;graficzna nakładka
ACCA&lt;/a&gt; (do pobrania z F-Droid). W poniższym artykule postaramy się odpowiedzieć na pytanie czy
takie rozwiązanie na bazie IDLE mode w przypadku baterii w smartfonach z Androidem ma w ogóle sens
i czy może nam się ewentualnie do czegoś przydać.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Nagrywanie rozmów telefonicznych w smartfonie z Androidem</title>
      <link>https://morfikov.github.io/post/nagrywanie-rozmow-telefonicznych-w-smartfonie-z-androidem/</link>
      <pubDate>Sun, 23 Jan 2022 18:11:00 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/nagrywanie-rozmow-telefonicznych-w-smartfonie-z-androidem/</guid>
      <description>&lt;p&gt;Właściciele smartfonów mają zwykle podpisane umowy ze swoimi operatorami GSM na świadczenie usług
telefonicznych. Pakiety rozmów oferowane przez tych operatorów już od dłuższego czasu są
nielimitowane, co z kolei zachęca abonentów do głosowego komunikowania się przy pomocy tych małych
lecz przy tym bardzo zaawansowanych technologicznie komputerów. Nie ma obecnie chyba sprawy, której
nie można załatwić telefonicznie, a że coraz dłużej wisimy na słuchawce, to też sporo informacji z
takich rozmów nam bezpowrotnie ucieka, np. imię i nazwisko osoby, z którą rozmawialiśmy, nie
wspominając o całej masie innych rzeczy, które mogą paść podczas choćby negocjowania/przedłużania
jakiegoś kontraktu. Gdy w późniejszym czasie zorientujemy się, że coś jest nie tak, to możemy mieć
poważny problem z udowodnieniem swoich racji, np. że zostaliśmy celowo wprowadzeni w błąd. Gdybyśmy
dysponowali nagraniem z takiej rozmowy, to bez problemu można by się do niego odnieść i nikt by nie
miał wątpliwości po czyjej stronie byłaby racja. Niemniej jednak, smartfony z Androidem mają
ogromny problem z nagrywaniem dźwięku audio podczas tego typu konwersacji, czego efektem jest brak
możliwości niezależnego rejestrowania rozmów telefonicznych. Jeśli jednak posiadamy ukorzenionego
Androida (dostęp do praw administratora root), to możemy te obostrzenia obejść zaprzęgając do pracy
aplikację Call Recorder.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Zmiana implementacji WebView z Google/AOSP na Bromite w Androidzie</title>
      <link>https://morfikov.github.io/post/zmiana-implementacji-webview-z-google-aosp-na-bromite-w-androidzie/</link>
      <pubDate>Fri, 08 Oct 2021 23:47:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/zmiana-implementacji-webview-z-google-aosp-na-bromite-w-androidzie/</guid>
      <description>&lt;p&gt;Przeglądając ostatnio opcje deweloperskie w swoim telefonie z Androidem 11, wpadła mi w oczy pozycja
&lt;code&gt;WebView implementation&lt;/code&gt; . Nie ukrywam, że trochę mnie ona zainteresowała i zacząłem się
zastanawiać czym tak naprawdę jest ten cały WebView. Mój smartfon działa aktualnie pod kontrolą
crDroid (ROM na bazie AOSP/LineageOS) i nie jest on sprzęgnięty z usługami od Google (brak
jakichkolwiek GAPPS&#39;ów). Dlatego też w tym przypadku w implementacji WebView widnieje w zasadzie
tylko jedna opcja, tj. Android System WebView. W przypadku stock&#39;owych ROM&#39;ów producentów telefonów
będziemy mieli zaś do czynienia z Google System WebView. Jakby nie patrzeć, zarówno Android/AOSP
System WebView, jak i Google System WebView pochodzą od Google, który niezbyt troszczy się o naszą
prywatność. W mojej głowie pojawiło się zatem pytanie na temat tego czym te dwie implementacje się
od siebie różnią, no i naturalnie też czy są jakieś alternatywne implementacje WebView, z których
można by skorzystać zastępując te domyślnie preinstalowane?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak zaktualizować firmware custom ROM&#39;ów w smartfonach Xiaomi</title>
      <link>https://morfikov.github.io/post/jak-zaktualizowac-firmware-custom-rom-w-smartfonach-xiaomi/</link>
      <pubDate>Thu, 30 Sep 2021 02:43:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-zaktualizowac-firmware-custom-rom-w-smartfonach-xiaomi/</guid>
      <description>&lt;p&gt;Te bardziej szanujące się marki produkujące smartfony zwykle zapewniają wsparcie dla swoich
urządzeń przez co najmniej dwa lata (a czasem nawet i dłużej) od momentu ich wypuszczenia na rynek.
Po wgraniu sobie alternatywnego ROM&#39;u na nasz telefon, oprogramowanie w nim może być aktualizowane
przez opiekuna czy dewelopera takiego ROM&#39;u znacznie dłużej niż producent przewidział. W ten sposób
nie musimy wydawać pieniążków na nowy sprzęt, oczywiście zakładając, że mu nic nie dolega, np. pod
względem wydajności, czy też ewentualnie nie zużył on się nam jakoś bardziej podczas eksploatacji.
Jedną rzeczą, o której posiadacze smartfonów z Androidem zapominają po wgraniu custom ROM&#39;ów na
bazie AOSP/LineageOS, to fakt, że o ile ROM faktycznie dostaje aktualizacje czy to bezpieczeństwa,
czy też upgrade do nowszej wersji Androida, o tyle sam firmware zwykle pozostaje nietknięty. W
przypadku mojego modelu smartfona Redmi 9, Xiaomi od czasu do czasu wypuszcza aktualizacje firmware
do tego urządzenia i przydałoby się ten firmware co jakiś czas zaktualizować. Na szczęście nie
trzeba w tym celu powracać do stock&#39;owego oprogramowania, a cały proces możemy przeprowadzić z
poziomu dowolnej dystrybucji linux&#39;a.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak wgrać crDroid Android ROM na Xiaomi Redmi 9 (lancelot/galahad)</title>
      <link>https://morfikov.github.io/post/jak-wgrac-crdroid-android-rom-na-xiaomi-redmi-9-lancelot-galahad/</link>
      <pubDate>Wed, 29 Sep 2021 17:09:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-wgrac-crdroid-android-rom-na-xiaomi-redmi-9-lancelot-galahad/</guid>
      <description>&lt;p&gt;Przyszła pora pozbyć się w końcu tego stock&#39;owego oprogramowania, które zostało wgrane na mojego
smartfona Xiaomi Redmi 9 (lancelot/galahad) przez producenta tego urządzenia. Przez ostatnich parę
tygodni testowałem różne wersje ROM&#39;ów na bazie AOSP/LineageOS, z których bardziej użyteczne
okazały się &lt;a href=&#34;https://forum.xda-developers.com/t/rom-11-official-pixelplusui-for-redmi-9-poco-m2-lancelot-shiva.4254891/&#34;&gt;PixelPlusUI&lt;/a&gt;, &lt;a href=&#34;https://forum.xda-developers.com/t/rom-11-pixel-extended-official-redmi-9-poco-m2-lava.4296941/&#34;&gt;Pixel Extended&lt;/a&gt; oraz &lt;a href=&#34;https://forum.xda-developers.com/t/rom-official-crdroidandroid-for-redmi-9-poco-m2-lancelot-galahad-shiva.4333181/&#34;&gt;crDroid Anadroid&lt;/a&gt;. Niestety nikt jeszcze
nie opracował LineageOS na ten telefon, więc pozostaje w zasadzie wgranie jednej z tych trzech
powyższych pozycji, jako że Xiaomi Redmi 9 jest oficjalnie przez te ROM&#39;y wspierany. Obecnie Pixel
Extended ma jednak problemy z hostowaniem swoich plików i od paru miesięcy nie miał praktycznie
żadnej aktualizacji, przez co wybór został ograniczony do dwóch pozostałych ROM&#39;ów. Powodem, dla
którego zdecydowałem się wgrać crDroid Android, jest fakt, że nie ma on zintegrowanych aplikacji od
Google (GAPPS). Oczywiście można po instalacji samego ROM&#39;u wgrać także Open GAPPS ale naturalnie
nie jest to wymagane, przez co można sobie skonfigurować cały telefon według własnego uznania
wykorzystując jako bazę początkową microG. W tym artykule zostanie przedstawiony sposób wgrania
ROM&#39;u crDroid Android na smartfon, tak by czasem nie uszkodzić tego urządzenia.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Czy smartfon z Androidem bez Google Apps/Services ma sens</title>
      <link>https://morfikov.github.io/post/czy-smartfon-z-androidem-bez-google-apps-services-ma-sens/</link>
      <pubDate>Tue, 16 Apr 2019 21:00:15 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/czy-smartfon-z-androidem-bez-google-apps-services-ma-sens/</guid>
      <description>&lt;p&gt;Jakiś czas temu &lt;a href=&#34;https://android.com.pl/programowanie/188397-po-co-nam-uslugi-google-play/&#34;&gt;natknąłem się na artykuł&lt;/a&gt; chwalący Google Play Services i sugerujący zarazem,
że nasz smartfon bez tych usług (i appek zależnych od nich) na niewiele się zda człowiekowi. Nie
jest to jednak do końca prawdą i postanowiłem pokazać na żywym przykładzie jak wygląda operowanie na
telefonie z Androidem pozbawionym jakichkolwiek usług czy aplikacji własnościowych od Google. W
rolach głównych wystąpi mój smartfon LG G4C, który jest już dość leciwy ale można na niego wgrać
LineageOS (lub też inny ROM na bazie AOSP). Po wgraniu ROM&#39;u, w telefonie znajduje się jedynie
garstka podstawowych aplikacji (przeglądarka, galeria, itp), które po pierwsze są opensource, a po
drugie można je bez problemu wyłączyć jeśli nie zamierzamy z nich korzystać. Z telefonu można
dzwonić, przeglądać net (WiFi/LTE), robić zdjęcia i używać tego urządzenia do różnego rodzaju
multimediów. W zasadzie czego oczekiwać więcej od telefonu? Niektórzy jednak chcieli by mieć
możliwość używania, np. nawigacji. No i tu już zaczynają się schody, bo na takim w pełni
otwartoźródłowym Androidzie, GPS nie zadziała OOTB i potrzebna nam jest jakaś alternatywa w postaci
pośrednika między aplikacjami a GPS. Standardowo w Andkach tym zadaniem zajmują się właśnie te
usługi Google. Jak więc zatem zmusić GPS do poprawnej pracy nie chcąc przy tym wgrywać sobie tego
rozbudowanego w uprawnieniach szpiega od Google? Problemów naturalnie może być więcej, a to czy
doświadczymy któregokolwiek z nich zależy głównie od odpowiedniej konfiguracji systemu. Niniejszy
artykuł postara się zebrać wszystkie te niezbędne informacje mające na celu zaimplementowanie w
naszym smartfonie otwartoźródłowej alternatywy dla Google Play Services w postaci microG.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
