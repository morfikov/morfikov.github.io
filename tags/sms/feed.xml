<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sms on Morfitronik</title>
    <link>https://morfikov.github.io/tags/sms/</link>
    <description>Recent content in sms on Morfitronik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language>
    <lastBuildDate>Fri, 06 May 2016 20:33:30 +0000</lastBuildDate><atom:link href="https://morfikov.github.io/tags/sms/feed.xml" rel="self" type="application/rss" />
    <item>
	  <author>Mikhail Morfikov</author>
      <title>SMStools i smsd, czyli automat do wysyłania SMS</title>
      <link>https://morfikov.github.io/post/smstools-smsd-automat-wysylania-sms/</link>
      <pubDate>Fri, 06 May 2016 20:33:30 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/smstools-smsd-automat-wysylania-sms/</guid>
      <description>&lt;p&gt;Pod linux&#39;em jest całe mnóstwo oprogramowania, które może realizować zadanie odbierania i wysyłania
wiadomości SMS. Są również narzędzia, dzięki którym cały proces związany z przetwarzaniem SMS&#39;ów
można zautomatyzować. Jakiś czas temu opisywałem tego typu funkcjonalność na przykładzie
&lt;a href=&#34;https://morfikov.github.io/post/gammu-smsd-czyli-wysylanie-odbieranie-sms/&#34;&gt;gammu-smsd&lt;/a&gt;. Nadal uważam, że
jest to przyzwoite narzędzie ale jakby nie patrzeć wymaga ono wielu zależności. Właśnie przez nie
&lt;code&gt;gammu-smsd&lt;/code&gt; nie nadaje się do zastosowań, gdzie ma się do dyspozycji niewiele miejsca. Niemniej
jednak, w przypadku OpenWRT mamy tam możliwość zainstalowania pakietu &lt;code&gt;smstool3&lt;/code&gt; , w którym jest
dostępny demon &lt;code&gt;smsd&lt;/code&gt; . Tak się też składa, że debian również ma swoich repozytoriach to narzędzie
posiada, z tym, że w pakiecie &lt;a href=&#34;http://smstools3.kekekasvi.com/index.php?p=blacklist&#34;&gt;smstools&lt;/a&gt;. W
tym wpisie skonfigurujemy sobie działającą bramkę SMS, która będzie automatycznie odbierać
wiadomości SMS i podejmować stosowne działanie w zależności od numeru czy treści otrzymanego
komunikatu.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Obsługa SMS i kodów USSD w OpenWRT</title>
      <link>https://morfikov.github.io/post/obsluga-sms-kodow-ussd-w-openwrt/</link>
      <pubDate>Sat, 23 Apr 2016 15:16:00 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/obsluga-sms-kodow-ussd-w-openwrt/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://morfikov.github.io/post/monitor-polaczenia-3glte-w-openwrt-3ginfo/&#34;&gt;W artykule poświęconym 3ginfo&lt;/a&gt;
omawialiśmy monitorowanie połączenia 3G/LTE pod OpenWRT. Zabrakło tam jednak pewnej funkcjonalności,
która ucieszyłaby chyba każdego użytkownika tego firmware. Chodzi oczywiście o wysyłanie i
odbieranie SMS oraz przesyłanie kodów USSD. Okazuje się, że &lt;code&gt;3ginfo&lt;/code&gt; potrafi nam tę funkcjonalność
zapewnić, tylko wymagane jest doinstalowanie kilku pakietów i odpowiednie skonfigurowanie systemu. W
tym wpisie spróbujemy sobie ten mechanizm wysyłania SMS i kodów USSD skonfigurować.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Wysyłanie i odbieranie SMS w wammu</title>
      <link>https://morfikov.github.io/post/wysylanie-odbieranie-sms-w-wammu/</link>
      <pubDate>Mon, 11 Apr 2016 20:19:26 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/wysylanie-odbieranie-sms-w-wammu/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://wammu.eu/&#34;&gt;Wammu&lt;/a&gt; to aplikacja, przy pomocy której jesteśmy w stanie zarządzać swoim
telefonem komórkowym. Można ją także wykorzystać do zarządzania modemami USB, tymi samymi, które są
w stanie nam dostarczyć połączenie LTE. Przy pomocy &lt;code&gt;wammu&lt;/code&gt; nie damy rady jednak nawiązać połączenia
internetowego ale jest kilka rzeczy, do których ten soft może nam się przydać. Karta SIM obecna w
takim modemie może mieć zapisane kontakty, które możemy edytować, usuwać i ewentualnie dodawać nowe.
Ważniejszym ficzerem, który oferuje &lt;code&gt;wammu&lt;/code&gt; , jest możliwość wysyłania i odbierania wiadomości SMS.
Wcześniej opisywałem &lt;a href=&#34;https://morfikov.github.io/post/gammu-smsd-czyli-wysylanie-odbieranie-sms/&#34;&gt;wysyłanie i odbieranie SMS za pomocą
gammu-smsd&lt;/a&gt;, niemniej jednak, w
przypadku &lt;code&gt;wammu&lt;/code&gt; nie będziemy uruchamiać żadnej usługi systemowej. Same wiadomości SMS odbiera i
wysyła się na podobnej zasadzie co w telefonie komórkowym. Przyjrzymy się zatem bliżej temu
kawałkowi oprogramowania.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Gammu-smsd, czyli wysyłanie i odbieranie SMS</title>
      <link>https://morfikov.github.io/post/gammu-smsd-czyli-wysylanie-odbieranie-sms/</link>
      <pubDate>Sat, 09 Apr 2016 18:53:58 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/gammu-smsd-czyli-wysylanie-odbieranie-sms/</guid>
      <description>&lt;p&gt;Eksperymentując ostatnio z modemem Huawei E3372s-153 w wersji NON-HiLink, pomyślałem, że przydałoby
się zaprojektować jakiś prosty system do odbioru i wysyłania SMS. Nie chodzi tutaj o zaprzęgnięcie
do pracy oprogramowania takiego jak &lt;a href=&#34;https://linuxonly.ru/cms/page.php?7&#34;&gt;modem-manager-gui&lt;/a&gt; czy też
&lt;a href=&#34;https://wammu.eu/wammu/&#34;&gt;wammu&lt;/a&gt; ale bardziej o przekazywanie tych wiadomości SMS, które trafiają na
modem, na inny numer telefonu komórkowego. Czyli stworzenie takiego telefonicznego proxy, które te
SMS będzie przekazywał dalej. Tego typu funkcjonalność można zaimplementować praktycznie w każdym
linux&#39;ie, tylko wymagane jest posiadanie odpowiednich narzędzi. W tym przypadku rozchodzi się o
&lt;code&gt;gammu-smsd&lt;/code&gt; i to o nim będzie ten wpis.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
