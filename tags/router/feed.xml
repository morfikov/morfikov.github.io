<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>router on Morfitronik</title>
    <link>https://morfikov.github.io/tags/router/</link>
    <description>Recent content in router on Morfitronik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language>
    <lastBuildDate>Tue, 12 May 2020 21:03:00 +0000</lastBuildDate>
    
	<atom:link href="https://morfikov.github.io/tags/router/feed.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Instalacja i konfiguracja AdGuard na routerze z OpenWRT</title>
      <link>https://morfikov.github.io/post/instalacja-konfiguracja-adguard-na-routerze-z-openwrt/</link>
      <pubDate>Tue, 12 May 2020 21:03:00 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/instalacja-konfiguracja-adguard-na-routerze-z-openwrt/</guid>
      <description>&lt;p&gt;Jakiś już czas temu opisywałem w jaki sposób &lt;a href=&#34;https://morfikov.github.io
/post/blokowanie-reklam-adblock-na-domowym-routerze-wifi/&#34;&gt;skonfigurować AdBlock&#39;a na routerze WiFi z wgranym
firmware OpenWRT&lt;/a&gt; oraz jak wdrożyć &lt;a href=&#34;https://morfikov.github.io
/post/konfiguracja-dnscrypt-proxy-w-openwrt/&#34;&gt;szyfrowanie zapytań DNS w oparciu o dnscrypt-proxy dla
wszystkich klientów naszej sieci domowej&lt;/a&gt;. Zarówno AdBlock jak i dnscrypt-proxy można w dalszym
ciągu wykorzystywać, zwłaszcza na routerach wyposażonych w niewielkich rozmiarów flash i mało
pamięci RAM. Niemniej jednak, nie każdy lubi konfigurować swój bezprzewodowy router za
pośrednictwem terminala. Dla takich osób powstał właśnie &lt;a href=&#34;https://github.com/AdguardTeam/AdGuardHome#comparison&#34;&gt;AdGuard Home&lt;/a&gt;, który ma na celu
możliwie uprościć konfigurację routera, przynajmniej jeśli chodzi o rzeczy związane z protokołem
DNS. W tym artykule przyjrzymy się nieco bliżej AdGuard&#39;owi i zobaczymy czy można z niego zrobić
jakiś większy użytek.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak zbudować/uaktualnić firmware OpenWRT dla routera WiFi</title>
      <link>https://morfikov.github.io/post/jak-zbudowac-uaktualnic-firmware-openwrt-dla-routera-wifi/</link>
      <pubDate>Mon, 13 Apr 2020 21:03:00 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-zbudowac-uaktualnic-firmware-openwrt-dla-routera-wifi/</guid>
      <description>&lt;p&gt;Od dłuższego już czasu na swoich routerach WiFi wykorzystuję firmware OpenWRT. W przypadku mojego
domowego routera TP-Link Archer C7 v2 zarządzanie jego oprogramowaniem sprowadza się w zasadzie do
przeprowadzania aktualizacji raz na kilka tygodni czy miesięcy. Z reguły nie jest to jakoś
czasochłonne zadanie, bo wystarczy pobrać stosowny obraz z &lt;a href=&#34;http://dl.eko.one.pl/openwrt-19.07/targets/ath79/generic/&#34;&gt;serwera eko.one.pl&lt;/a&gt; i wrzucić go na
router czy to przez interfejs LuCI, czy też przez &lt;code&gt;sysupgrade&lt;/code&gt; . No tak tylko, że po wgraniu
OpenWRT na flash routera trzeba zwykle też dograć szereg pakietów, których nie ma w standardzie,
przynajmniej jeśli chodzi akurat o ten mój router bezprzewodowy. Podobnie sprawa ma się z
odtwarzaniem konfiguracji, której pewne elementy pozostają niezmienne nawet po aktualizacji ze
starszego wydania OpenWRT do nowszego. Postanowiłem zatem zgłębić nieco proces kompilacji źródeł i
budowy obrazu z firmware OpenWRT, tak by nieco zautomatyzować sobie (czy też wręcz wyeliminować)
chociaż część z kroków, które zwykle przeprowadzam chwilę po wgraniu obrazu na router. Cały ten
proces budowy obrazu zostanie opisany przy wykorzystaniu dystrybucji Debian linux.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak ustalić IP i nazwę pliku trybu recovery w routerach TP-Link</title>
      <link>https://morfikov.github.io/post/jak-ustalic-ip-i-nazwe-pliku-trybu-recovery-w-routerach-tp-link/</link>
      <pubDate>Thu, 17 Aug 2017 21:22:08 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-ustalic-ip-i-nazwe-pliku-trybu-recovery-w-routerach-tp-link/</guid>
      <description>&lt;p&gt;Jeden z moich routerów, a konkretnie był
to &lt;a href=&#34;http://www.tp-link.com/us/download/Archer-C7.html&#34;&gt;Archer C7&lt;/a&gt; v2 wymagał, by powrócić jego
firmware z LEDE/OpenWRT do tego, który widnieje na oficjalnej stronie TP-Link. Niby ta czynność nie
jest zbyt skomplikowana ale jak zwykle coś poszło nie tak. Konkretnie to odłączyłem zasilanie nie w
tej listwie co trzeba i w efekcie podczas flash&#39;owania routera nowym firmware, to urządzenie się
zwyczajnie wyłączyło. Zawału oczywiście nie dostałem, bo przecież obraz, który był wgrywany na
router nie zawierał uboot&#39;a, czyli części z bootloader&#39;em, więc wiedziałem, że wystarczy przez tryb
recovery wgrać obraz jeszcze raz i po sprawie. Problem w tylko w tym, że nie znałem w zasadzie ani
nazwy pliku obrazu, ani też adresu IP, który jest wymagany dla połączenia w przypadku routera
Archer C7 v2. Te dane można naturalnie znaleźć w sieci ale co w przypadku, gdy ubijemy sobie w taki
sposób nasz jedyny router, przez co pozbawimy się jednocześnie dostępu do internetu? Czy istnieje
jakiś sposób na ustalenie tych danych, inny niż przez konsolę szeregową?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak wymusić pasmo/częstotliwość LTE pod LEDE/OpenWRT</title>
      <link>https://morfikov.github.io/post/jak-wymusic-pasmo-czestotliwosc-lte-pod-lede-openwrt/</link>
      <pubDate>Fri, 13 Jan 2017 18:43:37 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-wymusic-pasmo-czestotliwosc-lte-pod-lede-openwrt/</guid>
      <description>&lt;p&gt;Zainspirowany &lt;a href=&#34;http://forum.jdtech.pl/Watek-wybor-czestotliwosci-lte-na-przykladzie-huawei-e3372&#34;&gt;wątkiem na forum
JDtech&lt;/a&gt; na temat
testów transferów w konkretnych pasmach/częstotliwościach LTE, postanowiłem sprawdzić jak ta sprawa
wygląda w mojej okolicy. Generalnie ja obecnie u siebie mam modem Huawei E3372s-153 w wersji
NON-HiLink podpięty do &lt;a href=&#34;http://www.tp-link.com.pl/products/details/Archer-C2600.html&#34;&gt;routera TP-LINK Archer
C2600&lt;/a&gt;. Oczywiście na tym routerze
jest wgrany alternatywny firmware LEDE/OpenWRT, bo inaczej nie miałbym możliwości skorzystać z tego
modemu. Standardowa konfiguracja LTE w LEDE/OpenWRT daje nam jedynie możliwość wyboru między
ustawieniami &lt;code&gt;auto&lt;/code&gt; , &lt;code&gt;gsm&lt;/code&gt; , &lt;code&gt;umts&lt;/code&gt; , &lt;code&gt;lte&lt;/code&gt; , &lt;code&gt;preferumts&lt;/code&gt; oraz &lt;code&gt;preferlte&lt;/code&gt; . W przypadku internetu
LTE, zwykle wybieramy tutaj tryb &lt;code&gt;auto&lt;/code&gt; , ewentualnie też &lt;code&gt;lte&lt;/code&gt; , by wymusić konkretny tryb pracy
modemu, co może mieć kolosalne znaczenie przy darmowym internecie od RBM/Play. Niemniej jednak,
nawet w przypadku wyboru &lt;code&gt;lte&lt;/code&gt; , częstotliwość na jakiej będzie pracował modem w dalszym ciągu jest
dobierana automatycznie w oparciu o parametry sygnału docierającego z dostępnych w okolicy BTS&#39;ów. W
przypadku modemu E3372 można jednak wymusić, by połączenie LTE było realizowane na konkretnej
częstotliwości, np. 2100/1800/2600/900/800 MHz i by taki stan rzeczy osiągnąć, trzeba nieco
przerobić konfigurację tego alternatywnego oprogramowania znajdującego się w naszym routerze WiFi.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recenzja: Router LTE Archer MR200 od TP-LINK</title>
      <link>https://morfikov.github.io/post/recenzja-router-lte-archer-mr200-tp-link/</link>
      <pubDate>Thu, 29 Dec 2016 18:53:07 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/recenzja-router-lte-archer-mr200-tp-link/</guid>
      <description>&lt;p&gt;Do momentu upowszechnienia się technologii LTE, ludzkość była zdana na przewodowe łącza internetowe
oferowane przez lokalnych ISP. Jeśli chodzi o tych lokalnych providerów, to zwykle nie mają oni
praktycznie żadnej konkurencji w danej części miasta/wsi. Czy taki stan rzeczy jest wynikiem
dostarczania najlepszych jakościowo usług za najniższą cenę? W moim przypadku nie były to ani
najlepsze usługi, ani też najniższa cena, tylko tak dobrane przepisy prawne, by zewnętrznemu ISP nie
opłacało się świadczyć usług w mojej okolicy, bo za ten fakt dostawał on z miejsca szereg opłat/kar.
Teraz, gdy już praktycznie każdy z nas jest w zasięgu LTE, możemy porzucić tych lokalnych ISP i
obserwować ich nieuchronny upadek, no chyba, że w końcu zaczną dbać o swoich klientów. Niemniej
jednak, w dalszym ciągu, by korzystać z technologi LTE potrzebny nam jest odpowiedni sprzęt, zwykle
jest to jakiś modem, np. Huawei E3372s-153. Problem z modemem jest taki, że standardowo można go
podłączyć tylko do jednego komputera w danej chwili, no chyba, że mamy router WiFi z wgranym
alternatywnym oprogramowaniem pokroju OpenWRT/LEDE. Niemniej jednak, w dalszym ciągu trzeba nieco
wprawy, by ten modem ogarnąć i udostępnić połączenie internetowe hostom w lokalnej sieci. Dlatego
też od jakiegoś czasu na rynku zaczęły pojawiać się routery WiFi, które mają wbudowany modemem LTE.
Jedno z takich urządzeń dotarło do mnie kilka dni temu, a konkretnie jest &lt;a href=&#34;http://www.tp-link.com.pl/products/details/cat-4691_Archer-MR200.html&#34;&gt;model Archer
MR200&lt;/a&gt; od TP-LINK.
Postanowiłem zatem zobaczyć co oferuje ten sprzęt w standardzie, oraz czy jest dla niego jakieś
alternatywne oprogramowanie.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak skonfigurować klienta VPN na routerze z LEDE/OpenWRT</title>
      <link>https://morfikov.github.io/post/jak-skonfigurowac-klienta-vpn-na-routerze-z-ledeopenwrt/</link>
      <pubDate>Thu, 08 Dec 2016 18:13:41 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-skonfigurowac-klienta-vpn-na-routerze-z-ledeopenwrt/</guid>
      <description>&lt;p&gt;Ostatnio pisałem trochę o &lt;a href=&#34;https://morfikov.github.io
/post/jak-skonfigurowac-serwer-vpn-na-debianie-openvpn/&#34;&gt;konfiguracji serwera VPN na
Debianie&lt;/a&gt; oraz podłączaniu
do niego różnych linux&#39;owych klientów, w tym też &lt;a href=&#34;https://morfikov.github.io
/post/jak-skonfigurowac-polaczenie-vpn-na-smartfonie-z-androidem/&#34;&gt;smartfonów wyposażonych w system
Android&lt;/a&gt;. O ile
konfiguracja pojedynczego klienta OpenVPN nie jest jakoś szczególnie trudna, to mając w swojej sieci
domowej kilka urządzeń zdolnych łączyć się z internetem zarówno przewodowo jak i bezprzewodowo, to
dostosowanie konfiguracji na każdym z tych sprzętów może być ździebko problematyczne. To co łączy te
wszystkie urządzenia w naszym domu, to router WiFi. Zwykle każdy komputer, nawet ten najmniejszy,
łączy się z takim routerem w celu nawiązania połączenia ze światem. Dlatego też zamiast
konfigurować osobno wszystkie te urządzenia elektroniczne, możemy skonfigurować sobie router w taki
sposób, by cały zebrany ruch z sieci lokalnej przesłał do serwera VPN. Standardowej klasy routery
nie wspierają połączeń VPN i by taki mechanizm zaimplementować potrzebne nam będzie alternatywne
firmware pokroju LEDE/OpenWRT. W tym artykule postaramy się skonfigurować połączenie VPN dla sieci
domowej w oparciu o &lt;a href=&#34;http://www.tp-link.com.pl/products/details/Archer-C2600.html&#34;&gt;router Archer
C2600&lt;/a&gt; od TP-LINK, który ma wgrany
najnowszy snapshot LEDE Chaos Calmer (r2392).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Aplikacja tpMiFi do zarządzania routerami 3G/LTE od TP-LINK</title>
      <link>https://morfikov.github.io/post/aplikacja-tpmifi-do-zarzadzania-routerami-3g-lte-tp-link/</link>
      <pubDate>Fri, 25 Nov 2016 20:57:39 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/aplikacja-tpmifi-do-zarzadzania-routerami-3g-lte-tp-link/</guid>
      <description>&lt;p&gt;Jakiś czas temu opisywałem jeden z mobilnych routerów WiFi, który był w stanie realizować połączenie
LTE i udostępniać je w obrębie swojej sieci. Konkretnie był to &lt;a href=&#34;https://morfikov.github.io
/post/recenzja-przenosny-router-lte3g-mifi-m7310-od-tp-link/&#34;&gt;hotspot
M7310&lt;/a&gt;. W recenzji
tego urządzenia wspomniałem o tym, że dysponując smartfonem jesteśmy w stanie przy jego pomocy
zarządzać tym routerem. Oczywiście potrzebna jest do tego celu specjalna aplikacja tpMiFi
wypuszczona również przez TP-LINK, którą można pobrać bez większego problemu z Google Play. Jako, że
w tamtym wpisie potraktowałem temat tej aplikacji jedynie powierzchownie, to postanowiłem nieco
bardziej się jej przyjrzeć i dokładnie opisać jej właściwości.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Aplikacja Tether do zarządzania urządzeniami TP-LINK przez smartfon</title>
      <link>https://morfikov.github.io/post/aplikacja-tether-do-zarzadzania-urzadzeniami-tp-link-przez-smartfon/</link>
      <pubDate>Thu, 24 Nov 2016 21:02:26 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/aplikacja-tether-do-zarzadzania-urzadzeniami-tp-link-przez-smartfon/</guid>
      <description>&lt;p&gt;TP-LINK ma w swojej ofercie szereg urządzeń, którymi można zarządzać z grubsza na dwa sposoby.
Pierwszym jest raczej znany nam wszystkim panel administracyjny dostępny z poziomu przeglądarki
internetowej zainstalowanej na dowolnym komputerze czy laptopie. Drugim ze sposobów jest
wykorzystanie smartfona i dedykowanej aplikacji Tether na Androida/iOS. Webowy panel administracyjny
zwykł udostępniać nam całą masę opcji, a jak jest w przypadku aplikacji Tether?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Udostępnianie LTE/3G ze smartfona przez router OpenWRT (tethering)</title>
      <link>https://morfikov.github.io/post/udostepnianie-lte-3g-ze-smartfona-przez-router-openwrt-tethering/</link>
      <pubDate>Tue, 01 Nov 2016 18:14:53 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/udostepnianie-lte-3g-ze-smartfona-przez-router-openwrt-tethering/</guid>
      <description>&lt;p&gt;Przeglądając &lt;a href=&#34;http://eko.one.pl/forum/viewtopic.php?pid=175547&#34;&gt;forum eko.one.pl natrafiłem ciekawy
problem&lt;/a&gt;, nad którym też się zastanawiałem jakiś
czas temu. Chodzi o udostępnienie internetu komórkowego (LTE/3G) komputerom w domowej sieci za
pomocą smartfona (tzw. &lt;a href=&#34;https://pl.wikipedia.org/wiki/Tethering&#34;&gt;tethering&lt;/a&gt;). W takiej sytuacji, w
przypadku problemów z lokalnym dostawcą internetu moglibyśmy przepiąć wszystkie komputery na
internet świadczony przez operatora GSM, z którego korzystamy. Z reguły standardowy firmware
routerów WiFi nie pozwala na tego typu rozwiązania. Niemniej jednak, mając do dyspozycji router z
OpenWRT można spróbować połączyć go z naszym smartfonem udostępniając sieci lokalnej internet
LTE/3G. W tym artykule zostanie przedstawione tego typu rozwiązanie przy wykorzystaniu &lt;a href=&#34;http://www.tp-link.com.pl/en/products/details/cat-9_Archer-C7.html&#34;&gt;routera
Archer C7&lt;/a&gt; v2 od TP-LINK oraz
&lt;a href=&#34;http://www.neffos.com/en/product/details/C5&#34;&gt;smartfona Neffos C5&lt;/a&gt;, również od TP-LINK. Na routerze
zaś jest wgrana najnowsza stabilna wersja OpenWRT (Chaos Calmer). Sprawdzimy sobie jak takie
rozwiązanie wygląda oraz sprawuje się w praktyce i czy jest ono w ogóle godne jakiegoś większego
zainteresowania.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak przy pomocy trybu recovery odzyskać router TP-LINK</title>
      <link>https://morfikov.github.io/post/jak-przy-pomocy-trybu-recovery-odzyskac-router-tp-link/</link>
      <pubDate>Sat, 22 Oct 2016 21:22:08 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-przy-pomocy-trybu-recovery-odzyskac-router-tp-link/</guid>
      <description>&lt;p&gt;Przy okazji zabawy z &lt;a href=&#34;https://morfikov.github.io
/post/konsola-szeregowa-adapter-usb-uart-uszkodzony-router-tp-link/&#34;&gt;konsolą szeregową przy ratowaniu jednego z moich routerów
TP-LINK&lt;/a&gt;
(&lt;a href=&#34;http://www.tp-link.com.pl/products/details/TL-WR1043ND.html&#34;&gt;TL-WR1043ND&lt;/a&gt; V2), parokrotnie
przewinęła mi się informacja na temat trybu recovery, który ma być dostępny w części routerów. W
czym nam taki tryb może pomóc i czy nasz router go obsługuje? Jeśli tak, to jak za jego pomocą
naprawić urządzenie, które nie chce wystartować, np. po przerwanym procesie wgrywania firmware
TP-LINK czy też OpenWRT/LEDE? W trym artykule postaramy się odpowiedzieć na te pytania.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konsola szeregowa, adapter USB-UART i uszkodzony router TP-LINK</title>
      <link>https://morfikov.github.io/post/konsola-szeregowa-adapter-usb-uart-uszkodzony-router-tp-link/</link>
      <pubDate>Sun, 16 Oct 2016 20:36:17 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konsola-szeregowa-adapter-usb-uart-uszkodzony-router-tp-link/</guid>
      <description>&lt;p&gt;Każdy z nas słyszał o alternatywnym firmware na bezprzewodowe routery WiFi. Mam tutaj na myśli
oczywiście &lt;a href=&#34;https://openwrt.org/&#34;&gt;OpenWRT&lt;/a&gt;/&lt;a href=&#34;https://lede-project.org/&#34;&gt;LEDE&lt;/a&gt; oraz jego GUI
&lt;a href=&#34;https://www.gargoyle-router.com/&#34;&gt;Gargoyle&lt;/a&gt; i &lt;a href=&#34;http://eko.one.pl/?p=openwrt-luci&#34;&gt;LUCI&lt;/a&gt;. Przy
zabawach z takim oprogramowaniem bardzo łatwo jest uszkodzić router w sytuacji, gdy tak na dobrą
sprawę nie wiemy co robimy. Mi się jeszcze nie zdarzyło ubić żadnej z moich maszyn, a mam ich kilka.
Problem w tym, że tak naprawdę nie wiem jak wygląda proces odzyskiwania routera w przypadku
zaistnienia takiego złego scenariusza. Dlatego też postanowiłem zainicjować zdarzenie, które
doprowadziło do ubicia systemu w moim
&lt;a href=&#34;http://www.tp-link.com.pl/products/details/TL-WR1043ND.html&#34;&gt;TL-WR1043ND&lt;/a&gt; V2 od TP-LINK. Co zrobić
w takim przypadku, gdy system routera nie chce wystartować, a na obudowie diody sygnalizują
nieprawidłową pracę urządzenia? W takiej sytuacji będziemy musieli rozebrać sprzęt i podłączyć się
do portu szeregowego na PCB za pomocą adaptera USB-UART, najlepiej na układzie CP2102, który bez
problemu działa pod linux. Ten artykuł nie powstałby (tak szybko), &lt;a href=&#34;http://tplink-forum.pl/index.php?/topic/5322-jak-ustali%C4%87-oznaczenia-port%C3%B3w-konsoli-szeregowej-na-pcb/&#34;&gt;gdyby nie pomoc ze strony
@Heinz&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recenzja: Przenośny router LTE/3G (MiFi) M7310 od TP-LINK</title>
      <link>https://morfikov.github.io/post/recenzja-przenosny-router-lte3g-mifi-m7310-od-tp-link/</link>
      <pubDate>Sun, 25 Sep 2016 22:06:06 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/recenzja-przenosny-router-lte3g-mifi-m7310-od-tp-link/</guid>
      <description>&lt;p&gt;Wielu zaawansowanych użytkowników komputera, zwłaszcza tych korzystających z linux&#39;a, bardzo ceni
sobie możliwość bezgranicznego zarządzania posiadanym sprzętem elektronicznym. Nie chodzi tylko o
zwykłego desktopa czy laptopa ale też o urządzenia z systemami wbudowanymi jak, np. routery WiFi.
Większość routerów nie obsługuje modemów LTE ale mogłaby, gdyby pozwalało im na to zainstalowane na
nich oprogramowanie. Na moim blogu jest kilka artykułów dotyczących &lt;a href=&#34;https://morfikov.github.io
/post/tag/modem/&#34;&gt;instalacji i konfiguracji
modemów LTE&lt;/a&gt; właśnie na takich routerach, z tym, że w oparciu o
firmware OpenWRT/LEDE. Niemniej jednak, w przypadku takiego alternatywnego firmware wymagana jest
drobna znajomość obsługi komputera, a cała masa użytkowników nie chce poświęcać czasu na zgłębianie
technik informatycznych. Te osoby chcą zwyczajnie podłączyć dane urządzenie do prądu i móc z niego
korzystać tuż po wyjęciu go z pudełka. Mam właśnie jedno takie urządzenie, które byłoby w stanie
zaspokoić większość osób z tego grona. Nie jest to co prawda pełnowymiarowy router WiFi z modemem
LTE na pokładzie ale w przeciwieństwie do swoich kolegów jest o wiele bardziej mobilny. Mowa o
&lt;a href=&#34;http://www.tp-link.com.pl/products/details/M7310.html&#34;&gt;przenośnym hotspocie LTE M7310&lt;/a&gt; od TP-LINK.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Instalacja i konfiguracja firmware OpenWRT (Chaos Calmer)</title>
      <link>https://morfikov.github.io/post/instalacja-konfiguracja-firmware-openwrt-chaos-calmer/</link>
      <pubDate>Fri, 23 Sep 2016 18:27:02 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/instalacja-konfiguracja-firmware-openwrt-chaos-calmer/</guid>
      <description>&lt;p&gt;Ten post ma na celu zebranie wszystkich wpisów dotyczących instalacji i konfiguracji alternatywnego
firmware OpenWRT, które znajdują się na tym blogu i umieszczenie ich w jednym wpisie. Chodzi
generalnie o to, by wszystkie te artykuły były dostępne na jednej stronie w formie spisu treści
odwołującego się do poszczególnych tekstów. &lt;a href=&#34;https://tplinkforum.pl/t/openwrt-w-pigulce-konfiguracja-w-oparciu-o-tl-wr1043nd-oraz-archer-c7/6960/&#34;&gt;Na tplinkforum.pl znajduje się post &amp;quot;OpenWRT w
pigułce&amp;quot;&lt;/a&gt;
, z tym, że tamten artykuł dotyczy wydania Barrier Breaker. Artykuły, do których linki znajdują się
poniżej, odwołują się do wydania Chaos Calmer i rozwiązania opisane w nich powinny na tej wersji
firmware działać bez problemu. Mogą natomiast pojawić się problemy w przypadku konfiguracji
starszych wersji OpenWRT na naszym routerze WiFi.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blokowanie reklam z adblock na domowym routerze WiFi</title>
      <link>https://morfikov.github.io/post/blokowanie-reklam-adblock-na-domowym-routerze-wifi/</link>
      <pubDate>Mon, 19 Sep 2016 22:22:00 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/blokowanie-reklam-adblock-na-domowym-routerze-wifi/</guid>
      <description>&lt;p&gt;Na sporej części stron internetowych są nam prezentowane reklamy w miej lub bardziej nachalny
sposób. Takie banery są w stanie w dużej mierze przesłonić faktyczną treść serwisu albo też wręcz
uniemożliwić nam spokojne czytanie tekstu, który się w takiej witrynie znajduje. By walczyć z tego
typu praktykami, powstała cała masa dodatków do przeglądarek, np.
&lt;a href=&#34;https://adblockplus.org/&#34;&gt;adblock&lt;/a&gt; czy &lt;a href=&#34;https://www.ublock.org/&#34;&gt;ublock&lt;/a&gt;, które są w stanie
odfiltrować praktycznie wszystkie reklamy. Możemy pokusić się o zaimplementowanie takiego adblock&#39;a
bezpośrednio na naszym routerze WiFi, z tym, że by taki filtr reklam wdrożyć w naszej sieci domowej,
na routerze musimy zainstalować alternatywny firmware OpenWRT/LEDE.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DD-WRT: Jak powrócić do firmware TP-LINK&#39;a</title>
      <link>https://morfikov.github.io/post/dd-wrt-jak-powrocic-do-firmware-tp-linka/</link>
      <pubDate>Fri, 16 Sep 2016 19:10:41 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/dd-wrt-jak-powrocic-do-firmware-tp-linka/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.dd-wrt.com/site/&#34;&gt;DD-WRT&lt;/a&gt; nie każdemu może przypaść do gustu. Może się zdarzyć też tak,
że pewne rzeczy na routerze za sprawą tego firmware przestaną nam zwyczajnie działać, bo nie każde
urządzenie jest w pełni wspierane przez to oprogramowanie. W takim przypadku jedyną opcją będzie
powrót do oryginalnego firmware, który oferuje producent routera. Ja dysponuję &lt;a href=&#34;http://www.tp-link.com.pl/products/details/TL-WDR3600.html&#34;&gt;routerem model
TL-WDR3600&lt;/a&gt; od TP-LINK. On akurat jest w
pełni wspierany przez DD-WRT. Niemniej jednak, na jego przykładzie zostanie pokazane jak powrócić do
oryginalnego oprogramowania posługując się panelem webowym dostępnym DD-WRT.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recenzja: Router Archer C2600 od TP-LINK</title>
      <link>https://morfikov.github.io/post/recenzja-router-archer-c2600-od-tp-link/</link>
      <pubDate>Wed, 14 Sep 2016 18:20:30 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/recenzja-router-archer-c2600-od-tp-link/</guid>
      <description>&lt;p&gt;Któż z nas nie ma gdzieś koło swojego domowego ogniska takiego małego urządzenia z antenami, które
nic tylko sobie leży gdzieś na półce i od czasu do czasu tylko mignie do nas swoimi diodami? Mowa
oczywiście o routerach WiFi, które można powoli chyba zacząć traktować jak nowych członków naszej
rodziny. Te elektroniczne stworzenia są tak bardzo użyteczne, że wielu z nas już sobie życia bez
nich nie wyobraża. Technologia bezprzewodowej łączności rozwija się bardzo prężnie i, gdy niecałe
dwa lata temu sprawiłem sobie mój pierwszy router WiFi (model
&lt;a href=&#34;http://www.tp-link.com.pl/products/details/TL-WR1043ND.html&#34;&gt;TL-WR1043ND&lt;/a&gt; v2), to myślałem, że
wystarczy mi on na jakiś dłuższy czas. Wtedy 450 mbit/s w paśmie 2,4 GHz to były naprawdę przyzwoite
osiągi, przynajmniej teoretycznie rzecz ujmując. Od tamtego czasu bardzo dużo się zmieniło w kwestii
WiFi, nie tylko pod względem przepustowości ale także technologii, które znajdują zastosowanie w tym
bezprzewodowym wymiarze otaczającej nas rzeczywistości. Tak się składa, że mam jedno z tych bardziej
zaawansowanych urządzeń i postanowiłem sobie je dokładnie obadać. Jest to &lt;a href=&#34;http://www.tp-link.com.pl/products/details/Archer-C2600.html&#34;&gt;router Archer
C2600&lt;/a&gt; od TP-LINK, który ma być zdolny
przesłać sygnał po WiFi z prędkością 800 mbit/s w paśmie 2,4 GHz i 1733 mbit/s w paśmie 5 GHz, także
zobaczmy co to jest za maszyna.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DD-WRT: Reset ustawień (Hard Reset i factory defaults)</title>
      <link>https://morfikov.github.io/post/dd-wrt-reset-ustawien-hard-reset-factory-defaults/</link>
      <pubDate>Tue, 13 Sep 2016 19:06:25 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/dd-wrt-reset-ustawien-hard-reset-factory-defaults/</guid>
      <description>&lt;p&gt;Prawdopodobnie zdarzy się nam taka sytuacja, że nie będziemy w stanie zalogować się do panelu
administracyjnego naszego routera wyposażonego w firmware DD-WRT. Przyczyny mogą być różne, choć
zwykle leżą one gdzieś w konfiguracji urządzenia. Jeśli dodatkowo wystąpią problemy z dostępem do
sieci/internetu, to wybrnięcie z tej sytuacji może być dość kłopotliwe. DD-WRT posiada mechanizm
resetu, tzw. factory defaults, który jest w stanie zresetować router do ustawień fabrycznych i
przywrócić nam nad nim kontrolę. W tym wpisie zobaczymy jak przeprowadzić taki reset ustawień na
przykładzie mojego &lt;a href=&#34;http://www.tp-link.com.pl/products/details/TL-WDR3600.html&#34;&gt;routera TL-WDR3600&lt;/a&gt;
od TP-LINK.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DD-WRT: SSH port forwarding i panel aministracyjny</title>
      <link>https://morfikov.github.io/post/dd-wrt-ssh-port-forwarding-panel-aministracyjny/</link>
      <pubDate>Mon, 12 Sep 2016 17:29:22 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/dd-wrt-ssh-port-forwarding-panel-aministracyjny/</guid>
      <description>&lt;p&gt;Firmware DD-WRT oferuje kilka sposobów na uzyskanie dostępu do naszego domowego routera. Poza
graficznym panelem webowym, gdzie wszystko możemy sobie wyklikać, mamy jeszcze tekstowy telnet i
SSH. DD-WRT jest nam w stanie także zaoferować SSH port forwarding. Ten mechanizm z kolei bardzo
przydaje się w momencie, gdy chcemy uzyskać dostęp do routera przez panel administracyjny ale nie
uśmiecha nam się wystawianie go na widok publiczny po niezabezpieczonym protokole HTTP. Z kolei
serwer www posiadający zaimplementowany protokół SSL/TLS jest dość zasobożerny i jego zastosowanie
średnio nadaje się w przypadku małych routerów. Za pomocą przekierowania portów SSH możemy uzyskać
dostęp do lokalnej instancji panelu webowego omijając obydwa te powyższe problemy. Panel admina
pozostaje schowany w sieci lokalnej, a my logujemy się do niego wykorzystując połączenie SSH.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenWRT: Dwa różne adresy MAC na porcie WAN</title>
      <link>https://morfikov.github.io/post/openwrt-dwa-rozne-adresy-mac-na-porcie-wan/</link>
      <pubDate>Sun, 11 Sep 2016 18:42:58 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/openwrt-dwa-rozne-adresy-mac-na-porcie-wan/</guid>
      <description>&lt;p&gt;Na forum eko.one.pl pojawił się ciekawy temat dotyczący &lt;a href=&#34;http://eko.one.pl/forum/viewtopic.php?id=14224&#34;&gt;problemów z adresami MAC w
OpenWRT.&lt;/a&gt; Chodzi o to, że by uzyskać połączenie u
pewnych ISP, trzeba im podać adres MAC tego urządzenia, które będzie wpięte bezpośrednio w strukturę
sieci ISP. Niby normalna sprawa ale w pewnych przypadkach, ISP potrafi uwalić połączenie, gdy inne
urządzenie zostanie podpięte do sieci w miejscu starego. Zwykle wystarczy telefon do ISP z prośbą o
aktualizację adresu MAC ale w przypadku firmware OpenWRT może to być ździebko problematyczna
kwestia. Wychodzi na to, że OpenWRT identyfikuje się dwoma adresami MAC na porcie WAN. Jeden z nich
to ten standardowy MAC, który powinien być wykorzystywany i podany ISP. Drugim zaś jest MAC, który
pojawia się przy rozgłaszaniu trybu failsafe podczas fazy startu routera WiFi. Ja nigdy nie
zaobserwowałem problemów z tego powodu. Niemniej jednak, postanowiłem sprawdzić, jak ta sytuacja
dokładnie wygląda i jak sobie z nią poradzić już teraz, na wypadek, gdyby w przyszłości trafił mi
się jeden z takich dziwnych ISP.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DD-WRT: Dostęp do routera (telnet, ssh, panel web)</title>
      <link>https://morfikov.github.io/post/dd-wrt-dostep-do-routera-telnet-ssh-panel-web/</link>
      <pubDate>Sun, 11 Sep 2016 12:42:30 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/dd-wrt-dostep-do-routera-telnet-ssh-panel-web/</guid>
      <description>&lt;p&gt;Do routera posiadającego na pokładzie firmware DD-WRT możemy uzyskać dostęp na kilka sposobów. Ten
najbardziej popularny, to oczywiście panel administracyjny dostępny z poziomu www, na który możemy
się dostać wpisując w pasku adresu przeglądarki &lt;code&gt;http://192.168.1.1/&lt;/code&gt; . Niemniej jednak, to nie jest
jedyna droga do zarządzania routerem. Standardowo również mamy aktywną usługę telnet. Dodatkowo
możemy aktywować SSL/TLS w panelu admina oraz dorobić usługę SSH. W tym artykule omówimy sobie
wszystkie te formy dostępu do routera.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenWRT: Konfiguracja anten via txantenna/rxantenna</title>
      <link>https://morfikov.github.io/post/openwrt-konfiguracja-anten-via-txantenna-rxantenna/</link>
      <pubDate>Fri, 09 Sep 2016 17:59:24 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/openwrt-konfiguracja-anten-via-txantenna-rxantenna/</guid>
      <description>&lt;p&gt;Przeglądając forum eko.one.pl wpadł mi w oko &lt;a href=&#34;http://eko.one.pl/forum/viewtopic.php?pid=171898#p171898&#34;&gt;taki oto
temat&lt;/a&gt;. Problem, który został w nim
poruszony dotyczył wykorzystywania pewnej określonej anteny routera. Zakładając, że przeciętny
router ma trzy anteny, powiedzmy, że chcemy wykorzystywać tylko jedną z nich. Dlaczego mielibyśmy
rozważać w ogóle taką sytuację? Przy trzech antenach, teoretyczny transfer w paśmie 2,4 GHz to, w
zależności od routera, 450-600 mbit/s. Przy jednej antenie będziemy mieli max 150-200 mbit/s. Z tego
co czytałem wcześniej w różnych źródłach, uszkodzenie w jakiś sposób toru antenowego może
drastycznie pogorszyć lub wręcz uniemożliwić routerowi transmisję sygnału. Opisana w podlinkowanym
wyżej wątku sytuacja dotyczyła właśnie tego typu zdarzenia, gdzie jedno z gniazd antenowych routera
zostało uszkodzone. Firmware OpenWRT/LEDE jest nam w stanie umożliwić wybór określonych anten przy
pomocy parametrów &lt;code&gt;diversity&lt;/code&gt; , &lt;code&gt;txantenna&lt;/code&gt; oraz &lt;code&gt;rxantenna&lt;/code&gt; . W tym wpisie zobaczymy jak
skonfigurować sobie anteny na przykładzie &lt;a href=&#34;http://www.tp-link.com.pl/products/details/TL-WR1043ND.html&#34;&gt;routera TL-WR1043ND
V2&lt;/a&gt; od TP-LINK.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DD-WRT: Aktualizacja firmware do najnowszej wersji</title>
      <link>https://morfikov.github.io/post/dd-wrt-aktualizacja-firmware-do-najnowszej-wersji/</link>
      <pubDate>Thu, 08 Sep 2016 19:56:52 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/dd-wrt-aktualizacja-firmware-do-najnowszej-wersji/</guid>
      <description>&lt;p&gt;Firmware, który jest dostępny na &lt;a href=&#34;https://www.dd-wrt.com/site/support/router-database&#34;&gt;stronie
DD-WRT&lt;/a&gt; nie jest zbyt aktualny. Ten obraz,
który pobrałem dla swojego routera TL-WDR3600 jest datowany na rok 2013. Szukając informacji na ten
temat, okazało się, że &lt;a href=&#34;ftp://ftp.dd-wrt.com/betas/&#34;&gt;nowsze obrazy są dostępne w nieco innym
miejscu&lt;/a&gt;. Różnica między tymi obrazami jest taka, że te pierwsze są w
wersji stabilnej, a te drugie w wersji beta i wypuszczane tak średnio raz na tydzień. Przydałoby się
zatem co jakiś czas zaktualizować firmware DD-WRT do nowszej wersji.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DD-WRT: Jak wgrać firmware na router TP-LINK</title>
      <link>https://morfikov.github.io/post/dd-wrt-jak-wgrac-firmware-router-tp-link/</link>
      <pubDate>Wed, 07 Sep 2016 18:08:40 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/dd-wrt-jak-wgrac-firmware-router-tp-link/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://openwrt.org/&#34;&gt;OpenWRT&lt;/a&gt;/&lt;a href=&#34;https://lede-project.org/&#34;&gt;LEDE&lt;/a&gt; nie jest jedynym alternatywnym
firmware, który możemy wgrać na router TP-LINK&#39;a. Jest także &lt;a href=&#34;https://www.dd-wrt.com/site/&#34;&gt;projekt
DD-WRT&lt;/a&gt;, który oferuje oprogramowanie dla większości modeli routerów
tego producenta. Tak się składa, że mam router TL-WDR3600 i posiada on pełne wsparcie w DD-WRT.
Postanowiłem zatem zainstalować to oprogramowanie na tym urządzeniu i opisać jak wygląda cały proces
instalacyjny.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recenzja: Przenośny router 3G/4G TL-MR3020  od TP-LINK</title>
      <link>https://morfikov.github.io/post/recenzja-router-3g-4g-tl-mr3020-tp-link/</link>
      <pubDate>Tue, 30 Aug 2016 17:44:53 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/recenzja-router-3g-4g-tl-mr3020-tp-link/</guid>
      <description>&lt;p&gt;Coraz więcej użytkowników migruje od lokalnych providerów internetowych na technologię LTE, która
zapewnia nam połączenie z siecią globalną niezależnie od naszej fizycznej lokalizacji. Do obsługi
LTE potrzebny jest odpowiedni modem lub router WiFi, który już ma taki modem wbudowany. Jeśli
posiadamy modem LTE, to może się pojawić problem z udostępnianiem połączenia, np. w sieci domowej.
Jakby nie patrzeć taki modem jest przeznaczony na jedno urządzenie. Oczywiście w dalszym ciągu
możemy przerobić nasz router WiFi i dodać do niego obsługę modemów LTE ale takie rozwiązanie wymaga
firmware OpenWRT/LEDE. Istnieje prostsza alternatywa, która, można by rzec, działa OOTB i nie trzeba
się zbytnio wysilać przy jej implementacji. Musimy jednak posiadać odpowiednie urządzenie. W tym
artykule obadamy sobie &lt;a href=&#34;http://www.tp-link.com.pl/products/details/TL-MR3020.html&#34;&gt;przenośny router 3G/4G
TL-MR3020&lt;/a&gt; od TP-LINK.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kształtowanie ruchu z qos-scripts w OpenWRT</title>
      <link>https://morfikov.github.io/post/ksztaltowanie-ruchu-qos-scripts-openwrt/</link>
      <pubDate>Fri, 08 Jul 2016 18:00:54 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/ksztaltowanie-ruchu-qos-scripts-openwrt/</guid>
      <description>&lt;p&gt;Każdy bardziej zaawansowany administrator sieci prędzej czy później będzie chciał wdrożyć na swoim
routerze wyposażonym w firmware OpenWRT pewien mechanizm QoS umożliwiający kształtowanie ruchu
sieciowego. Ci, którzy się za ten temat zabierali, wiedzą, że nie jest on prosty w realizacji.
Zwłaszcza, gdy chce się cały ten system zarządzania pakietami skonfigurować od podstaw przy pomocy
narzędzi takich jak &lt;code&gt;iptables&lt;/code&gt; , &lt;code&gt;tc&lt;/code&gt; oraz &lt;code&gt;ip&lt;/code&gt; . Z tego też względu OpenWRT umożliwia nam nieco
prostszą w konfiguracji alternatywę polegającą na zainstalowaniu narzędzi zawartych w pakietach
&lt;code&gt;wshaper&lt;/code&gt; , &lt;code&gt;qos-scripts&lt;/code&gt; lub &lt;code&gt;sqm-scripts&lt;/code&gt; . Trzeba przy tym pamiętać, że mechanizm, który zostanie
stworzony z wykorzystaniem jednego z tych w/w pakietów nie będzie tak elastyczny jak przy ręcznej
konfiguracji od podstaw. Niemniej jednak, w tym artykule postaramy się ogarnąć kształtowanie ruchu
przy pomocy tych pakietów.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Różne adresy LAN i WLAN w OpenWRT (Routed AP)</title>
      <link>https://morfikov.github.io/post/rozne-adresy-lan-wlan-openwrt-routed-ap/</link>
      <pubDate>Thu, 07 Jul 2016 16:20:17 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/rozne-adresy-lan-wlan-openwrt-routed-ap/</guid>
      <description>&lt;p&gt;W standardowej konfiguracji OpenWRT, hosty łączące się za pomocą sieci bezprzewodowej jak i tej
przewodowej są spięte razem za pomocą mostka (bridge) i tworzą jedną sieć lokalną. Nie ma w tym nic
dziwnego, bo przecie chcemy, aby komunikacja między wszystkimi hostami w sieci LAN odbywała się bez
większych przeszkód. Przynajmniej takie jest standardowe podejście przy konfiguracji sieci domowej.
Niemniej jednak, w pewnych przypadkach istnieje potrzeba oddzielenia maszyn, które nawiązują
połączenie za pomocą sieci WiFi od tych, które łączą się przewodowo. Generalnie chodzi o różne
adresy, które zostaną przypisane sieciom LAN i WLAN. Rozwiązanie, które zostanie opisane w tym
artykule jest podobne do tworzenia &lt;a href=&#34;https://morfikov.github.io
/post/bezprzewodowa-siec-goscinna-guest-wlan/&#34;&gt;bezprzewodowej sieci
gościnnej&lt;/a&gt; (guest WLAN), z tą
różnicą, że w tym przypadku będziemy mieli do czynienia tylko z jedną siecią WiFi (tzw. &lt;a href=&#34;https://wiki.openwrt.org/doc/recipes/routedap&#34;&gt;Routed
AP&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bezprzewodowa sieć gościnna (guest WLAN)</title>
      <link>https://morfikov.github.io/post/bezprzewodowa-siec-goscinna-guest-wlan/</link>
      <pubDate>Wed, 06 Jul 2016 21:00:34 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/bezprzewodowa-siec-goscinna-guest-wlan/</guid>
      <description>&lt;p&gt;Routery WiFi zwykle oferują jedną sieć bezprzewodową, do której użytkownicy mogą się łączyć po
podaniu nazwy ESSID oraz hasła. W przypadku znanych nam osób chcących korzystać z udostępnianego
przez nas AP, taka sieć powinna nam w pełni wystarczyć. Problem jednak zaczyna się w przypadku tych
użytkowników, którym chcemy zezwolić na dostęp do naszej sieci WiFi ale nie darzymy ich zbytnio
wysokim kredytem zaufania. By ten problem rozwiązać, w OpenWRT możemy skonfigurować &lt;a href=&#34;https://wiki.openwrt.org/doc/recipes/guest-wlan&#34;&gt;mechanizm zwany
&amp;quot;guest WLAN&amp;quot;&lt;/a&gt;, czyli bezprzewodowa sieć gościnna. W
tym artykule zobaczymy jak odseparować od siebie hosty w sieci LAN od tych w sieci gościnnej.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja DMZ w OpenWRT</title>
      <link>https://morfikov.github.io/post/konfiguracja-dmz-openwrt/</link>
      <pubDate>Tue, 05 Jul 2016 18:05:31 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-dmz-openwrt/</guid>
      <description>&lt;p&gt;Strefa zdemilitaryzowana (&lt;a href=&#34;https://pl.wikipedia.org/wiki/Strefa_zdemilitaryzowana_(informatyka)&#34;&gt;DMZ, demilitarized
zone&lt;/a&gt;) to taki mechanizm,
który ma na celu poprawę bezpieczeństwa usług w sieci lokalnej. Generalnie chodzi o podział sieci
na kilka mniejszych podsieci i oddzielenie ich od siebie fizycznie lub logicznie. &lt;a href=&#34;https://wiki.openwrt.org/doc/howto/dmz&#34;&gt;W OpenWRT możemy
wydzielić taką strefę DMZ przy pomocy VLAN&#39;ów&lt;/a&gt;. Z kolei
odpowiednio skonfigurowany firewall odseparuje nam tę strefę od pozostałych maszyn pracujących w
sieci LAN. W taki sposób nawet w przypadku włamania mającego miejsce w strefie DMZ, maszyny w
pozostałych segmentach sieci będą bezpieczne. W tym wpisie postaramy się skonfigurować strefę
zdemilitaryzowaną na routerze wyposażonym w firmware OpenWRT.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sieciowy system plików w OpenWRT (NFS)</title>
      <link>https://morfikov.github.io/post/sieciowy-system-plikow-openwrt-nfs/</link>
      <pubDate>Sun, 26 Jun 2016 19:15:01 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/sieciowy-system-plikow-openwrt-nfs/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pl.wikipedia.org/wiki/Network_File_System_(protok%C3%B3%C5%82)&#34;&gt;Network File System&lt;/a&gt; to
sieciowy system plików, za pomocą którego maszyny mające na pokładzie system operacyjny linux, w tym
tez OpenWRT, są w stanie udostępniać pliki w sieci. Zatem NFS to głównie domena linux&#39;ów. W
przypadku windowsów można korzystać z protokołu SMB
(&lt;a href=&#34;https://pl.wikipedia.org/wiki/Samba_(program)&#34;&gt;samba&lt;/a&gt;). Sposób udostępniania zasobów przy pomocy
tego sieciowego systemu plików jest bardzo podobny do tego, który jest realizowany w przypadku
protokołu SSHFS. Zasadniczą różnicą między NFS i SSHFS jest brak szyfrowania komunikacji. W
warunkach domowej sieci, ta cecha raczej nie stanowi większego problemu. Poza tym, trzeba też brać
pod uwagę fakt, że szyfrowanie znacznie obciążyłoby router, co przełożyłoby się na spadek prędkości
transferu. W tym wpisie zobaczymy jak na routerze z OpenWRT zaimplementować protokół NFS i
udostępnić za jego pomocą zasoby w sieci lokalnej.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Serwer FTP na routerze z OpenWRT (vsftpd)</title>
      <link>https://morfikov.github.io/post/serwer-ftp-routerze-openwrt-vsftpd/</link>
      <pubDate>Thu, 23 Jun 2016 14:30:39 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/serwer-ftp-routerze-openwrt-vsftpd/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pl.wikipedia.org/wiki/File_Transfer_Protocol&#34;&gt;Usługa FTP&lt;/a&gt; jest w miarę wygodnym
rozwiązaniem w przypadku, gdy chcemy korzystać z zasobów udostępnianych przez router zarówno na
linux&#39;ach jak i na windowsach. Jedyne czego potrzebujemy to kawałek przeglądarki albo jakiegoś
klienta FTP. W tym protokole nie ma też znaczenia system plików, w którym znajdują się udostępniane
pliki. Jedyne co nas interesuje, to postawienie serwera na routerze i podanie klientom namiarów na
niego. W OpenWRT możemy do tego celu zaprzęgnąć &lt;code&gt;vsftpd&lt;/code&gt; . W tym wpisie pokażę jedynie jak tego typu
usługę uruchomić na domowym routerze WiFi i jak ją wstępnie skonfigurować. Wszelkie kwestie
techniczne związane z działaniem samego serwera FTP jak i jego wszystkich parametrów już opisywałem
przy okazji &lt;a href=&#34;https://morfikov.github.io
/post/konfiguracja-vsftpd-w-debianie/&#34;&gt;wdrażania vsftpd w dystrybucji
debian&lt;/a&gt;. Zachęcam zatem do zapoznania się
również z tym podlinkowanym wpisem.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Stałe nazwy urządzeń w OpenWRT (hotplug, udev)</title>
      <link>https://morfikov.github.io/post/stale-nazwy-urzadzen-openwrt-hotplug-udev/</link>
      <pubDate>Mon, 20 Jun 2016 16:46:48 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/stale-nazwy-urzadzen-openwrt-hotplug-udev/</guid>
      <description>&lt;p&gt;Bezprzewodowy router WiFi to w miarę proste urządzenie, które w zasadzie realizuje kilka
podstawowych aspektów pracy sieci domowej. Wielu użytkownikom jednak jest nieustannie potrzebna
jakaś nowa funkcjonalność, której oryginalny firmware producenta nie oferuje. Dlatego też mamy do
dyspozycji OpenWRT będący minimalistyczną formą bardziej rozbudowanej dystrybucji linux&#39;a. Może i
OpenWRT daje nam możliwość zaawansowanej konfiguracji naszej sieci ale tego typu opcja powoduje też
szereg problemów. Chodzi o to, że kernel dynamicznie tworzy nazwy dla wszystkich podłączanych
urządzeń do routera. W dużych dystrybucjach linux&#39;a do ogarnięcia tych nazw wykorzystywany jest
UDEV. W przypadku OpenWRT też możemy skorzystać tego mechanizmu. Jeśli jednak mamy niewiele miejsca
na pamięci flash routera, to możemy też skorzystać ze zdarzeń hotplug. W tym wpisie postaramy się
przepisać nazwy pendrive/dysków twardych oraz modemów USB (LTE), tak by ich kolejność podłączania do
routera nie stwarzała problemów w konfiguracji.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Most bezprzewodowy w OpenWRT (tryb WDS)</title>
      <link>https://morfikov.github.io/post/most-bezprzewodowy-openwrt-tryb-wds/</link>
      <pubDate>Sun, 19 Jun 2016 16:32:10 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/most-bezprzewodowy-openwrt-tryb-wds/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pl.wikipedia.org/wiki/Wireless_Distribution_System&#34;&gt;Tryb WDS (Wireless Distribution
System)&lt;/a&gt; umożliwia stworzenie mostu
bezprzewodowego, w którym to nadrzędny AP (Access Point) przekazuje pakiety do klientów WDS. Ci z
kolei przesyłają te pakiety dalej do podrzędnych AP. Z reguły routery posiadają funkcję WDS i po jej
aktywowaniu, ten drugi AP będzie wzmacniał i rozsyłał otrzymany sygnał dalej w granicach swojego
zasięgu. Tryb WDS nie jest jednak standardem i producenci firmware oraz sterowników implementują go
inaczej, co przekłada się na problemy z kompatybilnością. Jeśli chcemy korzystać z opcji WDS w
OpenWRT, to najlepiej posiadać kilka takich samych urządzeń i dobrze jest mieć na nich wgrane to
samo oprogramowanie. W tym wpisie zaprojektujemy sobie taki most bezprzewodowy w oparciu o dwa
routery firmy TP-LINK: &lt;a href=&#34;http://www.tp-link.com.pl/products/details/TL-WDR3600.html&#34;&gt;TL-WDR3600 v1&lt;/a&gt;
oraz &lt;a href=&#34;http://www.tp-link.com.pl/products/details/Archer-C7.html&#34;&gt;Archer C7 v2&lt;/a&gt;, na których jest
wgrany firmware OpenWRT Chaos Calmer 15.05.1 .&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja WISP w OpenWRT (tryb STA &#43; AP)</title>
      <link>https://morfikov.github.io/post/konfiguracja-wisp-openwrt-tryb-sta-ap/</link>
      <pubDate>Sat, 18 Jun 2016 22:13:09 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-wisp-openwrt-tryb-sta-ap/</guid>
      <description>&lt;p&gt;Routery wyposażone w firmware OpenWRT mają tę zaletę, że ich bezprzewodowe karty sieciowe można w
miarę dowolnie sobie skonfigurować. Oryginalne oprogramowanie producenta takiego sprzętu zwykle nie
umożliwia nam przełączenia kart routera w inny tryb niż AP (Access Point). W OpenWRT możemy ustawić
praktycznie dowolny tryb, o ile pozwala na to sterownik karty WiFi. W ten sposób możemy aktywować,
np. &lt;a href=&#34;https://morfikov.github.io
/post/karta-wifi-trybie-monitor-openwrt/&#34;&gt;tryb MONITOR&lt;/a&gt;. W tym wpisie jednak
będzie nas interesował tryb STA (STATION), czyli postaramy się przełączyć karty WiFi routera w tryb
klienta. Jest to bardzo przydatna opcja w przypadku, gdy mamy do czynienia z &lt;a href=&#34;https://pl.wikipedia.org/wiki/WISP&#34;&gt;Wireless Internet
Service Provider (WISP)&lt;/a&gt;, czyli bezprzewodowymi dostawcami
internetu.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Karta WiFi w trybie MONITOR w OpenWRT</title>
      <link>https://morfikov.github.io/post/karta-wifi-trybie-monitor-openwrt/</link>
      <pubDate>Wed, 15 Jun 2016 20:33:34 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/karta-wifi-trybie-monitor-openwrt/</guid>
      <description>&lt;p&gt;Routery WiFi, zwłaszcza te na podzespołach firmy Qualcomm, mają zwykle bardzo dobre wsparcie w
alternatywnym firmware OpenWRT. Te bezprzewodowe routery posiadają na pokładzie zwykle jedną lub
dwie karty WiFi, w zależności od obsługiwanego pasma (2,4 GHz i/lub 5 GHz). Karty tych routerów
działają standardowo w trybie AP (Access Point), czyli &lt;a href=&#34;https://pl.wikipedia.org/wiki/Punkt_dost%C4%99pu&#34;&gt;punktu
dostępowego&lt;/a&gt;. W taki sposób jesteśmy w stanie
bezprzewodowo połączyć szereg urządzeń w sieci domowej z internetem. Niemniej jednak, karta WiFi
może pracować w kilku innych trybach. W tym wpisie zobaczymy jak przełączyć kartę WiFi routera w
tryb MONITOR.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Router OpenWRT jako serwer i klient RADIUS</title>
      <link>https://morfikov.github.io/post/router-openwrt-jako-serwer-klient-radius/</link>
      <pubDate>Wed, 15 Jun 2016 07:17:07 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/router-openwrt-jako-serwer-klient-radius/</guid>
      <description>&lt;p&gt;Ten poniższy artykuł ma na celu pokazanie w jaki sposób stworzyć infrastrukturę WiFi w oparciu o
oprogramowanie &lt;code&gt;freeradius&lt;/code&gt; (serwer RADIUS), które zostanie zainstalowane na przykładowym routerze
&lt;a href=&#34;http://www.tp-link.com.pl/products/details/Archer-C7.html&#34;&gt;TP-Link Archer C7 v2&lt;/a&gt;. Router ma wgrany
firmware OpenWRT Chaos Calmer w wersji 15.05.1 (r49294). Zostanie tutaj opisane dokładnie jak
wdrożyć protokół WPA2 Enterprise z obsługą trzech metod uwierzytelniania: EAP-TLS, EAP-TTLS oraz
PEAP (v0) .&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Losowy adres MAC dla WAN w OpenWRT</title>
      <link>https://morfikov.github.io/post/losowy-adres-mac-dla-wan-w-openwrt/</link>
      <pubDate>Sun, 05 Jun 2016 18:28:12 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/losowy-adres-mac-dla-wan-w-openwrt/</guid>
      <description>&lt;p&gt;Na dużych dystrybucjach linux&#39;a adres MAC można zmienić bez problemu. Podobnie sprawa ma się w
przypadku &lt;a href=&#34;https://morfikov.github.io
/post/jak-przypisac-losowy-adres-mac-interfejsu/&#34;&gt;automatycznego generowania takiego adresu
MAC&lt;/a&gt; za każdym razem, gdy chcemy
nawiązać połączenie z internetem. W OpenWRT rozwiązanie tego zadania nie jest tak oczywiste jak, np.
na debianie, ale też znowu nie jest niemożliwe. W repozytorium OpenWRT mamy dostępny pakiet
&lt;code&gt;macchanger&lt;/code&gt; . Niemniej jednak, w przypadku routerów o małych pamięciach flash, instalowanie
dodatkowych pakietów może nie być dobrym pomysłem. Przydałoby się zatem zaprojektować mechanizm
generowania i zmiany adresu MAC interfejsu WAN za każdym razem, gdy będziemy resetować router i to
zadanie postaramy się zrealizować w tym artykule.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recenzja: router TP-LINK TL-WR1043ND v2</title>
      <link>https://morfikov.github.io/post/recenzja-sprzetu-router-tp-link-tl-wr1043nd-v2/</link>
      <pubDate>Tue, 31 May 2016 15:14:24 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/recenzja-sprzetu-router-tp-link-tl-wr1043nd-v2/</guid>
      <description>&lt;p&gt;Jednym z popularniejszych routerów bezprzewodowych firmy TP-LINK jest model &lt;a href=&#34;http://www.tp-link.com.pl/products/details/TL-WR1043ND.html&#34;&gt;TL-WR1043ND
v2&lt;/a&gt; . Dlaczego ten router jest tak
rozchwytywany? Wytłumaczenie tkwi w alternatywnym firmware OpenWRT, który daje znaczne możliwości
rozbudowania funkcjonalności tego urządzenia. Jest to chyba jeden z najlepiej wpieranych przez
OpenWRT modeli, co zapewnia bezproblemowe użytkowanie. Niewątpliwą zaletą TL-WR1043ND v2 jest dość
silne WiFi, choć mamy do dyspozycji tylko pamso 2,4 GHz. Standardowo na wyposażeniu mamy także
gigabitowy switch 5-cio portowy oraz tylko jeden port USB 2.0. Przy czym, ten jeden port USB nie
powinien nam zbytnio przeszkadzać, zwłaszcza jeśli dysponujemy aktywnym hubem USB. W tym wpisie
przyjrzymy się nieco bliżej temu routerowi.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recenzja: router TP-LINK Archer C7 v2</title>
      <link>https://morfikov.github.io/post/recenzja-router-tp-link-archer-c7-v2/</link>
      <pubDate>Mon, 30 May 2016 22:23:26 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/recenzja-router-tp-link-archer-c7-v2/</guid>
      <description>&lt;p&gt;Routery bezprzewodowe to bardzo użyteczne urządzenia i na dobrą sprawę każdy dom powinien posiadać
jeden taki wynalazek. Na rynku jest cała masa sprzętu WiFi, który w większości przypadków zaspokoi
gust kupujących ale też trzeba wziąć pod uwagę fakt, że nie wszystkie routery posiadają pożądane
przez nas ficzery. Część routerów ma tylko jedno radio, zwykle o zakresie 2,4 GHz. Te droższe modele
mają także radio 5GHz. Routery różnią się także ilością portów w switch&#39;u, ilością pamięci RAM,
częstotliwością pracy procesora, no i rozmiarem pamięci flash. Wszystkie te cechy trzeba wziąć pod
uwagę przy próbie ewentualnego zakupu routera bezprzewodowego. Oczywiście spora część z tych
gabarytów będzie miała znaczenie tylko w przypadku zainstalowania alternatywnego firmware, np.
OpenWRT. Niemniej jednak, dobrze zdawać sobie sprawę z tego co dany router ma pod obudową. W tym
wpisie zostanie przedstawiony router &lt;a href=&#34;http://www.tp-link.com.pl/products/details/Archer-C7.html&#34;&gt;TP-LINK Archer C7
v2&lt;/a&gt;, obsługujący pasma 2.4 GHz i 5 GHz,
mający 128 MiB pamięci RAM, 16 MiB flash, gigabitowy switch 5-cio portowy i dwa porty USB 2.0 .&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Statystyki routera w OpenWRT (collectd, rrdtool)</title>
      <link>https://morfikov.github.io/post/statystyki-openwrt-collectd-rrdtool/</link>
      <pubDate>Thu, 19 May 2016 21:38:00 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/statystyki-openwrt-collectd-rrdtool/</guid>
      <description>&lt;p&gt;Domowe routery WiFi chodzą zwykle 24 godziny na dobę. Ich moc obliczeniowa, choć zwykle niewielka,
czasem się marnuje. Mając router z OpenWRT, możemy przerobić go tak, by zbierał różnego rodzaju dane
dla statystyki. Te dane mogą pochodzić z różnych źródeł i nie koniecznie muszą one dotyczyć samego
routera. Tego typu funkcjonalność mogą zapewnić nam narzędzia &lt;code&gt;collectd&lt;/code&gt; oraz &lt;code&gt;rrdtool&lt;/code&gt; . W tym
artykule spróbujemy zaprogramować router, by zbierał pewne dane dotyczące połączenia sieciowego. Na
podstawie tych informacji będą rysowane wykresy, które nastepnie będą udostępniane przez serwer
&lt;code&gt;uhttpd&lt;/code&gt; .&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quality of Service (QoS) w OpenWRT</title>
      <link>https://morfikov.github.io/post/quality-service-qos-w-openwrt/</link>
      <pubDate>Thu, 19 May 2016 15:07:54 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/quality-service-qos-w-openwrt/</guid>
      <description>&lt;p&gt;Wszyscy spotkaliśmy się z sytuacją, w której z bliżej nieokreślonego powodu nie mogliśmy przeglądać
stron w internecie. Niby połączenie jest, mamy też dobrej klasy ISP ale net nam muli. W olbrzymiej
części przypadków winą można obarczyć sieć &lt;a href=&#34;https://pl.wikipedia.org/wiki/Peer-to-peer&#34;&gt;Peer to Peer
(P2P)&lt;/a&gt;. Przy nieodpowiedniej konfiguracji klientów tej
sieci może dojść do nawiązywania całej masy połączeń w ułamku chwili. W ten sposób nawet jeśli nic
aktualnie nie wysyłamy lub nie pobieramy, to i tak te połączenia same w sobie zapychają łącze, no bo
przecież nawet puste pakiety w protokołach TCP/UDP zawierają nagłówki, a te już swoje ważą. Gdy sami
korzystamy z łącza, to taka sytuacja nie stanowi większego problemu, bo wystarczy odpalić klienta
torrent&#39;a w wolnym czasie. Natomiast w przypadku, gdy zachodzi potrzeba wejścia na jakiś serwis www,
to możemy zwyczajnie tego klienta wyłączyć. Nie jest to jednak wygodne. Jak zatem wyeliminować
problemy związane z siecią P2P? Jeśli na routerze mamy wgrany firmware OpenWRT, to możemy
zaimplementować na nim &lt;a href=&#34;https://pl.wikipedia.org/wiki/Quality_of_service&#34;&gt;mechanizm QoS (Qality of
Service)&lt;/a&gt;. W ten sposób możemy nadać usługom
priorytety. W niniejszym wpisie postaramy się wdrożyć takie rozwiązanie w oparciu o narzędzia
&lt;code&gt;iptables&lt;/code&gt; oraz &lt;code&gt;tc&lt;/code&gt; .&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Failover i load balancing w OpenWRT (mwan3)</title>
      <link>https://morfikov.github.io/post/failover-load-balancing-openwrt-mwan3/</link>
      <pubDate>Sun, 15 May 2016 13:37:08 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/failover-load-balancing-openwrt-mwan3/</guid>
      <description>&lt;p&gt;Może się zdarzyć tak, że będziemy mieli kiedyś dostęp do łącz kilku różnych providerów
internetowych. Jeśli chcielibyśmy skorzystać z internetu w takiej sytuacji, to trzeba by się
zdecydować na jednego z tych dostępnych ISP. Natomiast łącze pozostałych ISP będzie niewykorzystane
w tym danym momencie, a przecie nie za to im płacimy. Jeśli mamy router z OpenWRT i
&lt;a href=&#34;https://morfikov.github.io
/post/podzial-switcha-na-kilka-vlan-w-openwrt/&#34;&gt;skonfigurowaliśmy przy tym switch tak, by mieć kilka portów
WAN&lt;/a&gt;, to możemy korzystać z usług
wielu ISP w tym samym czasie. Oczywiście, ten mechanizm działa również w przypadku, gdy ISP świadczy
nam usługi za pomocą technologi LTE. Trzeba tylko odpowiednio &lt;a href=&#34;https://morfikov.github.io
/post/modem-lte-pod-openwrt/&#34;&gt;skonfigurować modem USB do pracy na
routerze&lt;/a&gt;. W tym artykule zostanie opisane &lt;a href=&#34;https://wiki.openwrt.org/doc/howto/mwan3&#34;&gt;narzędzie
mwan3&lt;/a&gt;, za pomocą którego zaprojektujemy sobie prosty
failover (łącze awaryjne) lub load balancing (równoważenie ruchu) mając do wykorzystania dwóch
różnych ISP.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Wake On LAN z etherwake pod OpenWRT</title>
      <link>https://morfikov.github.io/post/wake-lan-z-etherwake-pod-openwrt/</link>
      <pubDate>Wed, 11 May 2016 21:39:37 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/wake-lan-z-etherwake-pod-openwrt/</guid>
      <description>&lt;p&gt;Router wyposażony w firmware OpenWRT potrafi wybudzać maszyny w sieci lokalnej. &lt;a href=&#34;https://pl.wikipedia.org/wiki/Wake_on_LAN&#34;&gt;Wake On LAN
(WOL)&lt;/a&gt; nie działa przez internet, a jedynie, jak sama
nazwa sugeruje, w sieci LAN. W tym mechanizmie wykorzystywany jest
&lt;a href=&#34;https://pl.wikipedia.org/wiki/Broadcast&#34;&gt;broadcast&lt;/a&gt;, a routery nie forward&#39;ują pakietów
rozgłoszeniowych. Oczywiście, nic nie stoi na przeszkodzie, by zalogować się na router via SSH od
strony WAN i wybudzić jakąś maszynę z poziomu routera. Komputery, które chcemy budzić muszą mieć
odpowiednią płytę główną. Prawdopodobnie wszystkie nowsze płyty już taką właściwość posiadają.
Dodatkowo, trzeba w BIOS&#39;ie ustawić odpowiednie opcje. Ważną rzeczą jest, by nie wyłączać PC
przyciskiem w obudowie (lub na zasilaczu), bo wtedy nie będzie możliwe wybudzenie maszyny, nawet po
dostarczeniu jej zasilania. Wyłączenia maszyny musimy dokonać z poziomu systemu operacyjnego, tylko
wtedy WOL zadziała. W tym wpisie pokażemy jak przy pomocy &lt;code&gt;etherwake&lt;/code&gt; wybudzić określonego hosta w
sieci LAN.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Drukarka sieciowa w OpenWRT (serwer wydruku)</title>
      <link>https://morfikov.github.io/post/drukarka-sieciowa-w-openwrt-serwer-wydruku/</link>
      <pubDate>Wed, 11 May 2016 19:32:50 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/drukarka-sieciowa-w-openwrt-serwer-wydruku/</guid>
      <description>&lt;p&gt;OpenWRT daje możliwość doinstalowania całej masy aplikacji, które są w stanie realizować pewne dość
wyrafinowane zadania. Jednym z takich zadań jest serwer wydruku, czyli możliwość obsługi różnego
rodzaju drukarek. Jeśli nasz router posiada port USB, to taką drukarkę jesteśmy w stanie do niego
podłączyć. Nawet jeśli router dysponuje tylko jednym portem USB i do tego zajętym już, to nic nie
stoi na przeszkodzie, by dokupić HUB&#39;a i rozgałęzić sobie ten pojedynczy port. Serwer wydruku ma tę
zaletę, że drukarka jest udostępniana przez router w sieci domowej. W efekcie odpada nam
utrzymywanie dedykowanego komputera, który zajmowałby się tylko obsługą takiej drukarki. Możemy
zatem oszczędzić nieco na rachunku za prąd. W tym wpisie skonfigurujemy sobie właśnie taki serwer
wydruku w oparciu o drukarkę EPSON Stylus Color 760 i oprogramowanie &lt;code&gt;p910nd&lt;/code&gt; .&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak zablokować Facebook i YouTube w OpenWRT</title>
      <link>https://morfikov.github.io/post/jak-zablokowac-facebook-youtube-openwrt/</link>
      <pubDate>Tue, 10 May 2016 22:17:38 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-zablokowac-facebook-youtube-openwrt/</guid>
      <description>&lt;p&gt;Serwisy społecznościowe takie jak Facebook, Twitter czy YouTube coraz bardziej dają się we znaki
przedsiębiorcom, który muszą cały czas pilnować, by ich pracownicy nie siedzieli ciągle w
internecie, przynajmniej w czasie pracy. Problem nagminnego przebywania w tych w/w portalach można
bardzo łatwo rozwiązać przez... porozmawianie z pracownikami. No może nie zawsze ale co nam szkodzi
spróbować? W przypadku, gdy upomnienia nie są w stanie zmusić ludzi w naszej firmie do pracy, a nie
możemy przy tym ich zwolnić, to możemy pójść o krok dalej i spróbować im założyć blokadę na te
powyższe serwisy. Oczywiście blokada szeregu adresów IP nie wchodzi w rachubę. Korporacje typu
Facebook czy Google mają wiele adresów IP na których świadczą swoje usługi. Nie wszystkie z nich są
uwzględniane na różnego rodzaju listach. Niemniej jednak, tak na dobrą sprawę to nie musimy nawet
znać tych adresów. Jedyne czego nam potrzeba to nazwa domeny oraz kilka pakietów standardowo
dostępnych w repozytorium OpenWRT. Mowa o &lt;code&gt;iptables&lt;/code&gt; , &lt;code&gt;dnsmasq&lt;/code&gt; oraz &lt;code&gt;ipset&lt;/code&gt; . W OpenWRT, przy
pomocy tych narzędzi możemy zaprojektować filtr, który może zablokować ludziom z naszej sieci dostęp
do praktycznie każdego serwisu www. W tym artykule zobaczymy jak taki filtr skonstruować.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Filtr pakietów sieciowych w OpenWRT (firewall)</title>
      <link>https://morfikov.github.io/post/filtr-pakietow-sieciowych-w-openwrt-firewall/</link>
      <pubDate>Mon, 09 May 2016 23:26:58 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/filtr-pakietow-sieciowych-w-openwrt-firewall/</guid>
      <description>&lt;p&gt;Router wyposażony w firmware OpenWRT posiada wbudowany firewall, który ma za zadnie stać na straży
bezpieczeństwa naszej sieci domowej. Standardowo ta zapora przepuszcza cały ruch sieciowy z obszaru
LAN do WAN, czyli z sieci lokalnej do sieci naszego ISP. W ten sposób komputery znajdujące się w
naszej sieci mają dostęp do internetu i mogą z niego korzystać bez przeszkód. Niemniej jednak, ten
mechanizm nie działa tak samo w drugą stronę, czyli z WAN do LAN. Tutaj są już blokowane wszystkie
próby nawiązania nowych połączeń (&lt;a href=&#34;https://morfikov.github.io
/post/kompromitacja-firewalla-openwrt-za-sprawa-ping/&#34;&gt;za wyjątkiem żądań
ping&lt;/a&gt;) ale nic nie stoi na
przeszkodzie, by zastosować przekierowanie portów. Dzięki takiemu rozwiązaniu możemy przekierować
ruch, który jest kierowany na dany port w routerze, do określonego hosta w sieci lokalnej. Wszystkie
te zadania realizowane są przez &lt;code&gt;iptables&lt;/code&gt; i w tym wpisie postaramy się ogarnąć to narzędzie.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NAT Reflection oraz NAT Loopback w OpenWRT</title>
      <link>https://morfikov.github.io/post/nat-reflection-oraz-nat-loopback-w-openwrt/</link>
      <pubDate>Mon, 09 May 2016 22:09:47 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/nat-reflection-oraz-nat-loopback-w-openwrt/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Network_address_translation#NAT_loopback&#34;&gt;Mechanizm NAT Loopback&lt;/a&gt;
nazywany też NAT Reflection lub NAT Hairpinning często jest pomijany przy omawianiu tematyki
firewall&#39;a. Chodzi generalnie o możliwość uzyskiwania dostępu do zasobów w sieci lokalnej po
adresie, który jest na zewnętrznym interfejsie sieciowym routera. W taki sposób mając dwa hosty w
sieci lokalnej, jeden z nich jest w stanie uzyskać dostęp do usług znajdujących się na drugim hoście
przez wykorzystanie zewnętrznego często też publicznego adresu IP. W tym wpisie przybliżymy sobie
zasadę działania tego mechanizmu.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kompromitacja firewall&#39;a OpenWRT za sprawą ping</title>
      <link>https://morfikov.github.io/post/kompromitacja-firewalla-openwrt-za-sprawa-ping/</link>
      <pubDate>Mon, 09 May 2016 15:40:47 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/kompromitacja-firewalla-openwrt-za-sprawa-ping/</guid>
      <description>&lt;p&gt;Ten standardowy firewall, który oferuje OpenWRT, ma w zamiarze blokować wszystkie nowe próby
połączeń od strony WAN. Faktycznie tak jest w istocie. Niemniej jednak, mamy tam jedną regułę,
która zezwala na wysyłanie żądań &lt;code&gt;ping&lt;/code&gt; . Niby te żądania wydają się być niepozorne ale przy takiej
konfiguracji &lt;code&gt;iptables&lt;/code&gt; jaką oferuje OpenWRT istnieje ryzyko, że ktoś z zewnątrz może utworzyć sporo
sesji bez jakiegokolwiek nadzoru. Każda z tych sesji musi być śledzona przez kernel w tablicy
conntrack&#39;a. Nie mając kontroli nad tym ile takich sesji może zostać utworzonych, łatwo może dojść
do zapełnienia tej tablicy. Jeśli do tego dojdzie, to router przestanie nawiązywać nowe połączenia.
Przydałoby się zatem jakoś ten cały &lt;code&gt;ping&lt;/code&gt; ogarnąć i to niekoniecznie blokując go po stronie WAN. W
tym wpisie zaimplementujemy sobie mechanizm ochrony przez tego typu zagrożeniem.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WPS, czyli WiFi Protected Setup w OpenWRT</title>
      <link>https://morfikov.github.io/post/wps-czyli-wifi-protected-setup-w-openwrt/</link>
      <pubDate>Thu, 05 May 2016 18:04:55 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/wps-czyli-wifi-protected-setup-w-openwrt/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Wi-Fi_Protected_Setup&#34;&gt;Wi-Fi Protected Setup (WPS)&lt;/a&gt; powstał w celu
ułatwienia konfiguracji urządzeń w sieci WiFi. Przy WPS nie musimy ustawiać wszystkich parametrów
połączenia ręcznie. Nie musimy także pamiętać nazwy sieci czy samego hasła, które może mieć nawet 64
znaki. Zamiast tego, cała konfiguracja sprowadza się to wciśnięcia dwóch przycisków: jednego na
karcie WiFi, drugiego na obudowie routera. Niemniej jednak, wszędzie gdzie nie spojrzeć, ludzie
rozpisują się na temat tego jakim to niebezpieczeństwem jest włączenie w routerach WiFi opcji WPS. O
tych zagrożeniach, jeśli kogoś interesują, można poczytać, np.
&lt;a href=&#34;https://dankaminsky.com/2012/01/26/wps2/&#34;&gt;tutaj&lt;/a&gt;. W tym wpisie rozprawimy się raz na zawsze z
mitami dotyczącymi WPS, który jest implementowany w routerach WiFi. Postaramy się skonfigurować ten
mechanizm pod OpenWRT i zobaczymy czy cokolwiek z tego co ludzie piszą na necie ma zastosowanie w
praktyce.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Automatyczna blokada internetu LTE w OpenWRT</title>
      <link>https://morfikov.github.io/post/automatyczna-blokada-internetu-lte-w-openwrt/</link>
      <pubDate>Thu, 05 May 2016 15:20:14 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/automatyczna-blokada-internetu-lte-w-openwrt/</guid>
      <description>&lt;p&gt;Jakiś czas temu opisywałem &lt;a href=&#34;https://morfikov.github.io
/post/darmowy-internet-lte-od-rbmplay/&#34;&gt;darmowy internet LTE w
RBM/PLAY&lt;/a&gt;. Jego niewątpliwą zaletą jest
fakt, że jest za free, o ile posiadamy odpowiedni modem. Niemniej jednak, ta usługa jest na 30 dni,
po upływie których trzeba ją aktywować na nowo. Jeśli z jakichś przyczyn się tego nie zrobi, to
wtedy korzystanie z internetu może nas słono kosztować. Niby można zaprzęgnąć do pomocy &lt;a href=&#34;https://morfikov.github.io
/post/gammu-smsd-czyli-wysylanie-odbieranie-sms/&#34;&gt;gammu-smsd,
który będzie nas powiadamiał
SMS&#39;em&lt;/a&gt;, że usługa została
wyłączona lub włączona. Niemniej jednak, w dalszym ciągu pozostaje do ogarnięcia kwestia czasu,
przez który czekamy na włączenie usługi. Najlepszym wyjściem jest całkowita blokada internetu na
routerze, tak by przez ten moment nie nawiązać żadnego połączenia. Jeśli nie nawiążemy połączenia,
to dane z pakietu danych nie będą nam uciekać. W momencie, gdy usługa zostanie aktywowana, to
blokada będzie zdejmowana. Tego typu rozwiązanie można zaimplementować w OpenWRT za sprawą
&lt;a href=&#34;http://smstools3.kekekasvi.com/&#34;&gt;oprogramowania smstools&lt;/a&gt; dostępnego w pakiecie &lt;code&gt;smstools3&lt;/code&gt; . W tym
wpisie postaramy się zaprojektować swojego rodzaju automatyczne blokowanie internet w zależności od
otrzymywanych komunikatów od operatora GSM.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sieć bezprzewodowa WiFi w OpenWRT (WLAN)</title>
      <link>https://morfikov.github.io/post/siec-bezprzewodowa-wifi-w-openwrt-wlan/</link>
      <pubDate>Wed, 04 May 2016 20:26:35 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/siec-bezprzewodowa-wifi-w-openwrt-wlan/</guid>
      <description>&lt;p&gt;Sieć bezprzewodowa w dzisiejszych czasach to podstawa. Z reguły routery posiadają jedno radio
operujące na częstotliwości 2,4 GHz. Te nieco nowsze (i droższe) modele mają do dyspozycji dwa
radia: 2,4 GHz oraz 5 GHz. OpenWRT zapewnia wsparcie zarówno dla sieci pracującej w paśmie 2.4 GHz
jak i tej nadającej w 5 GHz. Konfiguracja tych pasm w OpenWRT różni się nieco. Weźmy dla przykładu
obsługę kanału 12 i 13, którą dotyczy tylko sieci pasma 2.4 GHz. Podobnie sprawa ma się z
szerokością kanałów, która jest inna w przypadku obu tych pasm. Niemniej jednak, większość opcji
pozostaje taka sama i w tym artykule rzucimy okiem na zagadnienie konfiguracji sieci WiFi w OpenWRT.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Podział switch&#39;a na kilka VLAN&#39;ów w OpenWRT</title>
      <link>https://morfikov.github.io/post/podzial-switcha-na-kilka-vlan-w-openwrt/</link>
      <pubDate>Tue, 03 May 2016 20:49:50 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/podzial-switcha-na-kilka-vlan-w-openwrt/</guid>
      <description>&lt;p&gt;Każdy router ma w swoim wyposażeniu
&lt;a href=&#34;https://pl.wikipedia.org/wiki/Prze%C5%82%C4%85cznik_sieciowy&#34;&gt;switch&lt;/a&gt;, czyli przełącznik
umożliwiający rozdzielenie sygnału na kilka portów. W ten sposób przy pomocy przewodu możemy
podłączyć więcej komputerów niż by to miało miejsce w przypadku posiadania tylko jednego gniazda
&lt;a href=&#34;https://pl.wikipedia.org/wiki/RJ-45&#34;&gt;RJ-45&lt;/a&gt;. Na oryginalnym firmware zwykle nie mamy możliwości
dodatkowej konfiguracji switch&#39;a. Z kolei ta co jest, oferuje nam jedynie jeden port WAN i kilka
portów dla podłączenia komputerów w sieci lokalnej. Jeśli jednak pokusilibyśmy się o wgranie OpenWRT
na nasz router, to będziemy mieli możliwość zarządzania konfiguracją switch&#39;a. W ten sposób będziemy
mogli tworzyć dowolne konfiguracje portów (VLAN), wliczając w to utworzenie, np. kilku portów WAN.
Tego typu rozwiązanie może się przydać do bardziej zaawansowanych konfiguracji sieciowych, np.
&lt;a href=&#34;https://en.wikipedia.org/wiki/Failover&#34;&gt;failover łącza&lt;/a&gt; czy &lt;a href=&#34;https://pl.wikipedia.org/wiki/R%C3%B3wnowa%C5%BCenie_obci%C4%85%C5%BCenia&#34;&gt;load
balancing&lt;/a&gt; w przypadku,
gdy posiadamy kilku ISP i chcemy wykorzystać w pełni łącze oferowane przez te podmioty.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja interfejsów sieciowych w OpenWRT</title>
      <link>https://morfikov.github.io/post/konfiguracja-interfejsow-sieciowych-w-openwrt/</link>
      <pubDate>Tue, 03 May 2016 02:08:31 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-interfejsow-sieciowych-w-openwrt/</guid>
      <description>&lt;p&gt;Routery, które posiadamy w naszych domach, znane są z tego, że mają szereg interfejsów sieciowych.
Taki przeciętny router jest wyposażony w
&lt;a href=&#34;https://pl.wikipedia.org/wiki/Prze%C5%82%C4%85cznik_sieciowy&#34;&gt;switch&lt;/a&gt; z 5 portami
&lt;a href=&#34;https://pl.wikipedia.org/wiki/RJ-45&#34;&gt;RJ-45&lt;/a&gt;. Zwykle jest on też &lt;a href=&#34;https://pl.wikipedia.org/wiki/Wirtualna_sie%C4%87_lokalna&#34;&gt;wirtualnie podzielony
(VLAN)&lt;/a&gt; na kilka interfejsów, standardowo
LAN i WAN. Do tego z reguły dochodzą jeszcze interfejsy bezprzewodowe WLAN na pasmo 2.5GHz i 5GHz.
Jakby tego było mało, to mamy jeszcze wirtualny interfejs mostka, który spina ze sobą lokalne
interfejsy switch&#39;a z interfejsami bezprzewodowymi tworząc w ten sposób jeden interfejs, przez który
pakiety wydostają się z naszej sieci i lecą dalej w świat przez interfejs WAN. Jest to trochę
skomplikowane, dlatego też w tym wpisie przyjrzymy się całej tej konfiguracji interfejsów sieciowych
w OpenWRT.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak sklonować adres MAC w OpenWRT</title>
      <link>https://morfikov.github.io/post/jak-sklonowac-adres-mac-w-openwrt/</link>
      <pubDate>Mon, 02 May 2016 17:25:31 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-sklonowac-adres-mac-w-openwrt/</guid>
      <description>&lt;p&gt;Każde urządzenie sieciowe ma inny &lt;a href=&#34;https://pl.wikipedia.org/wiki/Adres_MAC&#34;&gt;adres MAC&lt;/a&gt;. Jest to
numer, który identyfikuje je w strukturze sieci. Gdy zachodzi potrzeba rozbudowania sieci domowej,
możemy napotkać problemy z naszym obecnym ISP. Załóżmy, że posiadaliśmy do tej pory jeden komputer,
który był wpięty bezpośrednio do łącza ISP. Jeśli dokupiliśmy router i podłączymy go w miejsce
komputera, to urządzenie, które widzi nasz provider, ulega zmianie. Konkretnie, to nie ma znaczenia
samo urządzenie. Liczy się jedynie adres MAC. Providerzy internetowi mają powiązane adresy MAC z
adresami IP i nowo wpięty router nie otrzyma adresu IP, bo ma nieautoryzowany MAC. W takiej sytuacji
zwykle wystarczy telefon do ISP z prośbą przepisanie adresu. Niemniej jednak, czasami ISP każą sobie
dodatkowo płacić za tę czynność. Jeśli jesteśmy postawieni w takiej sytuacji, to możemy sklonować
sobie adres MAC tej maszyny, którą wcześniej widział nasz provider internetowy. Z jego perspektywy
nic się nie zmieni, a my będziemy mogli sobie rozdzielić sygnał na tyle komputerów, ile tylko
chcemy. W tym wpisie zobaczymy jak pod OpenWRT przeprowadzić klonowanie adresu MAC.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DHCP i DNS, czyli konfiguracja sieci w OpenWRT</title>
      <link>https://morfikov.github.io/post/dhcp-dns-czyli-konfiguracja-sieci-w-openwrt/</link>
      <pubDate>Mon, 02 May 2016 16:21:20 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/dhcp-dns-czyli-konfiguracja-sieci-w-openwrt/</guid>
      <description>&lt;p&gt;Rutery WiFi są w stanie zorganizować przewodową i/lub bezprzewodową sieć w naszych domach. By taka
sieć działała bez zarzutu, potrzebna jest odpowiednia adresacja wszystkich komputerów wewnątrz niej.
W obecnych czasach już praktycznie nie stosuje się statycznej konfiguracji, bo to zadanie zostało
zrzucone na barki serwera DHCP. W OpenWRT do tego celu oddelegowane jest &lt;a href=&#34;http://www.thekelleys.org.uk/dnsmasq/doc.html&#34;&gt;oprogramowanie
dnsmasq&lt;/a&gt;. Zapewnia ono nie tylko wspomniany wyżej
serwer DHCP ale także serwer cache&#39;ujący zapytania DNS. Ten drugi z kolei jest niezastąpiony w
przypadku przekazywania zapytań o nazwy domen do upstream&#39;owego serwera DNS, który zajmuje się
rozwiązywaniem tych nazw na odpowiadające im adresy IP. Bez &lt;code&gt;dnsmasq&lt;/code&gt; ogarnięcie naszej sieci
przerodziłoby się w istne piekło. Dlatego też w tym artykule przybliżymy sobie nieco konfigurację
tego narzędzia.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja przycisków w OpenWRT</title>
      <link>https://morfikov.github.io/post/konfiguracja-przyciskow-w-openwrt/</link>
      <pubDate>Sat, 30 Apr 2016 20:00:19 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-przyciskow-w-openwrt/</guid>
      <description>&lt;p&gt;Każdy router w standardzie ma na swojej obudowie kilka przycisków. Zwykle są to przyciski zasilania,
restartu i przełącznik sieci bezprzewodowej. Różnie są one oznaczane i można się spotkać z QSS, WPS,
reset czy WiFi. O ile z przyciskiem zasilania nic więcej się nie da zrobić, bo po naciśnięciu go
router jest odcinany od źródła zasilania ale w przypadku pozostałych przycisków mamy zwykle pełną
swobodę w ich konfiguracji i można je sobie odpowiednio zaprogramować. Oczywiście trzeba widzieć jak
tego dokonać i dlatego właśnie powstał ten artykuł.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja diod w routerze pod OpenWRT (LED)</title>
      <link>https://morfikov.github.io/post/konfiguracja-diod-w-routerze-pod-openwrt-led/</link>
      <pubDate>Sat, 30 Apr 2016 17:11:47 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-diod-w-routerze-pod-openwrt-led/</guid>
      <description>&lt;p&gt;Praktycznie każdy router posiada szereg diod LED, które wizualizują stan pracy takiego urządzenia. W
taki sposób jesteśmy w stanie stwierdzić czy sieć WiFi jest aktualnie włączona albo czy odbywa się
wymiana danych za jej pomocą. Podobnie możemy ocenić aktywność mechanizmu WPS oraz czy połączenie
przewodowe zostało ustanowione. Routery TP-LINK&#39;a mają także w standardzie diodę &lt;code&gt;system&lt;/code&gt; , która
informuje nas czy router działa prawidłowo i nie uległ powieszeniu. W OpenWRT wszystkie te wyżej
opisane właściwości można skonfigurować, tak by dioda LED reagowała w określony sposób na pewne
zaistniałe zdarzenie. W tym wpisie przyjrzymy się bliżej konfiguracji diod routera.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Szyfrowanie logów w OpenWRT (syslog-ng)</title>
      <link>https://morfikov.github.io/post/szyfrowanie-logow-w-openwrt-syslog-ng/</link>
      <pubDate>Fri, 29 Apr 2016 02:36:00 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/szyfrowanie-logow-w-openwrt-syslog-ng/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://morfikov.github.io
/post/logread-czyli-system-logowania-w-openwrt/&#34;&gt;We wpisie dotyczącym logread&lt;/a&gt;
została podniesiona kwestia przesłania logów przez sieć. OpenWRT jest w stanie tego typu zadanie
realizować po określeniu kilku dodatkowych opcji w pliku &lt;code&gt;/etc/config/system&lt;/code&gt; . Trzeba jednak zdawać
sobie sprawę, że tak przesyłane komunikaty nie będą w żaden sposób zabezpieczone. W sieci domowej
raczej nie musimy sobie zawracać głowy tym mankamentem. Niemniej jednak, gdy w grę wchodzi
przesyłanie logów do zdalnego serwera zlokalizowanego gdzieś w internecie, to taką komunikację
należy zabezpieczyć przed podsłuchem. Niestety OpenWRT standardowo nie wspiera takich udziwnień ale
dysponuje on pakietami, które mogą nam zapewnić taką funkcjonalność. Szyfrowanie logów możemy w
łatwy sposób wdrożyć za pomocą pakietu &lt;code&gt;syslog-ng3&lt;/code&gt; . W nim znajduje się demon &lt;code&gt;syslog-ng&lt;/code&gt; , który
jest kompatybilny w pełni z innymi linux&#39;owymi demonami logowania. Nie powinno zatem być problemów
ze skonfigurowaniem tego całego mechanizmu.&lt;/p&gt;
&lt;p&gt;W OpenWRT w wersji Chaos Calmer nie ma pakietu &lt;code&gt;syslog-ng3&lt;/code&gt; . W efekcie szyfrowanie logów routera
nie jest obecnie możliwe. Ten wpis dotyczy jedynie wydania Barrier Breaker i zostanie zaktualizowany
jak tylko wspomniany pakiet trafi do repozytorium.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Logread, czyli system logowania w OpenWRT</title>
      <link>https://morfikov.github.io/post/logread-czyli-system-logowania-w-openwrt/</link>
      <pubDate>Thu, 28 Apr 2016 21:04:26 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/logread-czyli-system-logowania-w-openwrt/</guid>
      <description>&lt;p&gt;Każdy szanujący się system, nawet ten najmniejszy na bazie OpenWRT, musi posiadać mechanizm
logowania komunikatów. Logi routera to bardzo ważna rzecz. Jeśli coś dolega naszemu małemu
przyjacielowi, to jest niemal pewne, że właśnie wśród tych wiadomości znajdziemy przyczynę
problemów. Każda usługa systemowa działająca na routerze przesyła logi, które są zbierane przez
demon logowania. W Chaos Calmer odpowiadają za to &lt;code&gt;logd&lt;/code&gt; oraz &lt;code&gt;logread&lt;/code&gt; . Standardowa konfiguracja
logów w OpenWRT nie jest raczej skomplikowana ale niewiele osób wie, że logi routera można zapisywać
w pliku lub przesłać je przez sieć do innego hosta. W tym wpisie postaramy się właśnie zrealizować
te dwa zadania.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Strefa czasowa (timezone) w OpenWRT</title>
      <link>https://morfikov.github.io/post/strefa-czasowa-timezone-w-openwrt/</link>
      <pubDate>Thu, 28 Apr 2016 00:58:33 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/strefa-czasowa-timezone-w-openwrt/</guid>
      <description>&lt;p&gt;Tanie routery WiFi przeznaczone do użytku domowego nie zawierają w sobie &lt;a href=&#34;https://pl.wikipedia.org/wiki/Zegar_czasu_rzeczywistego&#34;&gt;zegara czasu
rzeczywistego&lt;/a&gt; (RTC, Real Time Clock). Taki
zegar jest implementowany w standardowych komputerach PC czy laptopach ale większość routerów go nie
posiada. Niesie to za sobą pewne komplikacje. Skąd niby router ma wiedzieć jaki mamy aktualnie czas,
skoro nie ma żadnego punktu odniesienia? Komputer bez precyzyjnie ustawionego czasu może mieć
problemy z certyfikatami SSL/TLS. Niewłaściwy czas może także utrudnić analizę pewnych zdarzeń typu
nieautoryzowane próby dostępu do sieci. Ważne jest zatem, by czas na routerze wyposażonym w firmware
OpenWRT był zawsze aktualny i w tym wpisie postaramy się zadbać o to, by strefa czasowa była
odpowiednia, oraz by router uwzględniał czas letni. Przyjrzymy się także mechanizmom aktualizacji
czasu przez protokół NTP.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hostname, czyli nazwa hosta w OpenWRT</title>
      <link>https://morfikov.github.io/post/hostname-czyli-nazwa-hosta-w-openwrt/</link>
      <pubDate>Wed, 27 Apr 2016 23:49:32 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/hostname-czyli-nazwa-hosta-w-openwrt/</guid>
      <description>&lt;p&gt;Po wgraniu świeżego firmware OpenWRT, mamy domyślnie skonfigurowany system, który umożliwia nam
nawiązanie połączenia sieciowego ze światem. Niemniej jednak, w przypadku posiadania w domu kilku
stacji roboczych, zapamiętanie ich adresów IP może być niemałym problemem. Niemniej jednak, każdemu
hostowi w sieci możemy przypisać nazwę, tzw. hostname. W ten sposób możemy powiązać nazwy
poszczególnych komputerów z przypisanymi in adresami IP. To rozwiązanie ma tę zaletę, że nie musimy
pamiętać już adresów IP. Możemy za to posługiwać się nazwami, które są o wiele łatwiejsze do
zapamiętania dla człowieka. Działa to mniej więcej na tej samej zasadzie co domeny internetowe. W
tym wpisie postaramy się skonfigurować domenę, w której pracuje router oraz nazwy hostów w sieci.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Skrypty startowe init w OpenWRT</title>
      <link>https://morfikov.github.io/post/skrypty-startowe-init-w-openwrt/</link>
      <pubDate>Wed, 27 Apr 2016 20:47:12 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/skrypty-startowe-init-w-openwrt/</guid>
      <description>&lt;p&gt;Znaczna część usług, które są dostępne w OpenWRT, jest odpalana &lt;a href=&#34;https://wiki.openwrt.org/doc/techref/process.boot#init&#34;&gt;w fazie startowej
routera&lt;/a&gt;. Te zadnia są realizowane przez
skrypty startowe, które są dołączane w konkretnych pakietach. Takie skrypty są wywoływane w
odpowiedniej kolejności. Każdy z nich można dodać lub usunąć z autostartu. W przypadku, gdy jakaś
usługa nie dostarcza swojego skryptu startowego, możemy pokusić się o napisanie jej takowego.
Oczywiście, nic też nie stoi na przeszkodzie, by utworzyć własne skrypty startowe, które
niekoniecznie odnoszą się do określonych usług. Mogą one np. realizować pewne określone zadanie. W
tym wpisie przybliżymy sobie trochę budowę skryptów startowych w OpenWRT tak, by być w stanie je
tworzyć i edytować jeśli zajdzie taka potrzeba.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zmiana rozmiaru katalogu /tmp/ pod OpenWRT</title>
      <link>https://morfikov.github.io/post/zmiana-rozmiaru-katalogu-tmp-pod-openwrt/</link>
      <pubDate>Wed, 27 Apr 2016 18:24:12 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/zmiana-rozmiaru-katalogu-tmp-pod-openwrt/</guid>
      <description>&lt;p&gt;OpenWRT ma w swoich repozytoriach całe mnóstwo pakietów. By móc je zainstalować, potrzebne jest nam
miejsce na flash&#39;u routera. Ten z kolei nie jest zbyt duży, często nie przekracza 16 MiB. Podczas
pracy, system operacyjny routera przeprowadza cały szereg operacji. Część z nich generuje jakieś
dane, np. tworzone są pliki konfiguracyjne, generowane statystyki czy pobierane z internetu pliki w
celu dalszego ich przetworzenia. Zwykle są to pliki, które wędrują do katalogu &lt;code&gt;/tmp/&lt;/code&gt; . Gdybyśmy
chcieli zapisać wszystkie te informacje na flash&#39;u routera, to zabrakłoby nam zwyczajnie miejsca.
Inną kwestią są problemy związane z zapisem samego flash&#39;a, który ulega zużyciu. Dlatego też, szereg
operacji zapisu został przeniesiony do pamięci operacyjnej RAM. W ten sposób mamy do wykorzystania
nieco więcej miejsca ale standardowo nie więcej niż 50% wielkości pamięci operacyjnej. Wielkość tego
&lt;a href=&#34;https://pl.wikipedia.org/wiki/Ramdysk&#34;&gt;RAMdysku&lt;/a&gt; można dostosować i w tym wpisie zobaczymy jak to
zrobić.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dysk, pendrive i inne nośniki pod OpenWRT</title>
      <link>https://morfikov.github.io/post/dysk-pendrive-inne-nosniki-pod-openwrt/</link>
      <pubDate>Wed, 27 Apr 2016 00:32:19 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/dysk-pendrive-inne-nosniki-pod-openwrt/</guid>
      <description>&lt;p&gt;Czym by był router bez portów USB? Obecnie chyba wszystkie routery posiadają przy najmniej jeden
taki port. Umożliwia to podłączenie pendrive, dysku USB, drukarki i innych urządzeń posiadających
interfejs USB. W przypadku, gdy posiadamy jeden port USB i chcemy podłączyć dwa (lub więcej)
urządzenia, musimy skorzystać z hubów USB. Ja w przypadku swojego routera &lt;a href=&#34;http://www.tp-link.com.pl/products/details/TL-WR1043ND.html&#34;&gt;TP-LINK TL-WR1043N/ND
v2&lt;/a&gt; mam zastosowane właśnie takie
rozwiązanie. Niby potrzebuję trzy porty USB, a ten router ma tylko jeden. Co prawda, pojawia się
problem z zapotrzebowaniem na energię ale aktywne huby USB wyposażone w zasilacze niwelują tę
dolegliwość. Ten wpis ma na celu przedstawić zarządzanie tymi wszystkimi nośnikami pod OpenWRT.
Zostanie tutaj pokazane jak stworzyć i zamontować partycje o systemie plików EXT4, NTFS, FAT.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Extroot i whole_root (fullroot) pod OpenWRT</title>
      <link>https://morfikov.github.io/post/extroot-whole_root-fullroot-pod-openwrt/</link>
      <pubDate>Tue, 26 Apr 2016 16:08:13 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/extroot-whole_root-fullroot-pod-openwrt/</guid>
      <description>&lt;p&gt;Domowe routery WiFi zwykle nie dysponują flash&#39;em o dużej pojemności. W ogromnej części przypadków
pamięć flash w takich urządzeniach nie przekracza 16 MiB. W zasadzie jest to wystarczająca ilość
miejsca ale tylko w przypadku korzystania z oryginalnego firmware producenta routera. Gdy w grę
wchodzi OpenWRT, to przy tak niewielkiej przestrzeni jest duże prawdopodobieństwo, że przy
instalowaniu dodatkowych pakietów zwyczajnie zabraknie nam miejsca. Jeśli nasz router dysponuje
chociaż jednym portem USB, to możemy rozszerzyć system plików routera do rozmiarów partycji
pendrive, który zostanie podłączony. W ten sposób z tych 16 MiB może nam się zrobić, np. 1-2 GiB, a
to już w zupełności wystarczy na instalację dowolnych pakietów z repozytorium OpenWRT. Cały ten
zabieg nosi nazwę &lt;code&gt;extroot&lt;/code&gt; (&lt;a href=&#34;https://wiki.openwrt.org/doc/howto/extroot&#34;&gt;external root&lt;/a&gt;) lub
&lt;code&gt;whole_root&lt;/code&gt; (fullroot) i w tym wpisie prześledzimy procedurę tworzenia tego mechanizmu.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja dnscrypt-proxy w OpenWRT</title>
      <link>https://morfikov.github.io/post/konfiguracja-dnscrypt-proxy-w-openwrt/</link>
      <pubDate>Sun, 24 Apr 2016 20:10:01 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-dnscrypt-proxy-w-openwrt/</guid>
      <description>&lt;p&gt;Realizowanie zapytań DNS jest kluczowe do poprawnego działania min. stron internetowych. Router z
OpenWRT na pokładzie bez problemu potrafi rozwiązywać domeny na adresy IP. Jest to realizowane przez
oprogramowanie &lt;code&gt;dnsmasq&lt;/code&gt; . Problem w tym, że zwykle resolver, który będzie uwzględniany w
konfiguracji routera, wskazuje na serwery DNS naszego ISP, czy też jakiejś większej korporacji. W
ten sposób, wszystkie dane z przeglądania stron internetowych podajemy tym organizacjom za free.
Przy pomocy &lt;a href=&#34;https://dnscrypt.org/&#34;&gt;narzędzia dnscrypt-proxy&lt;/a&gt; jesteśmy w stanie zabezpieczyć naszą
sieć przed tego typu zabiegami zbierania danych. Po części też możemy uchronić się przed cenzurą,
którą może nam zafundować lokalny provider internetowy. W tym artykule zaimplementujemy obsługę
szyfrowanego resolver&#39;a DNS na naszym domowym routerze.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OPKG, czyli menadżer pakietów w OpenWRT</title>
      <link>https://morfikov.github.io/post/opkg-czyli-menadzer-pakietow-w-openwrt/</link>
      <pubDate>Sun, 24 Apr 2016 17:49:09 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/opkg-czyli-menadzer-pakietow-w-openwrt/</guid>
      <description>&lt;p&gt;W OpenWRT do zarządzania pakietami wykorzystywany jest menadżer pakietów
&lt;a href=&#34;https://wiki.openwrt.org/doc/techref/opkg&#34;&gt;opkg&lt;/a&gt;. To przy jego pomocy instalujemy i usuwamy
pakiety. Niemniej jednak, to narzędzie nie ogranicza się jedynie do tych dwóch powyższych czynności.
Przy pomocy &lt;code&gt;opkg&lt;/code&gt; jesteśmy w stanie przeprowadzić szereg innych operacji dotyczących zarządzania
pakietami w systemie operacyjnym naszego domowego routera. W tym wpisie prześledzimy sobie
poszczególne opcje jakie ten menadżer pakietów nam oferuje.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Klucze szyfrujące RSA w OpenWRT (ssh)</title>
      <link>https://morfikov.github.io/post/klucze-szyfrujace-rsa-w-openwrt-ssh/</link>
      <pubDate>Sun, 24 Apr 2016 01:14:41 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/klucze-szyfrujace-rsa-w-openwrt-ssh/</guid>
      <description>&lt;p&gt;Klucze RSA w protokole SSH mogą być wykorzystane jako sposób identyfikacji danej osoby przy
logowaniu się do zdalnego serwera. Te klucze zawsze występują w parach. Jeden prywatny, drugi
publiczny. Pierwszy z nich jest znany tylko nam i powinien być trzymany w sekrecie i pilnie
strzeżony. Klucz publiczny z kolei zaś jest przesyłany na każdy serwer SSH, z którym chcemy się
połączyć. Gdy serwer jest w posiadaniu naszego klucza publicznego i widzi przy tym, że próbujemy
nawiązać połączenie, używa on tego klucza, by wysłać do nas zapytanie (challange). Jest ono
zakodowane i musi na nie zostać udzielona prawidłowa odpowiedź. Tej z kolei może udzielić ktoś, kto
jest w posiadaniu klucza prywatnego. Nie ma innej opcji, by rozkodować wiadomość. Dlatego też nikt
inny nie może udzielić na nią prawidłowej odpowiedzi. To rozwiązanie eliminuje wrażliwość na różne
formy podsłuchu. Ten kto nasłuchuje nie będzie w stanie przechwycić pakietów zawierających hasło, bo
ono nie jest nigdy transmitowane prze sieć. No i oczywiście jeśli chodzi o samo hasło, to odpadają
nam ataki bruteforce pod kątem jego złamania. W tym wpisie postaramy się zaimplementować na routerze
z OpenWrt system logowania oparty o klucze RSA.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dostęp do routera OpenWRT (telnet, ssh, sshfs)</title>
      <link>https://morfikov.github.io/post/dostep-routera-openwrt-telnet-ssh-sshfs/</link>
      <pubDate>Sun, 24 Apr 2016 00:00:51 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/dostep-routera-openwrt-telnet-ssh-sshfs/</guid>
      <description>&lt;p&gt;Standardowa instalacja OpenWRT nie zawiera w sobie żadnego trybu graficznego czy też panelu www.
Wszelkie operacje trzeba przeprowadzać przy pomocy terminala. Mimo to, OpenWRT daje nam kilka
możliwości na uzyskanie dostępu do routera. Ten firmware ma zaimplementowaną
obsługę &lt;a href=&#34;https://pl.wikipedia.org/wiki/Telnet&#34;&gt;protokołu telnet&lt;/a&gt;, który swoją drogą nie należy do
bezpiecznych. Oprócz niego, mamy możliwość logowania się za
pomocą &lt;a href=&#34;https://pl.wikipedia.org/wiki/Secure_Shell&#34;&gt;protokołu SSH&lt;/a&gt;. Tutaj sprawa bezpieczeństwa ma
się o wiele lepiej. Poza tym, można bardzo łatwo zaimplementować klucze SSH eliminując tym samym
dostęp oparty o wprowadzanie hasła przy logowaniu. Czy takie zabezpieczenia nam są potrzebne w
domowych warunkach? Tę kwestię niech sobie każdy użytkownik rozważy sam. Dodatkowo, jeśli już
wspomnieliśmy o protokole SSH, to warto poruszyć
kwestię &lt;a href=&#34;https://pl.wikipedia.org/wiki/SSHFS&#34;&gt;protokołu SSHFS&lt;/a&gt;, czyli możliwości zamontowania
systemu plików routera lokalnie na komputerze. Daje nam to możliwość przeglądania takiego systemu
plików jak zwykłego katalogu. No i mamy też uproszczoną edycję plików, która może odbywać się w
trybie graficznym przy pomocy narzędzi, z których zwykle korzystamy na swoim PC. W tym wpisie
rzucimy okiem na te poszczególne metody i przy pomocy każdej z nich spróbujemy uzyskać dostęp do
routera.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tryb ratunkowy (failsafe) w OpenWRT</title>
      <link>https://morfikov.github.io/post/tryb-ratunkowy-failsafe-w-openwrt/</link>
      <pubDate>Sat, 23 Apr 2016 18:50:55 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/tryb-ratunkowy-failsafe-w-openwrt/</guid>
      <description>&lt;p&gt;Obrazy OpenWRT mają wbudowany &lt;a href=&#34;https://wiki.openwrt.org/doc/howto/generic.failsafe&#34;&gt;tryb failsafe&lt;/a&gt;
obchodzący całą konfigurację, która została zapisana na &lt;a href=&#34;https://pl.wikipedia.org/wiki/JFFS2&#34;&gt;partycji
JFFS2&lt;/a&gt;. To jest ta części pamięci flash routera, w której
możemy dokonywać własnych zmian w konfiguracji tego firmware. Jak to zwykle bywa, czasem coś
uszkodzimy przez przypadek i masz router nie chce zbytnio działać tak jak byśmy od niego oczekiwali.
Tryb &lt;code&gt;failsafe&lt;/code&gt; nie jest tym samym co &lt;code&gt;firstboot&lt;/code&gt;, który resetuje ustawienia do fabrycznych. W
przypadku &lt;code&gt;failsafe&lt;/code&gt; , wszelkie zmiany jakich dokonaliśmy w procesie konfiguracji zostają i nic nie
tracimy. Jedynie co, to nie jest montowana partycja, na której ten zmiany figurują. Dodatkowo, ilość
odpalonych usług jest ograniczona do minimum. Nie mamy, np. dostępu do internetu, nie działa WiFi,
resolver DNS i nie mamy możliwości uzyskania adresu za pomocą protokołu DHCP. W tym wpisie
przyjrzymy się nieco bliżej temu mechanizmowi.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Reset ustawień w OpenWRT (firstboot)</title>
      <link>https://morfikov.github.io/post/reset-ustawien-w-openwrt-firstboot/</link>
      <pubDate>Sat, 23 Apr 2016 17:30:52 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/reset-ustawien-w-openwrt-firstboot/</guid>
      <description>&lt;p&gt;Routery zwykle nie posiadają monitorów, klawiatur czy myszy. Gdy z takim urządzeniem zaczynają się
dziać problemy, mamy bardzo niewielkie pole manewru. Nie dość, że nie mamy jak zarządzać takim
routerem, to jeszcze rozebranie go zwykle nic nam nie da. Nie są to przecie dekstop&#39;y, z których
można wymontować dysk czy podpiąć do nich pendrive live i odratować znajdujący się na nich system
operacyjny. Czasem wystarczy drobny błąd konfiguracyjny, by router nie chciał się nam odpalić lub
nie będziemy w stanie się z nim połączyć. Z powodu tak ograniczonego dostępu do systemu routerów w
przypadku awarii, ich &lt;a href=&#34;http://www.tp-link.com/en/faq-140.html&#34;&gt;firmware zwykle jest wyposażony w mechanizm resetowania
konfiguracji&lt;/a&gt; do ustawień fabrycznych. Podobnie sprawa ma
się w przypadku firmware OpenWRT. Cały mechanizm resetowania ustawień nosi nazwę &lt;code&gt;firstboot&lt;/code&gt; lub
&lt;code&gt;factory defaults&lt;/code&gt; albo też &lt;code&gt;factory reset&lt;/code&gt; . W tym wpisie postaramy się zresetować ustawienia
routera na kilka sposobów.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Obsługa SMS i kodów USSD w OpenWRT</title>
      <link>https://morfikov.github.io/post/obsluga-sms-kodow-ussd-w-openwrt/</link>
      <pubDate>Sat, 23 Apr 2016 15:16:00 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/obsluga-sms-kodow-ussd-w-openwrt/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://morfikov.github.io
/post/monitor-polaczenia-3glte-w-openwrt-3ginfo/&#34;&gt;W artykule poświęconym 3ginfo&lt;/a&gt;
omawialiśmy monitorowanie połączenia 3G/LTE pod OpenWRT. Zabrakło tam jednak pewnej funkcjonalności,
która ucieszyłaby chyba każdego użytkownika tego firmware. Chodzi oczywiście o wysyłanie i
odbieranie SMS oraz przesyłanie kodów USSD. Okazuje się, że &lt;code&gt;3ginfo&lt;/code&gt; potrafi nam tę funkcjonalność
zapewnić, tylko wymagane jest doinstalowanie kilku pakietów i odpowiednie skonfigurowanie systemu. W
tym wpisie spróbujemy sobie ten mechanizm wysyłania SMS i kodów USSD skonfigurować.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Monitor połączenia 3G/LTE W OpenWRT (3ginfo)</title>
      <link>https://morfikov.github.io/post/monitor-polaczenia-3glte-w-openwrt-3ginfo/</link>
      <pubDate>Fri, 22 Apr 2016 19:53:08 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/monitor-polaczenia-3glte-w-openwrt-3ginfo/</guid>
      <description>&lt;p&gt;W pewnych sytuacjach lub też ze zwykłej ciekawości możemy chcieć sprawdzić jak sprawuje się
połączenie LTE, którego obsługę zaimplementowaliśmy na naszym routerze mającym na pokładzie
firmware OpenWRT. Nie będę tutaj opisywał samej konfiguracji takiego połączenia, bo to zostało
zrobione we wpisie poświęconym &lt;a href=&#34;https://morfikov.github.io
/post/modem-lte-pod-openwrt/&#34;&gt;konfiguracji modemu Huawei E3372 pod
OpenWRT&lt;/a&gt;, jak i przy okazji &lt;a href=&#34;https://morfikov.github.io
/post/konfiguracja-polaczenia-aero2-na-openwrt/&#34;&gt;konfiguracji połączenia
Aero2&lt;/a&gt;. W tym wpisie zaś skupimy
się na monitorowaniu za pomocą &lt;code&gt;3ginfo&lt;/code&gt; już działającego połączenia, które jest realizowane za
pomocą modemu LTE podłączonego do portu USB routera.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja połączenia Aero2 na OpenWRT</title>
      <link>https://morfikov.github.io/post/konfiguracja-polaczenia-aero2-na-openwrt/</link>
      <pubDate>Fri, 22 Apr 2016 16:19:41 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-polaczenia-aero2-na-openwrt/</guid>
      <description>&lt;p&gt;Darmowy internet oferowany przez Aero2 nie grzeszy zbytnio osiągami, bo mamy do dyspozycji jedynie
512 kbit/s. Niemniej jednak, taka prędkość w zupełności wystarcza do przeglądania stron
internetowych. Gorzej z oglądaniem materiałów video w serwisach takich jak YouTube. To jednak nie ma
raczej większego znaczenia, bo przecie usługa jest za free, a poza tym, możemy dokupić szereg
pakietów aktywujących pełną prędkość w technologi LTE. Problem w tym, że od Aero2 możemy otrzymać
tylko jedną kartę SIM na użytkownika. Może i mamy możliwość dostania kilku kart na jeden adres
zamieszkania ale i tak trzeba by dla każdego SIM załatwić osobny modem LTE. Zwykle takie rozwiązanie
nie wchodzi w grę, zwłaszcza, gdy z internetu korzystamy raczej sporadycznie. Mając jednak router z
alternatywnym firmware OpenWRT, możemy do jednego z jego portów USB doczepić taki modem i udostępnić
połączenie internetowe wszystkim urządzeniom w naszej sieci domowej. W tym artykule postaramy się to
zadanie zrealizować.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak wgrać firmware OpenWRT na router TP-LINK</title>
      <link>https://morfikov.github.io/post/jak-wgrac-firmware-openwrt-na-router-tp-link/</link>
      <pubDate>Fri, 22 Apr 2016 12:34:00 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-wgrac-firmware-openwrt-na-router-tp-link/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://openwrt.org/&#34;&gt;OpenWRT&lt;/a&gt; to alternatywny firmware dla routerów oparty o linux&#39;a. Może on
okazać się dość złożonym systemem i to pomimo faktu, że zajmuje raczej niewiele miejsca, bo rozmiary
obrazów nie przekraczają 8-16 MiB, oczywiście wliczając w to wolne miejsce. Niemniej jednak, by
komfortowo operować na dostarczonym oprogramowaniu, trzeba dysponować określoną wiedzą. OpenWRT w
dużej mierze przypomina linux&#39;a i szereg poleceń jest w tych dwóch systemach taki sam. Jedynie co,
to z powodu dość ograniczonego miejsca, większość programów została okrojona dość solidnie,
zostawiając przy tym tylko niezbędną funkcjonalność. Mamy, co prawda, szereg nakładek z interfejsem
webowym (min. &lt;a href=&#34;https://www.gargoyle-router.com/&#34;&gt;Gargoyle&lt;/a&gt; i
&lt;a href=&#34;https://github.com/openwrt/luci/wiki&#34;&gt;LuCi&lt;/a&gt;), które upraszczają operowanie na tym firmware ale my w
tym artykule położymy nacisk na przejście na czyste OpenWRT, z którym będziemy się komunikować za
pomocą poleceń tekstowych wydawanych w terminalu.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak powrócić z firmware OpenWRT do TP-LINK&#39;a</title>
      <link>https://morfikov.github.io/post/jak-powrocic-z-firmware-openwrt-tp-linka/</link>
      <pubDate>Thu, 21 Apr 2016 19:41:05 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-powrocic-z-firmware-openwrt-tp-linka/</guid>
      <description>&lt;p&gt;Zmiana oryginalnego firmware na alternatywne na bazie OpenWRT nie jest procesem tylko i wyłączenie w
jedną stronę. W przypadku, gdy OpenWRT z jakichś powodów nie spełnia naszych oczekiwań, to zawsze
możemy powrócić do oprogramowania oferowanego przez producenta routera. W tym wpisie prześledzimy
sobie proces powrotu do oryginalnego firmware na przykładzie routera &lt;a href=&#34;http://www.tp-link.com.pl/products/details/TL-WR1043ND.html&#34;&gt;TP-LINK TL-WR1043ND
v2&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sysupgrade, czyli aktualizacja firmware OpenWRT</title>
      <link>https://morfikov.github.io/post/sysupgrade-czyli-aktualizacja-firmware-openwrt/</link>
      <pubDate>Thu, 21 Apr 2016 16:30:44 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/sysupgrade-czyli-aktualizacja-firmware-openwrt/</guid>
      <description>&lt;p&gt;Alternatywne oprogramowanie OpenWRT dla routerów trzeba regularnie aktualizować. Nie chodzi tutaj
tylko o znane podatności w oprogramowaniu ale też o wyeliminowanie błędów wynikłych z niepoprawnego
działania sterownika czy jakiegoś modułu samego kernela. Proces aktualizacji firmware nie jest
niczym trudnym, choć przeprowadzany niewłaściwie może zakończyć się uwaleniem routera. Poniższy wpis
ma na celu zaprezentowanie jak krok po kroku dokonać aktualizacji oprogramowania za pomocą narzędzia
&lt;code&gt;sysupgrade&lt;/code&gt; . Postaramy się to zrobić w oparciu o najnowszą dostępną wersję OpenWRT, w tym
przypadku będzie to Chaos Calmer 15.05.1 (r49172).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Modem LTE pod OpenWRT (Huawei E3372s-153)</title>
      <link>https://morfikov.github.io/post/modem-lte-pod-openwrt/</link>
      <pubDate>Mon, 04 Apr 2016 19:44:30 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/modem-lte-pod-openwrt/</guid>
      <description>&lt;p&gt;Modem LTE jest zwykle przeznaczony dla jednej stacji roboczej. Podpina się go do portu USB i zwykle
po chwili można zestawić połączenie z siecią. W przypadku, gdy mamy kilka komputerów i na każdym z
nich chcemy mieć internet, to mamy z grubsza trzy wyjścia. Pierwszym z nich jest dokupienie
kolejnych modemów LTE, co zwykle nie wchodzi w grę. Drugą opcją jest zakup routera LTE. Różni się on
od zwykłego routera WiFi tym, że ma już wbudowany modem LTE. Jeśli jednak dysponujemy własnym
routerem WiFi, to niekoniecznie musimy się go pozbywać, zwłaszcza w przypadku, gdy już zakupiliśmy
osobno modem LTE. Jeśli na tym routerze WiFi jesteśmy w stanie zainstalować firmware OpenWRT, to
istnieje duża szansa na to, że damy radę ten router przerobić na router LTE. W tym wpisie postaramy
się ten zabieg przeprowadzić z wykorzystaniem routera &lt;a href=&#34;http://www.tp-link.com.pl/products/details/cat-9_Archer-C7.html&#34;&gt;TP-LINK Archer C7
v2&lt;/a&gt; oraz modemu LTE Huawei
E3372s-153 w wersji NON-HiLink.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja tunelu 6in4 w OpenWRT (IPv6)</title>
      <link>https://morfikov.github.io/post/konfiguracja-tunelu-6in4-w-openwrt-ipv6/</link>
      <pubDate>Tue, 01 Mar 2016 15:28:22 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-tunelu-6in4-w-openwrt-ipv6/</guid>
      <description>&lt;p&gt;Ludzie z IETF prawie 20 lat temu opracowali protokół IPv6. Niemniej jednak, w dalszym ciągu ogromna
część providerów internetowych nie ma zamiaru zaimplementować u siebie jego obsługi. &lt;a href=&#34;http://www.google.com/intl/pl/ipv6/statistics.html&#34;&gt;Ilość
użytkowników, którzy mają natywne wsparcie dla protokołu
IPv6&lt;/a&gt; oscyluje w granicach 10% . Jeśli jednak
mamy do dyspozycji router z firmware OpenWRT na pokładzie, to możemy pokusić się o skonfigurowanie
tunelu 6in4. Jedynym warunkiem jest posiadanie zewnętrznego adresu IP. Tunel 6in4 jest bardzo
podobny do tego &lt;a href=&#34;https://morfikov.github.io
/post/implementacja-protokolu-ipv6-za-pomoca-tunelu-6to4/&#34;&gt;6to4, który był opisywany na przykładzie
debiana&lt;/a&gt;. Tutaj jednak
ten tunel zostanie ustawiony na routerze i w ten sposób cała wewnętrzna sieć będzie miała
przydzieloną określoną przestrzeń adresową z puli IPv6.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Interwał pakietów Beacon w sieciach WiFi</title>
      <link>https://morfikov.github.io/post/interwal-pakietow-beacon-w-sieciach-wifi/</link>
      <pubDate>Mon, 13 Jul 2015 18:12:33 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/interwal-pakietow-beacon-w-sieciach-wifi/</guid>
      <description>&lt;p&gt;Przerabiając analizę pakietów sieciowych, dotarłem w końcu do sieci bezprzewodowych, a te różnią się
nieco od tych swoich przewodowych kuzynów. Generalnie rzecz biorąc nie będę tutaj opisywał samej
analizy pakietów, które sobie przemierzają eter w pobliżu naszych urządzeń WiFi, a jedynie poruszę
kwestię pakietów Beacon, które są rozsyłane przez punkty dostępowe w pewnych odstępach czasu.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>