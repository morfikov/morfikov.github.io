<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sieć on Morfitronik</title>
    <link>https://morfikov.github.io/tags/sie%C4%87/</link>
    <description>Recent content in sieć on Morfitronik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language>
    <lastBuildDate>Wed, 29 Jan 2020 19:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://morfikov.github.io/tags/sie%C4%87/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jak zmienić hostname w telefonie z Androidem</title>
      <link>https://morfikov.github.io/post/jak-zmienic-hostname-w-telefonie-z-androidem/</link>
      <pubDate>Wed, 29 Jan 2020 19:00:00 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-zmienic-hostname-w-telefonie-z-androidem/</guid>
      <description>&lt;p&gt;Przeglądając ostatnio listę sprzętów podłączonych do mojego routera WiFi, zauważyłem, że niektóre
pozycje na niej w polu z hostname mają coś na wzór &lt;code&gt;android-4c52c33baae0b4fa&lt;/code&gt; . Pierwsza część
nazwy tego hosta wskazuje na system operacyjny, a drugi kawałek to unikalny numerek ID.  Nie jestem
zbytnio fanem rozgłaszania takich informacji publicznie, bo mogą one ułatwić ewentualne ataki, oraz
też identyfikują jednoznacznie dane urządzenie (&lt;a href=&#34;https://source.android.com/devices/tech/connect/wifi-mac-randomization&#34;&gt;osobną kwestią jest adres MAC karty sieciowej&lt;/a&gt;).
Ponadto, mając w sieci wiele mobilnych urządzeń, ciężko jest czasem połapać się który telefon ma
przypisany konkretny adres IP (bez patrzenia w ustawienia telefonu). Z reguły na linux&#39;owym
desktopie czy laptopie zmiana hostname jest stosunkowo łatwym zadaniem ale w przypadku smartfona z
Androidem ten zabieg okazał się niezmiernie trudnym procesem. Jak zatem zmienić hostname telefonu,
by można było mu przypisać jakaś w miarę ludzką nazwę?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recenzja: Serwer druku MFP TL-PS310U od TP-LINK</title>
      <link>https://morfikov.github.io/post/recenzja-serwer-druku-mfp-tl-ps310u-tp-link/</link>
      <pubDate>Sat, 01 Oct 2016 18:09:35 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/recenzja-serwer-druku-mfp-tl-ps310u-tp-link/</guid>
      <description>&lt;p&gt;Przeglądając ofertę na stronie TP-LINK, zaciekawiło mnie pewne urządzenie. Chodzi o &lt;a href=&#34;http://www.tp-link.com.pl/products/details/cat-5688_TL-PS310U.html&#34;&gt;serwer druku
MFP i pamięci masowej
TL-PS310U&lt;/a&gt;. Niby słyszałem
kiedyś w przeszłości frazę &amp;quot;Print Server&amp;quot; ale nigdy zbytnio się nie zastanawiałem nad tym do czego
takie coś ma w istocie służyć. Po nazwie można jedynie przypuszczać, że chodzi o coś związanego z
sieciowymi urządzeniami drukującymi. Niemniej jednak, ten serwer wydruku, który dotarł do mnie nie
przypomina zbytnio drukarki sieciowej. To co to w takim razie jest?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mostek eth0 &#43; wlan0 z bridge-utils i wpa_supplicant</title>
      <link>https://morfikov.github.io/post/mostek-eth0-wlan0-bridge-utils-wpa_supplicant/</link>
      <pubDate>Sun, 18 Sep 2016 13:01:58 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/mostek-eth0-wlan0-bridge-utils-wpa_supplicant/</guid>
      <description>&lt;p&gt;Posiadając w komputerze kilka interfejsów sieciowych, prędzej czy później dostrzeżemy wady jakie
niesie ze sobą konfiguracja wszystkich posiadanych kart sieciowych. Skonfigurowanie szeregu
interfejsów przewodowych nie stanowi raczej większego wyzwania. Można je spiąć w jeden za pomocą
bonding&#39;u czy też konfigurując wirtualny interfejs mostka (bridge). A co w przypadku bezprzewodowych
interfejsów? Tu również możemy &lt;a href=&#34;https://morfikov.github.io
/post/konfiguracja-interfejsow-bond-bonding/&#34;&gt;skonfigurować interfejs
bond0&lt;/a&gt; lub też podpiąć interfejs
&lt;code&gt;wlan0&lt;/code&gt; pod mostek. Jako, że bonding już opisywałem, to w tym artykule zajmiemy się mostkowaniem
interfejsu przewodowego i bezprzewodowego, które zwykle dostępne są w naszych laptopach. Ten proces
zostanie opisany w oparciu o dystrybucję linux&#39;a Debian i skontrastujemy go sobie z w/w bonding&#39;iem.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak skonfigurować roaming WiFi z wpa_supplicant w linux&#39;ie</title>
      <link>https://morfikov.github.io/post/jak-skonfigurowac-roaming-wifi-wpa_supplicant-linux/</link>
      <pubDate>Sat, 10 Sep 2016 12:13:09 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-skonfigurowac-roaming-wifi-wpa_supplicant-linux/</guid>
      <description>&lt;p&gt;Bezprzewodowe sieci WiFi są wszędzie. Wystarczy tylko przejść się kawałek po okolicy i przeskanować
eter, a sami zobaczymy, że wynik takiego skanowania zidentyfikuje nam całą masę domowych nadajników.
Oczywiście do większości z nich raczej nigdy nie będziemy mieć dostępu ale są wśród nich takie AP,
do których zwykliśmy się logować. Niekoniecznie te AP muszą należeć do naszej własnej domowej sieci
WiFi. Mogą to być, np. firmowe hotspoty. Nawet jeśli ograniczymy się tylko do naszego domu, to gdy
ten jest nieco większy, to prawdopodobnie jeden bezprzewodowy router nie wystarczy, by pokryć
zasięgiem całą dostępną przestrzeń użytkową. Będziemy musieli dokupić drugi router, czy jakiś
wzmacniacz sygnału. Być może też zdecydujemy się na &lt;a href=&#34;https://morfikov.github.io
/post/transmitery-sieciowe-tl-wpa4226t-kit-tp-link/&#34;&gt;transmitery sieciowe
(powerline)&lt;/a&gt;. Jest cała masa
urządzeń, które mogą nam pomóc rozwiązać problem słabego zasięgu. To co zwykle łączy te urządzenia,
to fakt, że wszystkie z nich zawierają dodatkowy AP, który trzeba skonfigurować. Pojawia się zatem
problem przełączania między tymi punktami dostępowymi. Można sobie z tym poradzić konfigurując
roaming. W takiej sytuacji przełączanie między sieciami będzie następowało automatycznie, szybko i
bez naszego udziału. W linux&#39;ach roaming można włączyć przy pomocy narzędzia &lt;code&gt;wpa_supplicant&lt;/code&gt; i w
tym artykule zobaczymy jak tego dokonać.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Debian: Profilowanie sieci z guessnet, ifplugd i wpasupplicant</title>
      <link>https://morfikov.github.io/post/debian-profilowanie-sieci-guessnet-ifplugd-wpasupplicant/</link>
      <pubDate>Mon, 05 Sep 2016 13:01:08 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/debian-profilowanie-sieci-guessnet-ifplugd-wpasupplicant/</guid>
      <description>&lt;p&gt;Kilka dni temu na &lt;a href=&#34;https://forum.dug.net.pl/viewtopic.php?id=28903&#34;&gt;forum dug.net.pl&lt;/a&gt; pojawił się
ciekawy wątek dotyczący problemu skonfigurowania profilowanych sieci. Chodzi o to, że praktycznie
każdy z nas jest po części w jakiś sposób mobilny i zabiera laptopa ze sobą w dziwne miejsca. Sieci
w tych lokalizacjach mogą cechować się różnym poziomem bezpieczeństwa. Dlatego też zamiast korzystać
z jednej konfiguracji sieci na linux&#39;ie, można stworzyć szereg profili i w oparciu o nie dostosować
sobie połączenie sieciowe. W tym artykule spróbujemy zaimplementować takie rozwiązanie na Debianie
wyposażonym w menadżer okien Openbox. W skrócie stworzymy automat, który będzie nam działał w
oparciu o pakiety guessnet, &lt;a href=&#34;http://0pointer.de/lennart/projects/ifplugd/&#34;&gt;ifplugd&lt;/a&gt; oraz
&lt;a href=&#34;https://w1.fi/wpa_supplicant/&#34;&gt;wpasupplicant&lt;/a&gt;. Cała konfiguracja zaś sprowadzać się będzie jedynie
do edycji plików &lt;code&gt;/etc/network/interfaces&lt;/code&gt; oraz &lt;code&gt;/etc/wpa_supplicant/wpa_supplicant.conf&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;Niniejszy artykuł został nieco przerobiony po fazach eksperymentów. Przede wszystkim, zrezygnowałem
z zaprzęgania &lt;code&gt;guessnet&lt;/code&gt; do rozpoznawania sieci WiFi i aplikowania roamingu. Zamiast tego zostały
wykorzystane natywne rozwiązania roamingowe oferowane przez &lt;code&gt;wpa_supplicant&lt;/code&gt; . Zaowocowało to
uproszczeniem całej konfiguracji, co przełożyło się na wyeliminowanie pewnych błędów.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Metryki tras interfejsów eth0 i wlan0 w laptopie (metric)</title>
      <link>https://morfikov.github.io/post/metryki-tras-interfejsow-eth0-wlan0-laptop-metric/</link>
      <pubDate>Fri, 02 Sep 2016 17:50:11 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/metryki-tras-interfejsow-eth0-wlan0-laptop-metric/</guid>
      <description>&lt;p&gt;W obecnych czasach posiadanie komputera, który dysponuje kilkoma interfejsami sieciowymi nie jest
niczym niezwykłym. Praktycznie każdy laptop posiada już na pokładzie co najmniej jedną kartę WiFi i
minimum jeden port ethernet. W efekcie czego jesteśmy w stanie podłączyć się do sieci zarówno
przewodowo jak i bezprzewodowo. Problem jednak pojawia się w momencie, gdy chcemy wykorzystywać oba
te interfejsy, z tym, że dysponujemy jedynie niezbyt zaawansowanym menadżerem okien Openbox. Takie
środowiska zwykle nie mają na pokładzie automatów pokroju Network Manager, przez co bardziej
zaawansowana konfiguracja sieci może być dość skomplikowana. Do tej pory wykorzystywałem &lt;a href=&#34;https://morfikov.github.io
/post/konfiguracja-interfejsow-bond-bonding/&#34;&gt;interfejs
bond0&lt;/a&gt;, by mieć możliwość łatwego
przełączania się miedzy sieciami. Istnieje inny sposób konfiguracji interfejsów &lt;code&gt;eth0&lt;/code&gt; i &lt;code&gt;wlan0&lt;/code&gt; w
pliku &lt;code&gt;/etc/network/interfaces&lt;/code&gt; tak, by działały one nam równolegle i nie powodowały problemów z
połączeniem, a wszystko za sprawą opcji &lt;code&gt;metric&lt;/code&gt; .&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dynamiczna konfiguracja sieci w oparciu o ifplugd</title>
      <link>https://morfikov.github.io/post/dynamiczna-konfiguracja-sieci-ifplugd/</link>
      <pubDate>Thu, 01 Sep 2016 12:24:40 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/dynamiczna-konfiguracja-sieci-ifplugd/</guid>
      <description>&lt;p&gt;Sporo użytkowników różnego rodzaju linux&#39;ów, zwłaszcza dystrybucji Debian, niezbyt chwali sobie
automaty konfigurujące połączenie sieciowe typu &lt;a href=&#34;https://wiki.gnome.org/Projects/NetworkManager&#34;&gt;Network
Manager&lt;/a&gt;. W sumie nigdy się jemu bliżej nie
przyglądałem ale na necie nie cieszy się on najlepszą opinią. Niemniej jednak, Network Manager
potrafi automatyzować pewne aspekty pracy w sieci. Weźmy przykład korzystania z dwóch różnych pod
względem parametrów sieci przewodowych. Jak się zachowa nasz OS w chwili przełączania się między
tymi sieciami w przypadku, gdy nie będziemy mieli zainstalowanego jakiegoś automatu dynamicznie
konfigurującego połączenie? W przypadku jednej sieci, połączenie będzie nam działać, w przypadku
drugiej zaś napotkamy problemy. W lekkich środowiskach opartych o menadżery okien, np. Openbox, nie
musimy instalować Network Manager&#39;a, by ogarnąć tę kwestię konfiguracyjną. Możemy posiłkować się
demonem &lt;code&gt;ifplugd&lt;/code&gt; i to tym narzędziu będzie ten wpis.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recenzja: Transmitery sieciowe TL-WPA4226T KIT od TP-LINK</title>
      <link>https://morfikov.github.io/post/transmitery-sieciowe-tl-wpa4226t-kit-tp-link/</link>
      <pubDate>Mon, 29 Aug 2016 18:01:22 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/transmitery-sieciowe-tl-wpa4226t-kit-tp-link/</guid>
      <description>&lt;p&gt;Wszystkim nam jest znany problem z niewielkim zasięgiem bezprzewodowych sieci WiFi. Nierzadko bywa
też tak, że sygnał z routera nie może się przebić przez grube ściany naszego domu, czy też większego
mieszkania. W takiej sytuacji szereg osób próbuje przestawiać router w bardziej dogodne miejsce, by
pokryć zasięgiem całą przestrzeń użytkową. Nie zawsze tego typu rozwiązanie jest jednak możliwe. Ci
bardziej majętni użytkownicy dokupują drugi router i spinają oba urządzenia mostem bezprzewodowym
WDS. O ile takie rozwiązanie może nam pomóc, to trzeba wziąć pod uwagę fakt, że punkty dostępowe
(AP) muszą być w swoim zasięgu oraz muszą wysyłać i odbierać dane, zatem użytkowa przepustowość
sieci WiFi spadnie nam dwukrotnie. Gdy do tego w grę wejdą nam jeszcze zakłócenia generowane przez
inne sieci w okolicy, to efekty mogą być niezbyt zadowalające. Poza tym, trzeba mieć również na
uwadze kompatybilność protokołu WDS, bo różni producenci inaczej go implementują. By rozwiązać ten
cały problem zasięgu w sieciach bezprzewodowych, możemy pokusić się o zakup czegoś, co nazywa się
transmiter sieciowy (ekstender powerline). Te urządzenia są w stanie &amp;quot;przebić się przez każdą
ścianę&amp;quot; i zapewnić nam połączenie z routerem WiFi na dystansie nawet do 300 metrów. Jak to
możliwe? W tym artykule odpowiemy na to pytanie testując jeden z &lt;a href=&#34;http://www.tp-link.com.pl/products/details/TL-WPA4226T-KIT.html&#34;&gt;ekstenderów powerline TL-WPA4226T
KIT (AV500)&lt;/a&gt; od TP-LINK&#39;a.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Transmiter sieciowy i jego panel admina pod linux&#39;em</title>
      <link>https://morfikov.github.io/post/transmiter-sieciowy-panel-admina-linux/</link>
      <pubDate>Sat, 20 Aug 2016 21:54:57 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/transmiter-sieciowy-panel-admina-linux/</guid>
      <description>&lt;p&gt;Bawię się ostatnio trochę transmiterem sieciowym (powerline ekstender). Konkretnie jest to zestaw
&lt;a href=&#34;http://www.tp-link.com.pl/products/details/TL-WPA4226T-KIT.html&#34;&gt;TL-WPA4226T KIT (AV500)&lt;/a&gt; od
TP-LINK. Same urządzenia działają przyzwoicie i realizują powierzane im funkcje w sposób bardzo
zadowalający ale był jeden problem, który mi nie dawał spokoju. Do tych ekstenderów jest dołączona
płytka. Na płytce są aplikacje, które umożliwiają konfigurację tych transmiterów sieciowych. Te
programiki nie mają wersji dla linux&#39;a. Nasunęło mi się zatem pytanie: to jak mam niby te
transmitery skonfigurować pod tym systemem operacyjny? Niby one działają OOTB ale w przypadku
bezprzewodowego routera WiFi z alternatywnym firmware OpenWRT/LEDE na pokładzie występuje kolizja
adresów IP. Zarówno ekstendery jak i router roszczą sobie prawo do adresu 192.168.1.1 . Panel admina
takich transmiterów umożliwia zmianę tego adresu, tylko nie mamy jak się do niego dobrać z poziomu
linux&#39;a. W tym artykule postaramy się rozwiązać problem kolizji adresów IP i skonfigurujemy nasz
transmiter tak, by miał inny adres.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Różne adresy LAN i WLAN w OpenWRT (Routed AP)</title>
      <link>https://morfikov.github.io/post/rozne-adresy-lan-wlan-openwrt-routed-ap/</link>
      <pubDate>Thu, 07 Jul 2016 16:20:17 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/rozne-adresy-lan-wlan-openwrt-routed-ap/</guid>
      <description>&lt;p&gt;W standardowej konfiguracji OpenWRT, hosty łączące się za pomocą sieci bezprzewodowej jak i tej
przewodowej są spięte razem za pomocą mostka (bridge) i tworzą jedną sieć lokalną. Nie ma w tym nic
dziwnego, bo przecie chcemy, aby komunikacja między wszystkimi hostami w sieci LAN odbywała się bez
większych przeszkód. Przynajmniej takie jest standardowe podejście przy konfiguracji sieci domowej.
Niemniej jednak, w pewnych przypadkach istnieje potrzeba oddzielenia maszyn, które nawiązują
połączenie za pomocą sieci WiFi od tych, które łączą się przewodowo. Generalnie chodzi o różne
adresy, które zostaną przypisane sieciom LAN i WLAN. Rozwiązanie, które zostanie opisane w tym
artykule jest podobne do tworzenia &lt;a href=&#34;https://morfikov.github.io
/post/bezprzewodowa-siec-goscinna-guest-wlan/&#34;&gt;bezprzewodowej sieci
gościnnej&lt;/a&gt; (guest WLAN), z tą
różnicą, że w tym przypadku będziemy mieli do czynienia tylko z jedną siecią WiFi (tzw. &lt;a href=&#34;https://wiki.openwrt.org/doc/recipes/routedap&#34;&gt;Routed
AP&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bezprzewodowa sieć gościnna (guest WLAN)</title>
      <link>https://morfikov.github.io/post/bezprzewodowa-siec-goscinna-guest-wlan/</link>
      <pubDate>Wed, 06 Jul 2016 21:00:34 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/bezprzewodowa-siec-goscinna-guest-wlan/</guid>
      <description>&lt;p&gt;Routery WiFi zwykle oferują jedną sieć bezprzewodową, do której użytkownicy mogą się łączyć po
podaniu nazwy ESSID oraz hasła. W przypadku znanych nam osób chcących korzystać z udostępnianego
przez nas AP, taka sieć powinna nam w pełni wystarczyć. Problem jednak zaczyna się w przypadku tych
użytkowników, którym chcemy zezwolić na dostęp do naszej sieci WiFi ale nie darzymy ich zbytnio
wysokim kredytem zaufania. By ten problem rozwiązać, w OpenWRT możemy skonfigurować &lt;a href=&#34;https://wiki.openwrt.org/doc/recipes/guest-wlan&#34;&gt;mechanizm zwany
&amp;quot;guest WLAN&amp;quot;&lt;/a&gt;, czyli bezprzewodowa sieć gościnna. W
tym artykule zobaczymy jak odseparować od siebie hosty w sieci LAN od tych w sieci gościnnej.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sieciowy system plików w OpenWRT (NFS)</title>
      <link>https://morfikov.github.io/post/sieciowy-system-plikow-openwrt-nfs/</link>
      <pubDate>Sun, 26 Jun 2016 19:15:01 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/sieciowy-system-plikow-openwrt-nfs/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pl.wikipedia.org/wiki/Network_File_System_(protok%C3%B3%C5%82)&#34;&gt;Network File System&lt;/a&gt; to
sieciowy system plików, za pomocą którego maszyny mające na pokładzie system operacyjny linux, w tym
tez OpenWRT, są w stanie udostępniać pliki w sieci. Zatem NFS to głównie domena linux&#39;ów. W
przypadku windowsów można korzystać z protokołu SMB
(&lt;a href=&#34;https://pl.wikipedia.org/wiki/Samba_(program)&#34;&gt;samba&lt;/a&gt;). Sposób udostępniania zasobów przy pomocy
tego sieciowego systemu plików jest bardzo podobny do tego, który jest realizowany w przypadku
protokołu SSHFS. Zasadniczą różnicą między NFS i SSHFS jest brak szyfrowania komunikacji. W
warunkach domowej sieci, ta cecha raczej nie stanowi większego problemu. Poza tym, trzeba też brać
pod uwagę fakt, że szyfrowanie znacznie obciążyłoby router, co przełożyłoby się na spadek prędkości
transferu. W tym wpisie zobaczymy jak na routerze z OpenWRT zaimplementować protokół NFS i
udostępnić za jego pomocą zasoby w sieci lokalnej.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Router OpenWRT jako serwer i klient RADIUS</title>
      <link>https://morfikov.github.io/post/router-openwrt-jako-serwer-klient-radius/</link>
      <pubDate>Wed, 15 Jun 2016 07:17:07 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/router-openwrt-jako-serwer-klient-radius/</guid>
      <description>&lt;p&gt;Ten poniższy artykuł ma na celu pokazanie w jaki sposób stworzyć infrastrukturę WiFi w oparciu o
oprogramowanie &lt;code&gt;freeradius&lt;/code&gt; (serwer RADIUS), które zostanie zainstalowane na przykładowym routerze
&lt;a href=&#34;http://www.tp-link.com.pl/products/details/Archer-C7.html&#34;&gt;TP-Link Archer C7 v2&lt;/a&gt;. Router ma wgrany
firmware OpenWRT Chaos Calmer w wersji 15.05.1 (r49294). Zostanie tutaj opisane dokładnie jak
wdrożyć protokół WPA2 Enterprise z obsługą trzech metod uwierzytelniania: EAP-TLS, EAP-TTLS oraz
PEAP (v0) .&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja interfejsów sieciowych w dhclient</title>
      <link>https://morfikov.github.io/post/konfiguracja-interfejsow-sieciowych-w-dhclient/</link>
      <pubDate>Thu, 09 Jun 2016 18:05:00 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-interfejsow-sieciowych-w-dhclient/</guid>
      <description>&lt;p&gt;Konfiguracja maszyn w sieci za sprawą protokołu DHCP znacznie ułatwia życie administratorom. Cały
ten proces jest nie tylko szybszy ale też eliminuje szereg błędów, które mogą pojawić się za sprawą
czynnika ludzkiego. W przypadku, gdy nasza maszyna dysponuje kilkoma interfejsami sieciowymi, to
każdy z nich możemy skonfigurować nieco inaczej. Oczywiście, nie chodzi o samą konfigurację
adresacji ale o szereg parametrów, które klient przesyła do serwera DHCP. To dzięki nim host min.
wie jak ustawić adresację na interfejsie i pod jaki adres słać zapytania DNS. Każdy interfejs może w
ten sposób posiadać własne opcje, które klient DHCP będzie przesyłał do serwera. W tym artykule
postaramy się konfigurować niezależnie dwa interfejsy sieciowe przy pomocy &lt;code&gt;dhclient&lt;/code&gt; , czyli
domyślnego klienta DHCP w linux&#39;ie.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Losowy adres MAC dla WAN w OpenWRT</title>
      <link>https://morfikov.github.io/post/losowy-adres-mac-dla-wan-w-openwrt/</link>
      <pubDate>Sun, 05 Jun 2016 18:28:12 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/losowy-adres-mac-dla-wan-w-openwrt/</guid>
      <description>&lt;p&gt;Na dużych dystrybucjach linux&#39;a adres MAC można zmienić bez problemu. Podobnie sprawa ma się w
przypadku &lt;a href=&#34;https://morfikov.github.io
/post/jak-przypisac-losowy-adres-mac-interfejsu/&#34;&gt;automatycznego generowania takiego adresu
MAC&lt;/a&gt; za każdym razem, gdy chcemy
nawiązać połączenie z internetem. W OpenWRT rozwiązanie tego zadania nie jest tak oczywiste jak, np.
na debianie, ale też znowu nie jest niemożliwe. W repozytorium OpenWRT mamy dostępny pakiet
&lt;code&gt;macchanger&lt;/code&gt; . Niemniej jednak, w przypadku routerów o małych pamięciach flash, instalowanie
dodatkowych pakietów może nie być dobrym pomysłem. Przydałoby się zatem zaprojektować mechanizm
generowania i zmiany adresu MAC interfejsu WAN za każdym razem, gdy będziemy resetować router i to
zadanie postaramy się zrealizować w tym artykule.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja trybu AP kart WiFi na debianie</title>
      <link>https://morfikov.github.io/post/konfiguracja-trybu-ap-kart-wifi-na-debianie/</link>
      <pubDate>Sat, 04 Jun 2016 15:26:58 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-trybu-ap-kart-wifi-na-debianie/</guid>
      <description>&lt;p&gt;Jakiś czas temu dokonałem zakupu adaptera WiFi &lt;a href=&#34;https://morfikov.github.io
/post/recenzja-karta-wifi-tp-link-tl-wn722n/&#34;&gt;TP-Link
TL-WN722n&lt;/a&gt;, a to z tego względu, że
potrzebowałem zewnętrznej karty sieciowej do mojego laptopa. Chodziło generalnie o to, że ten
wbudowany w niego broadcom nie był w stanie robić kilku użytecznych rzeczy, min. testów
penetracyjnych mojej bezprzewodowej sieci domowej. Jak się później okazało, ten zakupiony adapter
posiada też dodatkowy ficzer, którym jest tryb AP (Access Point). Wprawdzie ta karta nie może się
równać z routerami WiFi, bo te zwykle mają więcej anten, z których każda jest lepszej jakości ale
jesteśmy w stanie połączyć ze sobą bezprzewodowo kilka stacji roboczych. Trzeba jednak wziąć po
uwagę, że zasięg jak i transfer będą w dużej mierze ograniczone. W tym wpisie postaramy się
przerobić zwykłą maszynę, na której jest zainstalowany debian, na punkt dostępowy sieci WiFi.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak ukryć hostname w protokole DHCP</title>
      <link>https://morfikov.github.io/post/jak-ukryc-hostname-w-protokole-dhcp/</link>
      <pubDate>Tue, 24 May 2016 20:07:14 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-ukryc-hostname-w-protokole-dhcp/</guid>
      <description>&lt;p&gt;Darmowe hotspoty sieci WiFi są dostępne w każdym mieście. Dzięki nim możemy uzyskać połączenie z
internetem praktycznie za free. Niemniej jednak, takie połączenie nie jest do końca bezpieczne i
może zagrażać naszej prywatności. Wiele osób stara się temu przeciwdziałać &lt;a href=&#34;https://morfikov.github.io
/post/jak-przypisac-losowy-adres-mac-interfejsu/&#34;&gt;generując losowy adres
MAC&lt;/a&gt;. No i to jest jakieś
wyjście, o ile ten adres jest generowany z głową. Niemniej jednak, w takich sieciach WiFi, host ma
przydzielaną adresację za pomocą &lt;a href=&#34;https://pl.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol&#34;&gt;protokołu
DHCP&lt;/a&gt;. Ci, którzy wiedza, jak
odbywa się konfiguracja za pomocą tego protokołu, wiedzą też, że nasz komputer przesyła pewne dane
do serwera DHCP. Jakie dane? To zwykle zależy od konfiguracji klienta DHCP. Na linux&#39;ach domyślnym
klientem DHCP jest &lt;code&gt;dhclinet&lt;/code&gt; i on standardowo przesyła nazwę hosta (hostname) w zapytaniu o
adresację. Co nam zatem po losowym adresie MAC, gdy można nas zidentyfikować po nazwie hosta? W tym
artykule postaramy się ukryć lub też losowo wygenerować hostname danej maszyny w sieci.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja DDNS dla OpenDNS</title>
      <link>https://morfikov.github.io/post/konfiguracja-ddns-dla-opendns/</link>
      <pubDate>Mon, 23 May 2016 20:09:42 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-ddns-dla-opendns/</guid>
      <description>&lt;p&gt;Ludzkość w dalszym ciągu siedzi na przestarzałym już od prawie 20 lat protokole IPv4. Nie widać, też
by w najbliższym czasie coś miało się w tej kwestii zmienić. Można, co prawda, wykupić sobie stały
adres IP ale to kosztuje, no i płacimy za coś co powinniśmy mieć w standardzie, gdyby ludzie w końcu
zaczęli korzystać z IPv6. Niemniej jednak, by te wszystkie nasze maszyny podłączyć jakoś do sieci,
potrzebne nam są prywatne adresy IP + NAT lub też dynamicznie zmieniające się adresy publiczne.
Bywają też przypadki, że mamy przydzielane dynamicznie adresy z puli prywatnej, np. w wyniku dbania
o prywatność w sieciach WiFi przez &lt;a href=&#34;https://morfikov.github.io
/post/jak-przypisac-losowy-adres-mac-interfejsu/&#34;&gt;generowanie sobie przy każdym połączeniu losowego adresu
MAC&lt;/a&gt;. Zwykle w takiej sytuacji
zmienia nam się adres zewnętrzny (publiczny), który wskazuje na jeden z adresów naszego ISP. Taki
zmieniający się adres powoduje problemy przy konfiguracji poszczególnych usług sieciowych, np. gdy w
grę wchodzi konfiguracja filtra DNS, który jest zapewniany przez OpenDNS. By tego typu niedogodności
rozwiązać, możemy posłużyć się &lt;a href=&#34;https://pl.wikipedia.org/wiki/DDNS&#34;&gt;DDNS (dynamic DNS)&lt;/a&gt;. Za każdym
razem, gdy adres IP ulega zmianie, klient DDNS informuje o tym fakcie skonfigurowane usługi. W tym
artykule przyjrzymy się nieco bliżej temu mechanizmowi.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Równoważenie ruchu łącz kilku ISP (load balancing)</title>
      <link>https://morfikov.github.io/post/rownowazenie-ruchu-lacz-kilku-isp-load-balancing/</link>
      <pubDate>Sun, 22 May 2016 13:40:04 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/rownowazenie-ruchu-lacz-kilku-isp-load-balancing/</guid>
      <description>&lt;p&gt;Podłączenie pojedynczego komputera do sieci raczej nie stanowi żadnego problemu dla przeciętnego
użytkownika linux&#39;a. Wystarczy jedynie skonfigurować kilka parametrów i możemy oglądać swoje
ulubione serwisy www. Co jednak w przypadku, gdy mamy do dyspozycji kilka łącz internetowych? Jedną
z opcji jest używanie łącza tego ISP, które jest lepsze gabarytowo, a pozostałe łącza trzymać na
wypadek awarii tego pierwszego. Nie jest to zbytnio satysfakcjonujące rozwiązanie, zwłaszcza w
przypadku, gdy tym providerom płacimy za świadczone nam usługi. W taki sposób płacimy, np. za dwa
łącza, a korzystamy z jednego w danej chwili. W linux&#39;ie obsługa wielu łącz różnych ISP jest dość
skomplikowana. By taki mechanizm zaimplementować sobie, trzeba stworzyć kilka tablic routingu.
Następnie ruch sieciowy musi zostać oznaczony w &lt;code&gt;iptables&lt;/code&gt; i przekierowany do tych tablic przez
kernel. Przy odrobienie wysiłku jesteśmy jednak w stanie zaprojektować sobie load balancer, który
będzie równoważył obciążenie łącza między kilku ISP. Dodatkowo, jeśli jedno z łączy nam nawali, to
automatycznie zostaniemy przełączeni na drugie łącze (failover). W tym artykule postaramy się
zaprojektować taki właśnie mechanizm.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Failover i load balancing w OpenWRT (mwan3)</title>
      <link>https://morfikov.github.io/post/failover-load-balancing-openwrt-mwan3/</link>
      <pubDate>Sun, 15 May 2016 13:37:08 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/failover-load-balancing-openwrt-mwan3/</guid>
      <description>&lt;p&gt;Może się zdarzyć tak, że będziemy mieli kiedyś dostęp do łącz kilku różnych providerów
internetowych. Jeśli chcielibyśmy skorzystać z internetu w takiej sytuacji, to trzeba by się
zdecydować na jednego z tych dostępnych ISP. Natomiast łącze pozostałych ISP będzie niewykorzystane
w tym danym momencie, a przecie nie za to im płacimy. Jeśli mamy router z OpenWRT i
&lt;a href=&#34;https://morfikov.github.io
/post/podzial-switcha-na-kilka-vlan-w-openwrt/&#34;&gt;skonfigurowaliśmy przy tym switch tak, by mieć kilka portów
WAN&lt;/a&gt;, to możemy korzystać z usług
wielu ISP w tym samym czasie. Oczywiście, ten mechanizm działa również w przypadku, gdy ISP świadczy
nam usługi za pomocą technologi LTE. Trzeba tylko odpowiednio &lt;a href=&#34;https://morfikov.github.io
/post/modem-lte-pod-openwrt/&#34;&gt;skonfigurować modem USB do pracy na
routerze&lt;/a&gt;. W tym artykule zostanie opisane &lt;a href=&#34;https://wiki.openwrt.org/doc/howto/mwan3&#34;&gt;narzędzie
mwan3&lt;/a&gt;, za pomocą którego zaprojektujemy sobie prosty
failover (łącze awaryjne) lub load balancing (równoważenie ruchu) mając do wykorzystania dwóch
różnych ISP.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Wake On LAN z etherwake pod OpenWRT</title>
      <link>https://morfikov.github.io/post/wake-lan-z-etherwake-pod-openwrt/</link>
      <pubDate>Wed, 11 May 2016 21:39:37 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/wake-lan-z-etherwake-pod-openwrt/</guid>
      <description>&lt;p&gt;Router wyposażony w firmware OpenWRT potrafi wybudzać maszyny w sieci lokalnej. &lt;a href=&#34;https://pl.wikipedia.org/wiki/Wake_on_LAN&#34;&gt;Wake On LAN
(WOL)&lt;/a&gt; nie działa przez internet, a jedynie, jak sama
nazwa sugeruje, w sieci LAN. W tym mechanizmie wykorzystywany jest
&lt;a href=&#34;https://pl.wikipedia.org/wiki/Broadcast&#34;&gt;broadcast&lt;/a&gt;, a routery nie forward&#39;ują pakietów
rozgłoszeniowych. Oczywiście, nic nie stoi na przeszkodzie, by zalogować się na router via SSH od
strony WAN i wybudzić jakąś maszynę z poziomu routera. Komputery, które chcemy budzić muszą mieć
odpowiednią płytę główną. Prawdopodobnie wszystkie nowsze płyty już taką właściwość posiadają.
Dodatkowo, trzeba w BIOS&#39;ie ustawić odpowiednie opcje. Ważną rzeczą jest, by nie wyłączać PC
przyciskiem w obudowie (lub na zasilaczu), bo wtedy nie będzie możliwe wybudzenie maszyny, nawet po
dostarczeniu jej zasilania. Wyłączenia maszyny musimy dokonać z poziomu systemu operacyjnego, tylko
wtedy WOL zadziała. W tym wpisie pokażemy jak przy pomocy &lt;code&gt;etherwake&lt;/code&gt; wybudzić określonego hosta w
sieci LAN.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NAT Reflection oraz NAT Loopback w OpenWRT</title>
      <link>https://morfikov.github.io/post/nat-reflection-oraz-nat-loopback-w-openwrt/</link>
      <pubDate>Mon, 09 May 2016 22:09:47 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/nat-reflection-oraz-nat-loopback-w-openwrt/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Network_address_translation#NAT_loopback&#34;&gt;Mechanizm NAT Loopback&lt;/a&gt;
nazywany też NAT Reflection lub NAT Hairpinning często jest pomijany przy omawianiu tematyki
firewall&#39;a. Chodzi generalnie o możliwość uzyskiwania dostępu do zasobów w sieci lokalnej po
adresie, który jest na zewnętrznym interfejsie sieciowym routera. W taki sposób mając dwa hosty w
sieci lokalnej, jeden z nich jest w stanie uzyskać dostęp do usług znajdujących się na drugim hoście
przez wykorzystanie zewnętrznego często też publicznego adresu IP. W tym wpisie przybliżymy sobie
zasadę działania tego mechanizmu.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sieć bezprzewodowa WiFi w OpenWRT (WLAN)</title>
      <link>https://morfikov.github.io/post/siec-bezprzewodowa-wifi-w-openwrt-wlan/</link>
      <pubDate>Wed, 04 May 2016 20:26:35 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/siec-bezprzewodowa-wifi-w-openwrt-wlan/</guid>
      <description>&lt;p&gt;Sieć bezprzewodowa w dzisiejszych czasach to podstawa. Z reguły routery posiadają jedno radio
operujące na częstotliwości 2,4 GHz. Te nieco nowsze (i droższe) modele mają do dyspozycji dwa
radia: 2,4 GHz oraz 5 GHz. OpenWRT zapewnia wsparcie zarówno dla sieci pracującej w paśmie 2.4 GHz
jak i tej nadającej w 5 GHz. Konfiguracja tych pasm w OpenWRT różni się nieco. Weźmy dla przykładu
obsługę kanału 12 i 13, którą dotyczy tylko sieci pasma 2.4 GHz. Podobnie sprawa ma się z
szerokością kanałów, która jest inna w przypadku obu tych pasm. Niemniej jednak, większość opcji
pozostaje taka sama i w tym artykule rzucimy okiem na zagadnienie konfiguracji sieci WiFi w OpenWRT.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja interfejsów sieciowych w OpenWRT</title>
      <link>https://morfikov.github.io/post/konfiguracja-interfejsow-sieciowych-w-openwrt/</link>
      <pubDate>Tue, 03 May 2016 02:08:31 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-interfejsow-sieciowych-w-openwrt/</guid>
      <description>&lt;p&gt;Routery, które posiadamy w naszych domach, znane są z tego, że mają szereg interfejsów sieciowych.
Taki przeciętny router jest wyposażony w
&lt;a href=&#34;https://pl.wikipedia.org/wiki/Prze%C5%82%C4%85cznik_sieciowy&#34;&gt;switch&lt;/a&gt; z 5 portami
&lt;a href=&#34;https://pl.wikipedia.org/wiki/RJ-45&#34;&gt;RJ-45&lt;/a&gt;. Zwykle jest on też &lt;a href=&#34;https://pl.wikipedia.org/wiki/Wirtualna_sie%C4%87_lokalna&#34;&gt;wirtualnie podzielony
(VLAN)&lt;/a&gt; na kilka interfejsów, standardowo
LAN i WAN. Do tego z reguły dochodzą jeszcze interfejsy bezprzewodowe WLAN na pasmo 2.5GHz i 5GHz.
Jakby tego było mało, to mamy jeszcze wirtualny interfejs mostka, który spina ze sobą lokalne
interfejsy switch&#39;a z interfejsami bezprzewodowymi tworząc w ten sposób jeden interfejs, przez który
pakiety wydostają się z naszej sieci i lecą dalej w świat przez interfejs WAN. Jest to trochę
skomplikowane, dlatego też w tym wpisie przyjrzymy się całej tej konfiguracji interfejsów sieciowych
w OpenWRT.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak sklonować adres MAC w OpenWRT</title>
      <link>https://morfikov.github.io/post/jak-sklonowac-adres-mac-w-openwrt/</link>
      <pubDate>Mon, 02 May 2016 17:25:31 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-sklonowac-adres-mac-w-openwrt/</guid>
      <description>&lt;p&gt;Każde urządzenie sieciowe ma inny &lt;a href=&#34;https://pl.wikipedia.org/wiki/Adres_MAC&#34;&gt;adres MAC&lt;/a&gt;. Jest to
numer, który identyfikuje je w strukturze sieci. Gdy zachodzi potrzeba rozbudowania sieci domowej,
możemy napotkać problemy z naszym obecnym ISP. Załóżmy, że posiadaliśmy do tej pory jeden komputer,
który był wpięty bezpośrednio do łącza ISP. Jeśli dokupiliśmy router i podłączymy go w miejsce
komputera, to urządzenie, które widzi nasz provider, ulega zmianie. Konkretnie, to nie ma znaczenia
samo urządzenie. Liczy się jedynie adres MAC. Providerzy internetowi mają powiązane adresy MAC z
adresami IP i nowo wpięty router nie otrzyma adresu IP, bo ma nieautoryzowany MAC. W takiej sytuacji
zwykle wystarczy telefon do ISP z prośbą przepisanie adresu. Niemniej jednak, czasami ISP każą sobie
dodatkowo płacić za tę czynność. Jeśli jesteśmy postawieni w takiej sytuacji, to możemy sklonować
sobie adres MAC tej maszyny, którą wcześniej widział nasz provider internetowy. Z jego perspektywy
nic się nie zmieni, a my będziemy mogli sobie rozdzielić sygnał na tyle komputerów, ile tylko
chcemy. W tym wpisie zobaczymy jak pod OpenWRT przeprowadzić klonowanie adresu MAC.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak przypisać losowy adres MAC do interfejsu</title>
      <link>https://morfikov.github.io/post/jak-przypisac-losowy-adres-mac-interfejsu/</link>
      <pubDate>Fri, 29 Apr 2016 16:42:55 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-przypisac-losowy-adres-mac-interfejsu/</guid>
      <description>&lt;p&gt;Interfejsy kart sieciowych, które są instalowane w komputerach, posiadają adres MAC (&lt;a href=&#34;https://en.wikipedia.org/wiki/MAC_address&#34;&gt;Media Access
Control&lt;/a&gt;). Jest to unikalny identyfikator, który wyróżnia
nasz komputer spośród tłumu. Na podstawie tego adresu można nie tylko określić markę sprzętu, którą
się posługujemy ale także można sklasyfikować cały nasz ruch sieciowy. W ten sposób bardzo prosto
możemy zostać zidentyfikowani wymieniając dane przez darmowe hotspoty sieci bezprzewodowych WiFi.
Niemniej jednak, jesteśmy się w stanie obronić przed tego typu inwigilacją zmieniając adres MAC
naszego komputera. Nie jest to zbytnio trudne ale trzeba uważać, by znowu nie przesadzić w drugą
stronę i czasem nie zostać zidentyfikowanym przez naszą &amp;quot;odmienność&amp;quot;. W tym wpisie postaramy się
wypracować taki mechanizm, który zmieni nam adres MAC przy każdym podłączeniu do sieci i przy
zachowaniu zdroworozsądkowych zasad.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja połączenia Aero2 na OpenWRT</title>
      <link>https://morfikov.github.io/post/konfiguracja-polaczenia-aero2-na-openwrt/</link>
      <pubDate>Fri, 22 Apr 2016 16:19:41 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-polaczenia-aero2-na-openwrt/</guid>
      <description>&lt;p&gt;Darmowy internet oferowany przez Aero2 nie grzeszy zbytnio osiągami, bo mamy do dyspozycji jedynie
512 kbit/s. Niemniej jednak, taka prędkość w zupełności wystarcza do przeglądania stron
internetowych. Gorzej z oglądaniem materiałów video w serwisach takich jak YouTube. To jednak nie ma
raczej większego znaczenia, bo przecie usługa jest za free, a poza tym, możemy dokupić szereg
pakietów aktywujących pełną prędkość w technologi LTE. Problem w tym, że od Aero2 możemy otrzymać
tylko jedną kartę SIM na użytkownika. Może i mamy możliwość dostania kilku kart na jeden adres
zamieszkania ale i tak trzeba by dla każdego SIM załatwić osobny modem LTE. Zwykle takie rozwiązanie
nie wchodzi w grę, zwłaszcza, gdy z internetu korzystamy raczej sporadycznie. Mając jednak router z
alternatywnym firmware OpenWRT, możemy do jednego z jego portów USB doczepić taki modem i udostępnić
połączenie internetowe wszystkim urządzeniom w naszej sieci domowej. W tym artykule postaramy się to
zadanie zrealizować.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Wvdial i PPP, czyli modem LTE w trybie RAS</title>
      <link>https://morfikov.github.io/post/wvdial-ppp-czyli-modem-lte-w-trybie-ras/</link>
      <pubDate>Thu, 14 Apr 2016 19:01:46 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/wvdial-ppp-czyli-modem-lte-w-trybie-ras/</guid>
      <description>&lt;p&gt;Jak wielu użytkowników linux&#39;a zapewne wie, modem GSM/UMTS/LTE może pracować w kilku trybach.
Najpopularniejszym z nich jest tryb RAS wykorzystujący interfejsy udostępniane przez to urządzenie
w katalogu &lt;code&gt;/dev/&lt;/code&gt; , zwykle &lt;code&gt;ttyUSB0&lt;/code&gt; , &lt;code&gt;ttyUSB1&lt;/code&gt; , etc. By taki modem mógł nawiązać połączenie z
siecią, potrzebny jest demon &lt;a href=&#34;https://pl.wikipedia.org/wiki/Point_to_Point_Protocol&#34;&gt;PPP&lt;/a&gt;. O trybie
RAS wspominałem już parokrotnie, min. we wpisach dotyczących &lt;a href=&#34;https://morfikov.github.io
/post/darmowy-internet-lte-od-rbmplay/&#34;&gt;konfiguracji połączenia LTE w
RBM/Play&lt;/a&gt; jak i przy omawianiu &lt;a href=&#34;https://morfikov.github.io
/post/aero2-w-polaczeniu-z-dnsmasq-dnscrypt-proxy/&#34;&gt;problemów
z resolver&#39;em DNS w przypadku
Aero2&lt;/a&gt;. Generalnie ten tryb
różni się trochę od &lt;a href=&#34;https://morfikov.github.io
/post/konfiguracja-modemu-lte-w-trybie-ndis-ncm/&#34;&gt;trybu
NDIS(NCM)&lt;/a&gt; głównie tym, że tutaj
nie uzyskamy większych prędkości niż 20-30 mbit/s. Niemniej jednak, jeśli nie mamy dobrej jakości
połączenia LTE, lub nasz modem z jakiegoś powodu pod linux&#39;em nie potrafi pracować w trybie NDIS,
to możemy skonfigurować połączenie w trybie RAS wykorzystując do tego celu &lt;code&gt;wvdial&lt;/code&gt; oraz demona PPP.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja modemu LTE w trybie NDIS (NCM)</title>
      <link>https://morfikov.github.io/post/konfiguracja-modemu-lte-w-trybie-ndis-ncm/</link>
      <pubDate>Tue, 05 Apr 2016 15:45:10 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-modemu-lte-w-trybie-ndis-ncm/</guid>
      <description>&lt;p&gt;Sporo modemów LTE potrafi pracować w kilku trybach. Weźmy na przykład modem Huawei E3372s-153 w
wersji NON-HiLink. Standardowo obsługuje on tryb RAS (&lt;a href=&#34;https://en.wikipedia.org/wiki/Remote_Access_Service&#34;&gt;Remote Access
Services&lt;/a&gt;) jak i NDIS (&lt;a href=&#34;https://en.wikipedia.org/wiki/Network_Driver_Interface_Specification&#34;&gt;Network Driver
Interface Specification&lt;/a&gt;).
Domyślnie też włączony jest NDIS ale, by móc z tego trybu korzystać na debianie, musimy nieco
inaczej skonfigurować sobie połączenie sieciowe. Gdy w grę wchodzą modemy LTE, to użytkownicy zwykli
korzystać z narzędzia &lt;code&gt;wvdial&lt;/code&gt; , który zaprzęga do pracy demona PPP i w ten sposób modem zaczyna
pracować w trybie RAS, a nie NDIS. W tym wpisie skonfigurujemy sobie połączenie sieciowe na debianie
w taki sposób, by wykorzystywało ono potencjał trybu NDIS.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Modem LTE pod OpenWRT (Huawei E3372s-153)</title>
      <link>https://morfikov.github.io/post/modem-lte-pod-openwrt/</link>
      <pubDate>Mon, 04 Apr 2016 19:44:30 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/modem-lte-pod-openwrt/</guid>
      <description>&lt;p&gt;Modem LTE jest zwykle przeznaczony dla jednej stacji roboczej. Podpina się go do portu USB i zwykle
po chwili można zestawić połączenie z siecią. W przypadku, gdy mamy kilka komputerów i na każdym z
nich chcemy mieć internet, to mamy z grubsza trzy wyjścia. Pierwszym z nich jest dokupienie
kolejnych modemów LTE, co zwykle nie wchodzi w grę. Drugą opcją jest zakup routera LTE. Różni się on
od zwykłego routera WiFi tym, że ma już wbudowany modem LTE. Jeśli jednak dysponujemy własnym
routerem WiFi, to niekoniecznie musimy się go pozbywać, zwłaszcza w przypadku, gdy już zakupiliśmy
osobno modem LTE. Jeśli na tym routerze WiFi jesteśmy w stanie zainstalować firmware OpenWRT, to
istnieje duża szansa na to, że damy radę ten router przerobić na router LTE. W tym wpisie postaramy
się ten zabieg przeprowadzić z wykorzystaniem routera &lt;a href=&#34;http://www.tp-link.com.pl/products/details/cat-9_Archer-C7.html&#34;&gt;TP-LINK Archer C7
v2&lt;/a&gt; oraz modemu LTE Huawei
E3372s-153 w wersji NON-HiLink.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Darmowy internet LTE od RBM (Play)</title>
      <link>https://morfikov.github.io/post/darmowy-internet-lte-od-rbmplay/</link>
      <pubDate>Sun, 03 Apr 2016 14:57:40 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/darmowy-internet-lte-od-rbmplay/</guid>
      <description>&lt;p&gt;We wpisie dotyczącym &lt;a href=&#34;https://morfikov.github.io
/post/aero2-w-polaczeniu-z-dnsmasq-dnscrypt-proxy/&#34;&gt;konfiguracji serwerów DNS na potrzeby
Aero2&lt;/a&gt; wspomniałem, że ten
operator daje możliwość korzystania z internetu LTE praktycznie za darmo. Trzeba tam, co prawda,
złożyć wniosek i zapłacić jakieś grosze za przysłanie karty SIM ale opłat jako takich za
połączenie internetowe nie ma żadnych. Uporczywy może być jedynie kod CAPTCHA, który trzeba
wpisywać co 60 minut. Szukając na necie informacji na temat darmowego internetu LTE &lt;a href=&#34;http://jdtech.pl/2015/09/darmowy-internet-lte-w-redbullmobile-porady-2015.html&#34;&gt;doszukałem się
tego oto wpisu&lt;/a&gt;.
Jest tam przedstawiony sposób na włączenie bezpłatnej usługi internetu LTE u operatora RBM (Play). Z
początku wydawało mi się to niezbyt wiarygodne, by tego typu oferta była w ogóle dostępna ale
okazało się jednak, że nie ma tutaj żadnego haczyka i ten internet LTE faktycznie można włączyć i
korzystać z niego za free. W tym wpisie postaramy się skonfigurować Debiana właśnie na potrzeby tej
usługi.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Aero2 w połączeniu z dnsmasq i dnscrypt-proxy</title>
      <link>https://morfikov.github.io/post/aero2-w-polaczeniu-z-dnsmasq-dnscrypt-proxy/</link>
      <pubDate>Sat, 02 Apr 2016 18:47:47 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/aero2-w-polaczeniu-z-dnsmasq-dnscrypt-proxy/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aero2.pl/&#34;&gt;Aero2&lt;/a&gt; już od dość dawna oferuje darmowy dostęp do internetu w technologi LTE
ale jakoś wcześniej nie byłem tym tematem zainteresowany. Parę dni temu złożyłem jednak wniosek o
kartę SIM, tak by posiadać zapasowe łącze na wypadek, gdyby mój obecny ISP z jakiegoś powodu padł.
Aero2 oferuje wersję komercyjną jak i tę za free i każda z nich ma swoje wady i zalety. Jako, że to
łącze ma robić jedynie za zapas, to korzystam z wersji FREE, a jest ono dość poważne ograniczenie,
tj. występuje tutaj &lt;a href=&#34;https://pl.wikipedia.org/wiki/CAPTCHA&#34;&gt;kod CAPTCHA&lt;/a&gt;, który trzeba wpisywać tak
co godzinę, po czym należy resetować modem. Ten kod może zostać zaserwowany jedynie w przypadku
korzystania z DNS Aero2 i pozornie odpada możliwość używania własnego systemu DNS opartego o
&lt;a href=&#34;http://www.thekelleys.org.uk/dnsmasq/doc.html&#34;&gt;dnsmasq&lt;/a&gt; i &lt;a href=&#34;https://dnscrypt.org/&#34;&gt;dnscrypt-proxy&lt;/a&gt;.
Po kilku dniach eksperymentów udało mi się wypracować przyzwoitą konfigurację, która potrafi obejść
to ograniczenie, poprawiając tym samym prywatność i bezpieczeństwo w internecie korzystając z
darmowego LTE za sprawą Aero2. W tym wpisie postaramy się zaimplementować ten mechanizm na debianie.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja tunelu 6in4 w OpenWRT (IPv6)</title>
      <link>https://morfikov.github.io/post/konfiguracja-tunelu-6in4-w-openwrt-ipv6/</link>
      <pubDate>Tue, 01 Mar 2016 15:28:22 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-tunelu-6in4-w-openwrt-ipv6/</guid>
      <description>&lt;p&gt;Ludzie z IETF prawie 20 lat temu opracowali protokół IPv6. Niemniej jednak, w dalszym ciągu ogromna
część providerów internetowych nie ma zamiaru zaimplementować u siebie jego obsługi. &lt;a href=&#34;http://www.google.com/intl/pl/ipv6/statistics.html&#34;&gt;Ilość
użytkowników, którzy mają natywne wsparcie dla protokołu
IPv6&lt;/a&gt; oscyluje w granicach 10% . Jeśli jednak
mamy do dyspozycji router z firmware OpenWRT na pokładzie, to możemy pokusić się o skonfigurowanie
tunelu 6in4. Jedynym warunkiem jest posiadanie zewnętrznego adresu IP. Tunel 6in4 jest bardzo
podobny do tego &lt;a href=&#34;https://morfikov.github.io
/post/implementacja-protokolu-ipv6-za-pomoca-tunelu-6to4/&#34;&gt;6to4, który był opisywany na przykładzie
debiana&lt;/a&gt;. Tutaj jednak
ten tunel zostanie ustawiony na routerze i w ten sposób cała wewnętrzna sieć będzie miała
przydzieloną określoną przestrzeń adresową z puli IPv6.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementacja protokołu SSL/TLS w vsftpd</title>
      <link>https://morfikov.github.io/post/implementacja-protokolu-ssltls-w-vsftpd/</link>
      <pubDate>Sat, 13 Feb 2016 22:30:54 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/implementacja-protokolu-ssltls-w-vsftpd/</guid>
      <description>&lt;p&gt;Kwestię &lt;a href=&#34;https://morfikov.github.io
/post/konfiguracja-vsftpd-w-debianie/&#34;&gt;konfiguracji serwera FTP na debianie w oparciu o
vsftpd&lt;/a&gt; już przerabialiśmy. Została nam
jeszcze do omówienia implementacja protokołu SSL/TLS. FTP nie jest bezpiecznym protokołem i wszelkie
dane logowania są przesyłane przez sieć otwartym tekstem. W przypadku, gdy stawiamy lokalny serwer
FTP w zaufanej sieci lub też będziemy korzystać jedynie z dostępu anonimowego, to raczej nie
potrzebujemy szyfrować danych. Trzeba pamiętać, że każde szyfrowanie dość mocno obciąża procesor,
który może stanowić wąskie gardło przy przesyle danych. W tym wpisie założenie jest takie, że
bezpieczeństwo danych, które będziemy przesyłać za pomocą protokołu FTP, jest rzeczą najważniejszą i
dlatego wdrożyć szyfrowanie.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja vsftpd w Debianie</title>
      <link>https://morfikov.github.io/post/konfiguracja-vsftpd-w-debianie/</link>
      <pubDate>Fri, 12 Feb 2016 02:39:29 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-vsftpd-w-debianie/</guid>
      <description>&lt;p&gt;Serwery FTP umożliwiają przesyłanie plików przez sieć za pomocą protokołu TCP. Raczej wszyscy
mieliśmy z nimi już do czynienia. Może niekoniecznie zarządzaliśmy takimi serwerami ale na pewno
zdarzyło nam się pobierać pliki za ich pomocą. W tym wpisie jednak postaramy się skonfigurować taki
serwer FTP w oparciu o oprogramowanie &lt;a href=&#34;https://security.appspot.com/vsftpd.html&#34;&gt;vsftpd&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Backup dysku przez sieć przy pomocy dd i netcat</title>
      <link>https://morfikov.github.io/post/backup-dysku-przez-siec-przy-pomocy-dd-netcat/</link>
      <pubDate>Mon, 08 Feb 2016 00:45:07 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/backup-dysku-przez-siec-przy-pomocy-dd-netcat/</guid>
      <description>&lt;p&gt;Dyski talerzowe mają to do siebie, że zawierają elementy mechaniczne, np. ramię głowicy czy też sam
napęd dysku. Te ruchome elementy się zużywają podczas eksploatacji dysku i trzeba mieć na uwadze, że
prędzej czy później taki dysk ulegnie awarii. Statystycznie rzecz biorąc, około 5% dysków rocznie
zdycha. Oczywiście to tylko statystyka i w sporej części przypadków dyski twarde ulegają awarii
znacznie wcześniej. Niekoniecznie musimy mieć tutaj do czynienia z &lt;a href=&#34;https://pl.wikipedia.org/wiki/Planowane_starzenie&#34;&gt;planowanym postarzaniem
sprzętu&lt;/a&gt; i zwyczajnie możemy trafić na trefny
model, którego wada fabryczna wyjdzie po 2-3 miesiącach użytkowania. Poza tym, producenci dysków
implementują w nich te energooszczędne rozwiązania, które znacznie skracają żywotność nośników.
Można o tym przekonać się analizując &lt;a href=&#34;https://morfikov.github.io
/post/parkowanie-glowicy-w-dyskach-wstern-digital/&#34;&gt;193 parametr SMART (Load/Unload Cycle) odpowiadający za
parkowanie głowicy&lt;/a&gt; w dyskach
firmy Western Digital. Także na dobrą sprawę nie możemy być pewni kiedy nam ten dysk zwyczajnie
odmówi posłuszeństwa. Dlatego też powinniśmy się zabezpieczyć na taką ewentualność robiąc kopię
bezpieczeństwa (backup) danych zawartych na dysku. W tym wpisie postaramy się zrobić kompletny obraz
dysku laptopa przy pomocy narzędzi &lt;code&gt;dd&lt;/code&gt; i &lt;code&gt;nc&lt;/code&gt; (netcat). Nie będziemy przy tym rozkręcać urządzenia
czy też podłączać do portu USB zewnętrznego nośnika. Dane prześlemy zwyczajnie przez sieć.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementacja protokołu IPv6 za pomocą tunelu 6to4</title>
      <link>https://morfikov.github.io/post/implementacja-protokolu-ipv6-za-pomoca-tunelu-6to4/</link>
      <pubDate>Thu, 04 Feb 2016 16:57:37 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/implementacja-protokolu-ipv6-za-pomoca-tunelu-6to4/</guid>
      <description>&lt;p&gt;Ogromna cześć lokalnych ISP zdaje się nie nadążać za ciągle zmieniającą się rzeczywistością. Problem
dotyczy implementacji protokołu IPv6, który jest już z nami od bardzo wielu lat. W przypadku mojego
obecnego ISP raczej nie mam co liczyć na to, by w bliżej nieokreślonej przyszłości dodał on obsługę
tego protokołu. Istnieje jednak mechanizm zwany &lt;a href=&#34;https://pl.wikipedia.org/wiki/6to4&#34;&gt;tunelowaniem pakietów protokołu IPv6 wewnątrz
pakietów protokołu IPv4&lt;/a&gt; (w skrócie 6to4), którym warto się
zainteresować. W ogromnym skrócie, część puli adresowej IPv6 jest zarezerwowana i zmapowana na
adresy protokołu IPv4. Dzięki takiemu podejściu, każdy kto posiada stały zewnętrzny adres IPv4 ma
również adres w puli IPv6. Mając zatem zarezerwowany adres, możemy pokusić się o utworzenie tunelu
6to4, co aktywuje w naszej infrastrukturze ten nowszy protokół obchodząc jednocześnie ograniczenia
ISP. Trzeba jednak mieć na względzie, że nie jest to natywne wsparcie dla protokołu IPv6 i jest
niemal pewne, że wystąpią mniejsze lub większe problemy z wydajnością.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Streaming obrazu za sprawą ffmpeg i netcat</title>
      <link>https://morfikov.github.io/post/streaming-obrazu-za-sprawa-ffmpeg-netcat/</link>
      <pubDate>Sat, 30 Jan 2016 20:37:08 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/streaming-obrazu-za-sprawa-ffmpeg-netcat/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://forum.dug.net.pl/viewtopic.php?id=28188&#34;&gt;Na forum DUG&#39;a pojawił się ciekawy post&lt;/a&gt;, w którym
autor wątku chciał wykonać coś co określił jako &amp;quot;display mirroring&amp;quot;. Poszukałem trochę informacji na
temat tego zagadnienia i okazało się, że to nic innego jak tylko wyświetlenie tej samej zawartości,
np. na dwóch monitorach. Nie jest to nic zaawansowanego, bo przecie Xserver jest w stanie tego typu
zadanie zrealizować. Niemniej jednak, oba monitory muszą być podłączone do tego samego komputera. W
tym przypadku mamy dwie maszyny i dwa osobne monitory. Celem jest przesłanie obrazu z jednej maszyny
na drugą za pomocą sieci. W tym podlinkowanym wątku została poruszona kwestia przechwycenia obrazu
przy pomocy &lt;code&gt;ffmpeg&lt;/code&gt; i przesłania go przez sieć za pomocą &lt;code&gt;nc&lt;/code&gt; (netcat). Tak bardzo zainteresowało
mnie to rozwiązanie, że postanowiłem zobaczyć jak wygląda ono w praktyce.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jak skonfigurować bonding w Debian linux (eth0&#43;wlan0)</title>
      <link>https://morfikov.github.io/post/konfiguracja-interfejsow-bond-bonding/</link>
      <pubDate>Sat, 02 Jan 2016 15:07:13 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-interfejsow-bond-bonding/</guid>
      <description>&lt;p&gt;W artykule poświęconym &lt;a href=&#34;https://morfikov.github.io
/post/konfiguracja-polaczenia-wifi-pod-debianem/&#34;&gt;konfiguracji sieci WiFi na Debianie z wykorzystaniem narzędzia
wpa_supplicant&lt;/a&gt; wspomniałem parę słów na temat &lt;a href=&#34;https://www.kernel.org/pub/linux/kernel/people/marcelo/linux-2.4/Documentation/networking/bonding.txt&#34;&gt;interfejsu bond&lt;/a&gt;. Bonding na linux
wykorzystywany jest w zasadzie do spięcia kilku interfejsów sieciowych, w tym przewodowych
( &lt;code&gt;eth0&lt;/code&gt; ) i bezprzewodowych ( &lt;code&gt;wlan0&lt;/code&gt; ) w jeden (zwykle &lt;code&gt;bond0&lt;/code&gt; ). Takie rozwiązanie sprawia, że
w przypadku awarii któregoś z podpiętych interfejsów, my nie tracimy połączenia z siecią i nie
musimy nic nigdzie przełączać, by to połączenie przywrócić. To rozwiązanie jest o tyle użyteczne,
że w przypadku, gdy podepniemy przewód do gniazda RJ-45 w naszym laptopie, to komunikacja będzie
odbywać się po kablu. Natomiast jeśli przewód zostanie odłączony, to system automatycznie przejdzie
na komunikację bezprzewodową. W tym wpisie spróbujemy zaprojektować sobie właśnie tego typu
mechanizm zarówno za sprawą pakietu &lt;code&gt;ifupdown&lt;/code&gt; , gdzie konfiguracja interfejsów sieciowych jest
zarządzana przez plik &lt;code&gt;/etc/network/interfaces&lt;/code&gt; , jak i przy pomocy natywnego rozwiązania jakie
oferuje systemd/networkd.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja interfejsów IFB w linux&#39;ie</title>
      <link>https://morfikov.github.io/post/konfiguracja-interfejsow-ifb-w-linuxie/</link>
      <pubDate>Wed, 16 Dec 2015 14:46:50 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-interfejsow-ifb-w-linuxie/</guid>
      <description>&lt;p&gt;Ten wpis również będzie poświęcony tematyce
&lt;a href=&#34;http://linux-ip.net/articles/Traffic-Control-HOWTO/index.html&#34;&gt;kontroli&lt;/a&gt; i
&lt;a href=&#34;https://lukasz.bromirski.net/docs/translations/lartc-pl.html&#34;&gt;kształtowania&lt;/a&gt; ruchu sieciowego w
linux&#39;ie, z tym, że ograniczymy się tutaj do konfiguracji interfejsów IFB. Działają one na podobnej
zasadzie co &lt;a href=&#34;https://morfikov.github.io
/post/konfiguracja-interfejsow-imq-w-linuxie/&#34;&gt;interfejsy IMQ&lt;/a&gt;.
Niewątpliwą zaletą interfejsów IFB jest fakt, że są one natywnie wspierane przez kernel linux&#39;a,
przez co ich obsługa jest dziecinnie prosta. Wadą jest z kolei to, że nie do końca damy radę
kształtować ruch przychodzący do naszej maszyny. Tak czy inaczej, postaramy się skonfigurować te
interfejsy i zobaczymy co z nich idzie wycisnąć.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kształtowanie ruchu sieciowego (Traffic Control)</title>
      <link>https://morfikov.github.io/post/ksztaltowanie-ruchu-sieciowego-traffic-control/</link>
      <pubDate>Tue, 15 Dec 2015 20:40:52 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/ksztaltowanie-ruchu-sieciowego-traffic-control/</guid>
      <description>&lt;p&gt;Każdy z nas chciałby, aby jego sieć działała możliwie szybko i bezproblemowo. W przypadku, gdy łącze
nie jest zbytnio obciążone, a my jesteśmy jedynym użytkownikiem internetu, to nie doświadczymy
raczej żadnych problemów z połączeniem. Rzecz w tym, że im więcej użytkowników ma nasza sieć, tym
większe prawdopodobieństwo, że zostanie ona przeciążona, tj. będziemy chcieli przesyłać więcej
danych niż sieć jest w stanie obsłużyć. W ten sposób zaczną pojawiać się kolejki pakietów na
interfejsach, których obsługa zajmuje trochę czasu. Rosą zatem opóźnienia, które są bardzo
odczuwalne w momencie, gdy ktoś lubi sobie pograć w różnego rodzaju gry online. Innym problemem może
być sieć P2P, gdzie pojedynczy host z naszej sieci może nawiązywać dziesiątki czy nawet setki
połączeń i tym samym zapychać łącze nie dając szansy innym użytkownikom na komfortowe korzystanie
z internetu. W obu przypadkach może nam pomóc &lt;a href=&#34;http://lartc.org/lartc.html&#34;&gt;kształtowanie ruchu
sieciowego&lt;/a&gt; (Traffic Control), która jest w stanie nadać pakietom
odpowiedni priorytet, tak by część z nich nie musiała czekać zbyt długo w kolejce. W tym wpisie
przyjrzymy się bliżej temu mechanizmowi.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja interfejsów IMQ w linux&#39;ie</title>
      <link>https://morfikov.github.io/post/konfiguracja-interfejsow-imq-w-linuxie/</link>
      <pubDate>Tue, 15 Dec 2015 14:38:30 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-interfejsow-imq-w-linuxie/</guid>
      <description>&lt;p&gt;W linux&#39;ie, kształtowanie przychodzącego ruchu sieciowego stwarza dość poważne problemy. Na dobrą
sprawę, obecnie w kernelu nie ma żadnego mechanizmu, który byłby w stanie to zadanie realizować.
Istnieją, co prawda, &lt;a href=&#34;https://wiki.linuxfoundation.org/networking/ifb&#34;&gt;interfejsy IFB&lt;/a&gt; ale za ich
pomocą jesteśmy w stanie z powodzeniem kształtować jedynie ruch wychodzący. W przypadku pakietów
napływających, możemy jedynie ograniczyć im przepustowość. W tym powyższym linku jest wzmianka, że
te interfejsy IFB są następcą &lt;a href=&#34;https://github.com/imq/linuximq/wiki/WhatIs&#34;&gt;interfejsów IMQ&lt;/a&gt;.
Niemniej jednak, ten drugi projekt zdaje się działać, choć nie jest obecnie wspierany przez kernel
linux&#39;a. W tym wpisie postaramy się skonfigurować działające interfejsy IMQ, tak, by za ich pomocą
skutecznie kształtować ruch przychodzący.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Przewidywalne nazwy interfejsów sieciowych</title>
      <link>https://morfikov.github.io/post/przewidywalne-nazwy-interfejsow-sieciowych/</link>
      <pubDate>Sun, 22 Nov 2015 21:44:11 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/przewidywalne-nazwy-interfejsow-sieciowych/</guid>
      <description>&lt;p&gt;Podczas jednej z aktualizacji systemu został mi zwrócony pewien komunikat. Oświadczał on bowiem, że
od jakiegoś czasu nazewnictwo interfejsów sieciowych w systemie uległo zmianie, oraz, że w wersji 10
debiana, ten obecny system nazw nie będzie już wspierany. Rozchodzi się o coś co nazywa się
&lt;a href=&#34;https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/&#34;&gt;Predictable Network Interface
Names&lt;/a&gt;, czyli
przewidywalne nazwy interfejsów sieciowych. Jako, że aktualne wydanie stabilnego debiana ma numerek
8 i w niedalekiej przyszłości zostanie wydana 9, to przydałoby się już zacząć migrować na ten nowy
system nazw. W tym wpisie dokonamy takiej migracji i zobaczymy jakie zmiany musimy poczynić, by nie
doświadczyć problemów związanych z tą migracją nazw.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Statystyki transferu danych w sieci (vnstat)</title>
      <link>https://morfikov.github.io/post/statystyki-transferu-danych-w-sieci-vnstat/</link>
      <pubDate>Thu, 19 Nov 2015 16:16:51 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/statystyki-transferu-danych-w-sieci-vnstat/</guid>
      <description>&lt;p&gt;W prehistorycznych czasach, internet był bardzo limitowany. Nie chodzi tutaj o prędkość, która
obecnie sięga 100+ mbit/s, a o transfer danych. Świat poszedł już trochę do przodu od tamtego czasu
i chyba żaden ISP, który obecnie dostarcza internet stacjonarny, nie narzuca swoim klientom ile
danych mogą pobrać i/lub wysłać w konkretnym miesiącu. Problem pojawia się w przypadku internetu
mobilnego, który w niedługim czasie prawdopodobnie zapanuje nad światem. Mowa oczywiście o
&lt;a href=&#34;https://pl.wikipedia.org/wiki/Long_Term_Evolution&#34;&gt;LTE&lt;/a&gt;, czyli szerokopasmowym internecie
bezprzewodowym. Chodzi generalnie o to, że spora cześć providerów (jak nie wszyscy) limitują
transfer danych w tej usłudze. Jest to około 100GB na miesiąc. Może to wydawać się dużo ale trzeba
mieć na względzie, że dotyczy to zarówno download&#39;u jak i upload&#39;u. No i oczywiście, dziś wszystko
mamy w HD i rzadko kto korzysta z internetu sam. Nawet przeciętna strona www waży już kilka MiB.
Przydałoby się zatem wiedzieć ile danych transmitujemy przez sieć każdego dnia, tak by czasem nie
doświadczyć problemów związanych z przekroczeniem transferu. W tym wpisie postaramy się pozyskać te
informacje i wygenerujemy sobie przyzwoite statystyki transferu przy pomocy narzędzia &lt;code&gt;vnstat&lt;/code&gt; .&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Konfiguracja połączenia WiFi pod debianem</title>
      <link>https://morfikov.github.io/post/konfiguracja-polaczenia-wifi-pod-debianem/</link>
      <pubDate>Thu, 15 Oct 2015 19:32:48 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/konfiguracja-polaczenia-wifi-pod-debianem/</guid>
      <description>&lt;p&gt;Sieci bezprzewodowe w obecnych czasach to standard i nie ma chyba miejsca na ziemi gdzie nie dałoby
rady ulokować routera WiFi, do którego można by podłączyć szereg urządzeń. Każdy kto próbował
konfigurować sieć bezprzewodową na debianie, wie, że może to być bardzo upierdliwe, zwłaszcza jeśli
mamy dostęp do wielu AP, które posiadają różne konfiguracje. Wynaleziono, co prawda, automaty, które
mają pomagać w ogarnięciu tego całego bezprzewodowego zamieszania, np. &lt;code&gt;network-manager&lt;/code&gt; czy &lt;code&gt;wicd&lt;/code&gt;
ale w przypadku lekkich stacji roboczych, które nie mają wgranego pełnego środowiska graficznego, a
jedynie jakiś menadżer okien, np. Openbox, to instalacja tych powyższych narzędzi może zwyczajnie
nie wchodzić w grę.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WPA/WPA2 Enterprise i serwer freeradius</title>
      <link>https://morfikov.github.io/post/wpa2-enterprise-serwer-freeradius/</link>
      <pubDate>Tue, 13 Oct 2015 18:42:28 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/wpa2-enterprise-serwer-freeradius/</guid>
      <description>&lt;p&gt;Poniższy wpis ma na celu stworzenie infrastruktury WiFi w oparciu o oprogramowanie freeradius
zainstalowane na debianowym serwerze. Projekt zakłada wykorzystanie osobnego urządzenia NAS (AP), w
tym przypadku jest to router &lt;a href=&#34;http://wiki.openwrt.org/toh/tp-link/tl-wr1043nd&#34;&gt;TP-Link TL-WR1043N/ND
v2&lt;/a&gt;, na którym jest zainstalowane oprogramowanie
OpenWRT. W oparciu o te dwie maszyny spróbujemy skonfigurować protokół WPA2 Enterprise z obsługą
trzech metod uwierzytelniania, tj. EAP-TLS, EAP-TTLS oraz PEAP (v0) . Będziemy również potrzebować
kilku certyfikatów (w tym CA), bez których to pewne mechanizmy mogą nie działać.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Interwał pakietów Beacon w sieciach WiFi</title>
      <link>https://morfikov.github.io/post/interwal-pakietow-beacon-w-sieciach-wifi/</link>
      <pubDate>Mon, 13 Jul 2015 18:12:33 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/interwal-pakietow-beacon-w-sieciach-wifi/</guid>
      <description>&lt;p&gt;Przerabiając analizę pakietów sieciowych, dotarłem w końcu do sieci bezprzewodowych, a te różnią się
nieco od tych swoich przewodowych kuzynów. Generalnie rzecz biorąc nie będę tutaj opisywał samej
analizy pakietów, które sobie przemierzają eter w pobliżu naszych urządzeń WiFi, a jedynie poruszę
kwestię pakietów Beacon, które są rozsyłane przez punkty dostępowe w pewnych odstępach czasu.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>