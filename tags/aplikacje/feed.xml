<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aplikacje on Morfitronik</title>
    <link>https://morfikov.github.io/tags/aplikacje/</link>
    <description>Recent content in Aplikacje on Morfitronik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language>
    <lastBuildDate>Sun, 06 Feb 2022 17:52:00 +0100</lastBuildDate><atom:link href="https://morfikov.github.io/tags/aplikacje/feed.xml" rel="self" type="application/rss+xml" />
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Tryb bezczynności baterii (IDLE mode) w smartfonach z Androidem</title>
      <link>https://morfikov.github.io/post/tryb-bezczynnosci-baterii-idle-mode-w-smartfonach-z-androidem/</link>
      <pubDate>Sun, 06 Feb 2022 17:52:00 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/tryb-bezczynnosci-baterii-idle-mode-w-smartfonach-z-androidem/</guid>
      <description>&lt;p&gt;Gdy zapytamy użytkowników smartfonów z Androidem o to, czy taki sprzęt jest w stanie pracować z
pominięciem układu baterii, zapewne wiele z tych osób odpowiedziałoby, że nie ma takiej opcji, bo
przecież w tych telefonach od lat baterii się już nie da wyciągnąć. Nawet w tych starszych
modelach, po wyjęciu baterii i podłączeniu ładowarki, system w takim urządzeniu nie chciał się
uruchomić. Okazuje się jednak, że nie trzeba wyjmować akumulatora ze smartfona, by to urządzenie
było w stanie działać z pominięciem układu baterii, tj. w tzw. trybie bezczynności baterii (battery
IDLE mode), coś na wzór rozwiązania stosowanego od dekad w laptopach. Niemniej jednak, takiej
funkcjonalności zwykle nie uświadczymy w stock&#39;owych Androidach. Możemy się jednak o nią postarać
ale do tego celu niezbędne będzie nam uzyskanie praw administratora systemu root, choć lepiej wgrać
sobie na smartfon ROM na bazie AOSP/LineageOS. Bez ukorzenionego Androida nie mamy nawet co
podchodzić do implementacji tego mechanizmu. Dodatkowo będzie nam potrzebny &lt;a href=&#34;https://github.com/VR-25/acc&#34;&gt;zaawansowany kontroler
ładowania baterii ACC&lt;/a&gt; (w postaci modułu do Magisk&#39;a) i opcjonalnie też &lt;a href=&#34;https://github.com/MatteCarra/AccA&#34;&gt;graficzna nakładka
ACCA&lt;/a&gt; (do pobrania z F-Droid). W poniższym artykule postaramy się odpowiedzieć na pytanie czy
takie rozwiązanie na bazie IDLE mode w przypadku baterii w smartfonach z Androidem ma w ogóle sens
i czy może nam się ewentualnie do czegoś przydać.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak ukryć nazwę sieci WiFi (ESSID) przed Wigle.net/Google/Mozilla</title>
      <link>https://morfikov.github.io/post/jak-ukryc-nazwe-sieci-wifi-essid-przed-wigle-net-google-mozilla/</link>
      <pubDate>Sat, 29 Jan 2022 17:12:00 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-ukryc-nazwe-sieci-wifi-essid-przed-wigle-net-google-mozilla/</guid>
      <description>&lt;p&gt;Parę dni temu napisał do mnie megabajt z forum DUG z wiadomością, że nazwa mojego WiFi figuruje w
bazie danych serwisu &lt;a href=&#34;https://wigle.net/&#34;&gt;Wigle.net&lt;/a&gt; oraz, że lepiej nie zdradzać nazw swoich WiFi osobom trzecim,
bo ktoś w oparciu o te dane może poznać nasze fizyczne położenie. Jak najbardziej istnieje taka
możliwość, a sam serwis Wigle.net nie jest jedynym, który zbiera informacje o położeniach
geograficznych punktów dostępowych WiFi, bo od lat robi to też Google i Mozilla. Niemniej jednak,
podchodziłbym z pewną dozą ostrożności do danych zgromadzonych w serwisie Wigle.net (i tych
pozostałych dwóch też), bo nie zawsze muszą one być akuratne. W zasadzie to nie zdziwiłem się
zbytnio, że nazwa mojej sieci WiFi figuruje w bazie danych Wigle.net, bo sam ją tam umieściłem
świadomie jakiś czas temu w ramach testów wykorzystując do tego celu aplikację &lt;a href=&#34;https://f-droid.org/en/packages/net.wigle.wigleandroid/&#34;&gt;WiGLE WiFi
Wardriving&lt;/a&gt;, którą można wgrać przez F-Droid na każdy telefon z Androidem. Jako, że nadarzyła się
okazja, to postanowiłem napisać parę słów na temat unikania bycia zmapowanym, tak by jakiś nieznany
nam bliżej osobnik przez przypadek nie wrzucił lokalizacji naszych domowych/firmowych AP do bazy
danych Google/Mozilla czy też wspomnianego wyżej serwisu Wigle.net, o ile oczywiście sobie tego nie
życzymy.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Nagrywanie rozmów telefonicznych w smartfonie z Androidem</title>
      <link>https://morfikov.github.io/post/nagrywanie-rozmow-telefonicznych-w-smartfonie-z-androidem/</link>
      <pubDate>Sun, 23 Jan 2022 18:11:00 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/nagrywanie-rozmow-telefonicznych-w-smartfonie-z-androidem/</guid>
      <description>&lt;p&gt;Właściciele smartfonów mają zwykle podpisane umowy ze swoimi operatorami GSM na świadczenie usług
telefonicznych. Pakiety rozmów oferowane przez tych operatorów już od dłuższego czasu są
nielimitowane, co z kolei zachęca abonentów do głosowego komunikowania się przy pomocy tych małych
lecz przy tym bardzo zaawansowanych technologicznie komputerów. Nie ma obecnie chyba sprawy, której
nie można załatwić telefonicznie, a że coraz dłużej wisimy na słuchawce, to też sporo informacji z
takich rozmów nam bezpowrotnie ucieka, np. imię i nazwisko osoby, z którą rozmawialiśmy, nie
wspominając o całej masie innych rzeczy, które mogą paść podczas choćby negocjowania/przedłużania
jakiegoś kontraktu. Gdy w późniejszym czasie zorientujemy się, że coś jest nie tak, to możemy mieć
poważny problem z udowodnieniem swoich racji, np. że zostaliśmy celowo wprowadzeni w błąd. Gdybyśmy
dysponowali nagraniem z takiej rozmowy, to bez problemu można by się do niego odnieść i nikt by nie
miał wątpliwości po czyjej stronie byłaby racja. Niemniej jednak, smartfony z Androidem mają
ogromny problem z nagrywaniem dźwięku audio podczas tego typu konwersacji, czego efektem jest brak
możliwości niezależnego rejestrowania rozmów telefonicznych. Jeśli jednak posiadamy ukorzenionego
Androida (dostęp do praw administratora root), to możemy te obostrzenia obejść zaprzęgając do pracy
aplikację Call Recorder.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Czym jest tryb lockdown w smartfonie z Androidem</title>
      <link>https://morfikov.github.io/post/czym-jest-tryb-lockdown-w-smartfonie-z-androidem/</link>
      <pubDate>Mon, 27 Sep 2021 05:50:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/czym-jest-tryb-lockdown-w-smartfonie-z-androidem/</guid>
      <description>&lt;p&gt;Jeśli mamy wgranego w miarę nowego Androida (9+) na naszego smartfona i korzystamy aktywnie z tego
urządzenia, to zapewne zdążyliśmy się już przyzwyczaić, że co kilka dni musimy wpisywać ręcznie
hasło do blokady ekranu i to nawet pomimo aktywnej biometrii w ustawieniach systemu. Co ciekawe,
w stock&#39;owych ROM&#39;ach producentów telefonów (nawet w moim Xiaomi Redmi 9), nie ma żadnej opcji,
która byłaby w stanie skonfigurować czas, po którym taki monit z hasłem ma wyskakiwać. Przyznam, że
trochę mnie ten ficzer denerwował ale nie mogłem z nim w zasadzie nic zrobić i trzeba było nauczyć
się go tolerować. Do niedawna nawet nie wiedziałem, że takie pytanie użytkownika o hasło bierze się
z faktu przejścia telefonu w jeden ze jego trybów pracy, tj. &lt;a href=&#34;https://android-developers.googleblog.com/2020/09/lockscreen-and-authentication.html&#34;&gt;tryb lockdown&lt;/a&gt;, w który telefon
jest przełączany automatycznie zwykle co 72 godziny (3 dni). Ludzie mówią, że ten tryb ma chronić
użytkownika smartfona na wypadek utraty urządzenia. Z racji, że aktualnie wgrałem sobie custom ROM
na bazie AOSP/LineageOS, to postanowiłem sprawdzić czy jakieś opcje konfiguracji tego trybu są w
nim dostępne. Przy okazji chciałem nieco bardziej zapoznać się z tym mechanizmem lockdown&#39;u i
zweryfikować na ile może on być użyteczny.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Kopia zapasowa danych smartfona z Androidem (OAndBackupX, Syncthing)</title>
      <link>https://morfikov.github.io/post/kopia-zapasowa-danych-smartfona-z-androidem-oandbackupx-syncthing/</link>
      <pubDate>Sun, 26 Sep 2021 16:44:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/kopia-zapasowa-danych-smartfona-z-androidem-oandbackupx-syncthing/</guid>
      <description>&lt;p&gt;Jak to zwykło się mawiać w świecie IT: ludzie dzielą się na te osobniki, które robią backup i
te, co backup robić będą. Jakiś czas temu pochyliłem się nad zagadnieniem &lt;a href=&#34;https://morfikov.github.io/post/czy-smartfon-z-androidem-bez-google-apps-services-ma-sens/&#34;&gt;czy smartfon z
Androidem bez Google Play Services ma sens&lt;/a&gt;. Poruszyłem tam problem tworzenia kopi zapasowej
danych użytkownika zgromadzonych w telefonie. W tym podlinkowanym artykule zostało przestawione jak
przy pomocy TWRP dokonać pełnego backupu całego systemu urządzenia i o ile pod względem technicznym
takie podejście było jak najbardziej w pełni do zaakceptowania, to jednak to rozwiązanie miało dość
istotną wadę, tj. na czas backup&#39;u trzeba było wyłączyć smartfon. Parę dni temu natrafiłem
na &lt;a href=&#34;https://github.com/machiav3lli/oandbackupx&#34;&gt;narzędzia OAndBackupX&lt;/a&gt;, które jest w stanie zrobić kopię zapasową wszystkich zainstalowanych
w Androidzie aplikacji (oraz ich ustawień), wliczając w to nawet appki systemowe. OAndBackupX jest
o tyle lepszym rozwiązaniem w stosunku do TWRP, że można przy jego pomocy robić kopię danych
pojedynczych aplikacji, a nie od razu całego ROM&#39;u, co nie tylko jest czasochłonne ale również
zjada sporo miejsca na dysku komputera, czy gdzie ten backup zamierzamy przechowywać. Niestety
OAndBackupX wymaga uprawnień root, zatem na stock&#39;owym ROM&#39;ie producenta naszego telefonu nie damy
rady z tego narzędzia skorzystać. Jeśli jednak mamy alternatywny ROM na bazie AOSP/LineageOS, to
przydałoby się rzucić okiem na ten kawałek oprogramowania, bo zdaje się ono być wielce użyteczne,
zwłaszcza w przypadku osób mojego pokroju, czyli linux&#39;iarzy, którzy o backup swoich danych chcą
zatroszczyć się tylko i wyłącznie we własnym zakresie, zaprzęgając do pracy choćby &lt;a href=&#34;https://github.com/syncthing/syncthing&#34;&gt;Syncthing&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Blokowanie dostępu do sensorów (kamera/mikrofon/gps) aplikacjom w Androidzie</title>
      <link>https://morfikov.github.io/post/blokowanie-dostepu-do-sensorow-kamera-mikrofon-gps-aplikacjom-w-androidzie/</link>
      <pubDate>Wed, 22 Sep 2021 02:04:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/blokowanie-dostepu-do-sensorow-kamera-mikrofon-gps-aplikacjom-w-androidzie/</guid>
      <description>&lt;p&gt;Raczej już nikogo nie dziwią różne moduły elektroniczne implementowane w smartfonach pokroju
żyroskopu, akcelerometru, magnetometru czy też i innych czujników realizujących pewne określone
funkcje. Te wszystkie rzeczy potocznie zwykło nazywać się sensorami i na dobrą sprawę zdążyły się
one zadomowić na dobre w tych naszych telefonach i to do tego stopnia, że nawet sobie nie zdajemy
sprawy, że w ogóle one istnieją i non stop działają w tle. Przekopując ostatnio ustawienia Androida,
natknąłem się w opcjach deweloperskich na dość enigmatycznie brzmiącą opcję &lt;code&gt;Sensors Off&lt;/code&gt; , która
była ukryta pod &lt;code&gt;Quick settings developer tiles&lt;/code&gt; . Zaznaczenie tej opcji sprawiło, że do dyspozycji
użytkownika został oddany dodatkowy kafelek (dostępny z poziomu górnej belki), którego zadaniem
jest sterowanie dostępem aplikacji do sensorów smartfona (nie tylko tych wymienionych wyżej ale też
do kamery mikrofonu, czy nawet GPS). Postanowiłem się trochę pobawić tym mechanizmem i zobaczyć czy
można z niego zrobić jakieś użyteczne narzędzie w kontekście ochrony prywatności.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Pozorowanie lokalizacji GPS w Androidzie (mock location)</title>
      <link>https://morfikov.github.io/post/pozorowanie-lokalizacji-gps-w-androidzie-mock-location/</link>
      <pubDate>Tue, 21 Sep 2021 19:33:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/pozorowanie-lokalizacji-gps-w-androidzie-mock-location/</guid>
      <description>&lt;p&gt;Wiele osób nie pozostawia suchej nitki na mechanizmie geolokalizacji zaszytym w smartfonach z
Androidem na pokładzie. No i faktycznie w sporej części przypadków zastrzeżenia jakie są kierowane
pod adresem lokalizacji/GPS w kwestii permanentnego śledzenia nas przez Google nie są przesadzone.
Niektórzy spierają się, że wystarczy włączyć tryb samolotowy (Airplane Mode) w telefonie i nasza
pozycja przestaje być rejestrowana w czasie rzeczywistym ale nie jest to prawdą. Jakiś czas temu
świat obiegła informacja, że &lt;a href=&#34;https://www.thesun.co.uk/tech/7811918/google-is-tracking-you-even-with-airplane-mode-turned-on/&#34;&gt;Android rejestruje dane geolokalizacji&lt;/a&gt; nawet, gdy tryb samolotowy
jest włączony, a telefon nie ma włożonych kart SIM i to przy jednoczesnym wyłączeniu WiFi i BT. Jak
to do końca jest z tą lokalizacją i czy faktycznie nie da się jej wyłączyć w Androidzie? A może
powinniśmy pójść w drugą stronę i zamiast starać się wyłączać lokalizację, to spróbować oszukać
system przez jej pozorowanie? Taki zabieg jest możliwy ale wymagana jest zewnętrzna aplikacja do
pozorowania lokalizacji, np. &lt;a href=&#34;https://github.com/mcastillof/FakeTraveler&#34;&gt;Fake Traveler&lt;/a&gt;, którą trzeba określić w ustawieniach
deweloperskich Androida. Czy ten zabieg wpłynie pozytywnie na lokalizację w kontekście naszej
prywatności? Czy może lepiej jest jednak zostawić telefon w domu i pójść na niejawne spotkanie bez
tego urządzenia?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak blokować rozmowy GSM w smartfonie z Androidem (YACB)</title>
      <link>https://morfikov.github.io/post/jak-blokowac-rozmowy-gsm-w-smartfonie-z-androidem-yacb/</link>
      <pubDate>Sat, 18 Sep 2021 15:22:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-blokowac-rozmowy-gsm-w-smartfonie-z-androidem-yacb/</guid>
      <description>&lt;p&gt;Czy przytrafiła może wam się taka sytuacja, w której to ktoś dzwonił do was z niewiadomego numeru i
przy tym nie był to nikt, kto by zasługiwał na jakąś większą uwagę z waszej strony? Zwykle, gdy mam
do czynienia z kimś takim, to nawet nie odbieram telefonu. Niemniej jednak, najwyraźniej jeden z
moich numerów ostatnio stał się celem ataku jakiegoś spamera z bliżej nieokreślonego call center i
ten czteroliterowy osobnik wydzwania do mnie od kilku dni średnio co 20 minut i to z wielu różnych
numerów. Do tej pory spamerzy w zasadzie omijali mnie szerokim łukiem ale zachowanie tej dość
nieuprzejmej osoby sprawiło, że postanowiłem opracować jakieś rozwiązanie na wypadek, gdyby takich
osobników z gatunku &amp;quot;brakującego ogniwa ewolucji Homo sapiens&amp;quot; było więcej. Po chwili wertowania
netu udało mi się znaleźć appkę, co się zwie &lt;a href=&#34;https://gitlab.com/xynngh/YetAnotherCallBlocker&#34;&gt;Yet Another Call Blocker&lt;/a&gt; (YACB), która w zasadzie
jest tym, czego standardowo brakuje w każdym smartfonie z Androidem na pokładzie, tj. dość
zaawansowanego filtra rozmów przychodzących realizowanych w przestarzałej już technologi GSM, czyli
w zwykłych rozmowach telefonicznych na komórkę. Jako, że ten YACB jest bardzo ciekawym kawałkiem
oprogramowania i do tego w pełni OpenSource (dostępnym w repozytorium F-Droid), to postanowiłem
napisać o nim kilka słów, bo jest to wręcz nieocenione narzędzie w walce z wszelkim syfem pokroju
różnych spamerów z call center.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Optymalizacja procesu ładowania baterii via ACC w smartfonie z Androidem</title>
      <link>https://morfikov.github.io/post/optymalizacja-procesu-ladowania-baterii-via-acc-w-smartfonie-z-androidem/</link>
      <pubDate>Fri, 03 Sep 2021 20:53:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/optymalizacja-procesu-ladowania-baterii-via-acc-w-smartfonie-z-androidem/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://morfikov.github.io/post/jak-wgrac-twrp-recovery-i-magisk-w-xiaomi-redmi-9-galahad-lancelot/&#34;&gt;Odblokowanie bootloader&#39;a&lt;/a&gt; w smartfonie Xiaomi Redmi 9 (Galahad/Lancelot) mamy już z głowy.
Podobnie sprawa wygląda z &lt;a href=&#34;https://morfikov.github.io/post/jak-odblokowac-bootloader-w-xiaomi-redmi-9-galahad-lancelot/&#34;&gt;wgrywaniem na partycję recovery obrazu TWRP&lt;/a&gt; i uzyskiwaniem praw
administratora systemu root za sprawą Magisk&#39;a. Te dwa kluczowe procesy otworzyły nam drogę do
nieco bardziej zaawansowanych prac jeśli chodzi o konfigurację samego urządzenia. W tym artykule
nie będziemy się jeszcze bawić we wgrywanie alternatywnych ROM&#39;ów na bazie AOSP/LineageOS ale za to
zainteresujemy się nieco bardziej procesem ładowania samej baterii w takim telefonie. Chodzi
generalnie o fakt przedłużenia żywotności baterii smartfona za sprawą limitowania maksymalnej
wartości, do jakiej można taką baterię podładować podłączając telefon czy to do portu USB
komputera, czy też do pełnowymiarowej ładowarki. Taki stopień konfiguracji można osiągnąć
zaprzęgając do pracy zaawansowany kontroler ładowania (&lt;a href=&#34;https://github.com/VR-25/acc&#34;&gt;Advanced Charging Controller&lt;/a&gt;, ACC),
który manipuluje niskopoziomowymi ustawieniami kernela linux. W standardowym Androidzie tego typu
funkcjonalności nie uświadczymy, przez co bateria zużywa się parokrotnie szybciej niż powinna, co
przekłada się na wymianę urządzenia na nowe po niecałym roku czy dwóch jego użytkowania. Jeśli nie
uśmiecha nam się wydawać hajsu co roku na nowy telefon tylko dlatego, że nie można w nim wymienić
baterii, to powinniśmy rozważyć rozwiązanie jakie nam daje ACC.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Blokowanie reklam w YouTube na smartfonie z Androidem bez root</title>
      <link>https://morfikov.github.io/post/blokowanie-reklam-w-youtube-na-smartfonie-z-androidem-bez-root/</link>
      <pubDate>Sun, 01 Nov 2020 09:01:00 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/blokowanie-reklam-w-youtube-na-smartfonie-z-androidem-bez-root/</guid>
      <description>&lt;p&gt;Użytkownicy Androida do przeglądania serwisu YouTube używają z reguły tej dedykowanej aplikacji od
Google. Problem z tą appką jest taki, że serwuje ona całą masę reklam, których to nie można wykroić
stosując popularne rozwiązania na bazie &lt;a href=&#34;https://blokada.org/&#34;&gt;Blokada&lt;/a&gt; czy &lt;a href=&#34;https://adaway.org/&#34;&gt;AdAway&lt;/a&gt;. Niektórzy starają się
korzystać z innych aplikacji pokroju &lt;a href=&#34;https://newpipe.schabi.org/&#34;&gt;NewPipe&lt;/a&gt; czy &lt;a href=&#34;https://skytube-app.com/&#34;&gt;SkyTube&lt;/a&gt; ale one mają swoje ograniczenia,
np. nie można pisać komentarzy czy też nie działają powiadomienia push. Kiedyś by rozwiązać ten
problem reklam w appce YouTube &lt;a href=&#34;https://forum.xda-developers.com/apps/magisk/official-magisk-v7-universal-systemless-t3473445&#34;&gt;korzystałem z Magisk&#39;a&lt;/a&gt; i jego modułu YouTube Vanced ale to
rozwiązanie od jakiegoś czasu nie jest już wspierane, choć w dalszym ciągu można z niego korzystać.
Jako, że od paru miechów nie zaglądałem na &lt;a href=&#34;https://vancedapp.com/&#34;&gt;stronę YouTube Vanced&lt;/a&gt;, to postanowiłem sprawdzić
czy coś w tej kwestii się zmieniło. Wygląda na to, że jednak coś drgnęło, bo teraz dostępny jest
Vanced Manager, który to jest w stanie tak skonfigurować nasz telefon, by aplikacja YT Vanced
działała bez problemu nawet na nieukorzenionym Androidzie (nie trzeba mieć root&#39;a). Możemy zatem
zachować całą funkcjonalność serwisu YouTube pozbywając się przy tym reklam oraz segmentów
sponsorowanych, no i też nie musimy nic kombinować z telefonem, tj. odblokowywać bootloader&#39;a czy
wgrywać TWRP. Problematyczne może być jednak zainstalowanie YouTube Vanced, bo czasami powiadomienia
(notyfikacje push) mogą nam nie działać poprawnie. Właśnie dlatego postanowiłem napisać parę słów
na temat instalacji tej aplikacji z wykorzystaniem Vanced Manager w Androidach bez root, by uniknąć
tego jak i innych problemów.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak zweryfikować plik APK aplikacji na Androida</title>
      <link>https://morfikov.github.io/post/jak-zweryfikowac-plik-apk-aplikacji-na-androida/</link>
      <pubDate>Fri, 13 Dec 2019 19:26:14 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-zweryfikowac-plik-apk-aplikacji-na-androida/</guid>
      <description>&lt;p&gt;Część użytkowników smartfonów z Androidem na pokładzie żyje w głębokim przekonaniu, że instalowanie
aplikacji spoza sklepu Google Play nie jest zbyt rozważnym posunięciem. Nie chodzi tutaj tylko o
szeroko rozumiane alternatywne źródła aplikacji, np. serwis apkmirror ale również o Yalp/Aurora
Store czy też repozytoria F-Droid. Zdaniem tych osób pobieranie aplikacji z zewnętrznych źródeł
może skompromitować bezpieczeństwo systemu oraz zagrozić naszej prywatności. No jakby nie patrzeć
wgrywanie czegokolwiek bez zastanowienia się co tak naprawdę instalujemy w systemie nie jest zbyt
mądre. Dlaczego zatem nie weryfikujemy aplikacji obecnych w oficjalnym sklepie Google? Co chwila
przecież można usłyszeć w mediach o syfie, który udało się co prawda z tego sklepu usunąć ale też
jakaś większa liczba użytkowników taką aplikację zdążyła już zainstalować i używała jej przez
dłuższy lub krótszy okres czasu. Rozumowanie na zasadzie, że aplikacje ze sklepu Google Play są
bezpieczne, bo są obecne w sklepie Google Play, daje nam jedynie fałszywe poczucie bezpieczeństwa,
które jest gorsze od całkowitego braku bezpieczeństwa, bo w tym drugim przypadku człowiek
przynajmniej jest świadom czyhających na niego niebezpieczeństw i włącza myślenie. Jak zatem
odróżnić aplikacje, które są w stanie nam wyrządzić krzywdę od tych, które tego nie mają na celu i
czy faktycznie pobieranie aplikacji na Androida z innego źródła niż oficjalny sklep Google Play
jest takie niebezpieczne?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak usunąć aplikacje bloatware ze smartfona z Androidem bez root</title>
      <link>https://morfikov.github.io/post/jak-usunac-aplikacje-bloatware-ze-smartfona-z-androidem-bez-root/</link>
      <pubDate>Sun, 27 Jan 2019 06:01:02 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-usunac-aplikacje-bloatware-ze-smartfona-z-androidem-bez-root/</guid>
      <description>&lt;p&gt;Jeśli mamy smartfon z Androidem na pokładzie, to zapewne każdy za nas zadawał sobie pytanie, czy da
radę z takiego telefonu pozbyć się szeregu aplikacji, z których praktycznie nie korzystamy na co
dzień. Część z tych programów można wyłączyć w ustawieniach systemowych ale są też i takie
aplikacje (głównie producenta telefonu, czy też operatora GSM albo te od Google), których
standardowo nie da się wyłączyć z poziomu działającego Androida. Nawet jeśli wymusimy zatrzymanie
stosownych usług, to za chwilę (lub po restarcie urządzenia) one i tak nam automatycznie wystartują.
Im więcej zbędnych aplikacji działa w tle, tym częstsze wybudzanie telefonu, a więc i szybsze
wyczerpywanie się baterii. Dlatego też jeśli nie korzystamy z wbudowanego w ROM &lt;a href=&#34;https://en.wikipedia.org/wiki/Software_bloat&#34;&gt;bloatware&lt;/a&gt;, to
przydałoby się go usunąć lub chociaż trwale wyłączyć. Co ciekawe, tego typu proces nie musi odbywać
się za sprawą administratora systemu (root), bo w zasadzie każda aplikacja w Androidzie może zostać
zainstalowana/odinstalowana dla konkretnego użytkownika w systemie. Nie potrzebujemy mieć zatem
nawet ukorzenionego Androida, by pozbyć się tego całego syfu z systemu, który naszemu urządzeniu
spędza sen z powiek i nie daje mu się przy tym porządnie wyspać.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Szyfrowanie rozmów i SMS&#39;ów na smartfonie z Androidem (Signal)</title>
      <link>https://morfikov.github.io/post/szyfrowanie-rozmow-i-smsow-na-smartfonie-z-androidem-signal/</link>
      <pubDate>Sun, 26 Mar 2017 18:35:14 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/szyfrowanie-rozmow-i-smsow-na-smartfonie-z-androidem-signal/</guid>
      <description>&lt;p&gt;Każdy z nas ma już raczej w swoim posiadaniu telefon, czy jego nieco bardziej zaawansowaną wersję
określaną mianem smartfona. Te urządzenia to w zasadzie przenośne i do tego bardzo małe komputery,
które umożliwiają nam komunikowanie się z osobami na całym świecie. Wykonywanie połączeń głosowych,
przesyłanie SMS&#39;ów/MMS&#39;ów czy też korzystanie z Internetu w naszych komórkach od dawna jest już
standardem i ciężko byłoby nam się obejść bez tej technologii obecnie. Problem w tym, że nasza
komunikacja jest narażona na podsłuch. W przypadku Internetu większość połączeń jest już szyfrowana
na linii dwóch klientów (E2E, End To End). Natomiast jeśli chodzi o telefony, to tutaj sprawa kuleje
i to bardzo poważnie, bo w zasadzie nasze połączenia głosowe czy SMS&#39;y są do wglądu dla każdych
służb, które z jakiegoś powodu uznają, że mogą naruszać naszą prywatność. Jedyna opcja, która jest
w stanie zabezpieczyć nas przed tego typu praktykami, to szyfrowanie rozmów. Tak się składa, że jest
kilka aplikacji na Androida, które są w stanie realizować tego typu przedsięwzięcie. Jedną z nich
jest darmowa i otwartoźródłowa aplikacja Signal, której się przyjrzymy nieco bliżej w tym artykule.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak skonfigurować połączenie VPN na smartfonie z Androidem</title>
      <link>https://morfikov.github.io/post/jak-skonfigurowac-polaczenie-vpn-na-smartfonie-z-androidem/</link>
      <pubDate>Wed, 07 Dec 2016 18:54:37 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-skonfigurowac-polaczenie-vpn-na-smartfonie-z-androidem/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://morfikov.github.io/post/jak-skonfigurowac-serwer-vpn-na-debianie-openvpn/&#34;&gt;W artykule o postawieniu serwera VPN&lt;/a&gt; poruszyłem jedynie kwestię konfiguracji klienta mającego
system operacyjny z rodziny linux, a konkretnie była to dystrybucja Debian. Niemniej jednak, mając
działający serwer VPN gdzieś tam za granicą, możemy również do niego podłączyć się za pomocą
smartfona z Androidem i to praktycznie z dowolnego miejsca na ziemi. W ten sposób możemy
zabezpieczyć nasze połączenie przed cenzurą internetu, która obecnie jest przeprowadzana na naszych
oczach. Jako, że smartfony są popularniejsze od komputerów czy laptopów i zwykle przesyłamy z nich
tak samo ważne (albo i ważniejsze) dane, to wypadałoby zaszyfrować cały ruch z takiego telefonu.
Niniejszy wpis będzie właśnie dotyczył tego tematu, który zostanie opisany w oparciu &lt;a href=&#34;http://www.neffos.pl/product/details/C5&#34;&gt;smartfon
Neffos C5&lt;/a&gt; od TP-LINK mający na pokładzie Androida w wersji 5.1 (Lollipop).&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Aplikacja tpMiFi do zarządzania routerami 3G/LTE od TP-LINK</title>
      <link>https://morfikov.github.io/post/aplikacja-tpmifi-do-zarzadzania-routerami-3g-lte-tp-link/</link>
      <pubDate>Fri, 25 Nov 2016 20:57:39 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/aplikacja-tpmifi-do-zarzadzania-routerami-3g-lte-tp-link/</guid>
      <description>&lt;p&gt;Jakiś czas temu opisywałem jeden z mobilnych routerów WiFi, który był w stanie realizować połączenie
LTE i udostępniać je w obrębie swojej sieci. Konkretnie był to &lt;a href=&#34;https://morfikov.github.io/post/recenzja-przenosny-router-lte3g-mifi-m7310-od-tp-link/&#34;&gt;hotspot M7310&lt;/a&gt;. W recenzji
tego urządzenia wspomniałem o tym, że dysponując smartfonem jesteśmy w stanie przy jego pomocy
zarządzać tym routerem. Oczywiście potrzebna jest do tego celu specjalna aplikacja tpMiFi
wypuszczona również przez TP-LINK, którą można pobrać bez większego problemu z Google Play. Jako, że
w tamtym wpisie potraktowałem temat tej aplikacji jedynie powierzchownie, to postanowiłem nieco
bardziej się jej przyjrzeć i dokładnie opisać jej właściwości.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Aplikacja Tether do zarządzania urządzeniami TP-LINK przez smartfon</title>
      <link>https://morfikov.github.io/post/aplikacja-tether-do-zarzadzania-urzadzeniami-tp-link-przez-smartfon/</link>
      <pubDate>Thu, 24 Nov 2016 21:02:26 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/aplikacja-tether-do-zarzadzania-urzadzeniami-tp-link-przez-smartfon/</guid>
      <description>&lt;p&gt;TP-LINK ma w swojej ofercie szereg urządzeń, którymi można zarządzać z grubsza na dwa sposoby.
Pierwszym jest raczej znany nam wszystkim panel administracyjny dostępny z poziomu przeglądarki
internetowej zainstalowanej na dowolnym komputerze czy laptopie. Drugim ze sposobów jest
wykorzystanie smartfona i dedykowanej aplikacji Tether na Androida/iOS. Webowy panel administracyjny
zwykł udostępniać nam całą masę opcji, a jak jest w przypadku aplikacji Tether?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Aplikacja tpCamera do obsługi kamer TP-LINK z poziomu smartfona</title>
      <link>https://morfikov.github.io/post/aplikacja-tpcamera-do-obslugi-kamer-tp-link-z-poziomu-smartfona/</link>
      <pubDate>Thu, 10 Nov 2016 21:59:13 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/aplikacja-tpcamera-do-obslugi-kamer-tp-link-z-poziomu-smartfona/</guid>
      <description>&lt;p&gt;Kamery IP to bardzo użyteczne urządzenia, choć ich obsługa nie zawsze jest wygodna. Nie chodzi tutaj
o zarządzenie nimi, bo taka kamera ma przecie swój własny adres IP i możemy bez większego problemu
dostać się do jej panelu administracyjnego przez sieć, w tym też nawet i po WiFi. Niemniej jednak,
gdy jesteśmy w terenie, to bardzo rzadko mamy przy sobie komputer czy nawet laptop, na którym
moglibyśmy zainstalować odpowiedni soft w celu uzyskania podglądu obrazu z takiej kamery. W
przypadku kamer od TP-LINK sprawa wygląda nieco inaczej, bo mamy tutaj możliwość zaprzęgnięcia do
pracy smartfona. Taki telefon można bez problemu połączyć z kamerą, z tym, że potrzebna nam będzie
do tego specjalna aplikacja: tpCamera. Zobaczmy zatem do czego może ona nam się przydać.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>XDA Labs: Repozytorium aplikacji i modułów Xposed</title>
      <link>https://morfikov.github.io/post/xda-labs-repozytorium-aplikacji-modulow-xposed/</link>
      <pubDate>Thu, 10 Nov 2016 15:44:05 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/xda-labs-repozytorium-aplikacji-modulow-xposed/</guid>
      <description>&lt;p&gt;Przeglądając sobie forum XDA w poszukiwaniu pewnych informacji natrafiłem na &lt;a href=&#34;https://forum.xda-developers.com/android/apps-games/labs-t3241866&#34;&gt;XDA Labs&lt;/a&gt;. Niby
jest to aplikacja mająca na celu poprawę doznań przy przeglądaniu tego forum na urządzeniach
mobilnych ale posiada ona też kilka użytecznych funkcji niekoniecznie związanych bezpośrednio z
interakcją ze stroną xda-developers. Przede wszystkim, mamy tutaj dostęp do repozytorium aplikacji
na Androida, mniej więcej coś jak &lt;a href=&#34;https://morfikov.github.io/post/android-repozytorium-aplikacji-opensource-f-droid/&#34;&gt;F-Droid&lt;/a&gt;. Przy pomocy XDA Labs jesteśmy też w stanie w prosty
sposób instalować moduły Xposed. Te powyższe rzeczy sprawiły, że postanowiłem się nieco bliżej
przyjrzeć aplikacji XDA Labs.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Wifi Roaming Fix i SWIFI, czyli roaming w smartfonie</title>
      <link>https://morfikov.github.io/post/wifi-roaming-fix-swifi-roaming-w-smartfonie/</link>
      <pubDate>Thu, 03 Nov 2016 19:33:54 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/wifi-roaming-fix-swifi-roaming-w-smartfonie/</guid>
      <description>&lt;p&gt;Ostatnimi czasy coraz więcej sieci domowych zaczyna być wyposażanych w sprzęt umożliwiający
połączenie bezprzewodowe. Router WiFi ma już chyba znaczna większość z nas ale nie są to jedyne
urządzenia, które są w stanie świadczyć bezprzewodowe usługi sieciowe. Im większy dystans dzieli
odbiornik od nadajnika lub też im więcej przeszkód stoi na bezpośredniej drodze komunikacji, tym
sygnał ulega większej degradacji. Zwykle w takiej sytuacji dokupujemy drugi router WiFi, ewentualnie
&lt;a href=&#34;http://www.tp-link.com.pl/products/list-12.html&#34;&gt;prosty AP&lt;/a&gt;, &lt;a href=&#34;http://www.tp-link.com.pl/products/list-10.html&#34;&gt;wzmacniacz sygnału WiFi&lt;/a&gt; czy też &lt;a href=&#34;http://www.tp-link.com.pl/products/list-18.html&#34;&gt;ekstendery powerline&lt;/a&gt; (PLC). Wszystko po
to, by jakoś przyzwoicie pokryć sygnałem całą przestrzeń użytkową naszego domu czy też miejsc, w
których spędzamy wolny czas. Każde takie urządzenie realizuje połączenie WiFi mniej więcej w ten
sam sposób, tj. zestawia punkt dostępu, do którego podłączamy komputer albo smartfona. O ile w
przypadku desktopów czy laptopów przełączanie się między tymi AP w zależności od siły sygnału nie
stanowi większego problemu, o tyle w przypadku smartfonów z Androidem nie jest już tak różowo, bo
przełączenie następuje jedynie przy całkowitej utracie sygnału z AP. Takiej sytuacji można zaradzić
ale trzeba posiłkować się dodatkowymi aplikacjami. W poniższym artykule zostaną opisane dwa takie
programiki: &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.seah0rse.swififree&#34;&gt;SWIFI&lt;/a&gt; i &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.heleron.wifiroamingfix&#34;&gt;Wifi Roaming Fix&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Android: Blokowanie reklam z AdAway na smartfonie</title>
      <link>https://morfikov.github.io/post/android-blokowanie-reklam-z-adaway-na-smartfonie/</link>
      <pubDate>Sun, 30 Oct 2016 16:21:42 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/android-blokowanie-reklam-z-adaway-na-smartfonie/</guid>
      <description>&lt;p&gt;Dzięki &lt;a href=&#34;https://dnscrypt.org/&#34;&gt;dnscrypt-proxy&lt;/a&gt; jesteśmy w stanie &lt;a href=&#34;https://morfikov.github.io/post/jak-zaszyfrowac-zapytania-dns-na-smartfonie-dnscrypt-proxy/&#34;&gt;zaszyfrować zapytania DNS&lt;/a&gt; bezpośrednio na naszych
smartfonach. Niemniej jednak, w przypadku mojego Neffos&#39;a C5 od TP-LINK, w wielu aplikacjach
pojawiły się reklamy po wdrożeniu mechanizmu szyfrującego. Wcześniej oczywiście wykorzystywałem
&lt;a href=&#34;https://morfikov.github.io/post/blokowanie-reklam-adblock-na-domowym-routerze-wifi/&#34;&gt;adblock&#39;a bezpośrednio na routerze z wgranym firmware OpenWRT/LEDE&lt;/a&gt;, gdzie zapytania DNS do
adserwerów były filtrowane i blokowane bezpośrednio na tym urządzeniu. Po zaszyfrowaniu ruchu DNS w
telefonie, straciłem dostęp do mojego filtra reklam na routerze. Przydałoby się zatem
zaimplementować podobny mechanizm blokujący bezpośrednio na Androidzie, tak by ponownie wszystkie
te reklamy zniknęły przy jednoczesnym zachowaniu całej funkcjonalności płynącej za sprawą
szyfrowanego ruchu DNS. Jednym z rozwiązań jest wykorzystanie &lt;a href=&#34;https://adaway.org/&#34;&gt;narzędzia AdAway&lt;/a&gt;, które przy
pomocy pliku &lt;code&gt;/etc/hosts&lt;/code&gt; i lokalnego serwera www jest w stanie zablokować sporą większość reklam,
na które możemy natknąć się w internecie. Opis instalacji i konfiguracji AdAway zostanie
przedstawiony w niniejszym wpisie.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
