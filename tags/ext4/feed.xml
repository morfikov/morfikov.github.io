<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ext4 on Morfitronik</title>
    <link>https://morfikov.github.io/tags/ext4/</link>
    <description>Recent content in Ext4 on Morfitronik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language>
    <lastBuildDate>Fri, 15 Dec 2023 17:00:00 +0100</lastBuildDate><atom:link href="https://morfikov.github.io/tags/ext4/feed.xml" rel="self" type="application/rss+xml" />
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Trim/discard przy LUKS/LVM na dysku SSD pod Debian linux</title>
      <link>https://morfikov.github.io/post/trim-discard-przy-luks-lvm-na-dysku-ssd-pod-debian-linux/</link>
      <pubDate>Fri, 15 Dec 2023 17:00:00 +0100</pubDate>
      
      <guid>https://morfikov.github.io/post/trim-discard-przy-luks-lvm-na-dysku-ssd-pod-debian-linux/</guid>
      <description>&lt;p&gt;Z okazji zbliżającego się końca roku, postanowiłem nieco ogarnąć swojego Debiana, tj. postawić go
na nowo. Jakby nie patrzeć 4 lata korzystania z tego linux&#39;a z włączonymi gałęziami unstable i
experimental sprawiło, że trochę syfu się nazbierało. Nie chciałem też czyścić całego kontenera
LUKS czy samej struktury LVM z systemowymi voluminami logicznymi na starym dysku HDD, bo
zainstalowany tam system zawsze może się do czegoś przydać, np. do odratowania tego nowego linux&#39;a.
Dlatego też postanowiłem zakupić niedrogi dysk SSD (MLC, używany) i to na nim &lt;a href=&#34;https://morfikov.github.io/post/instalacja-debiana-z-wykorzystaniem-debootstrap/&#34;&gt;postawić świeżego
Debiana z wykorzystaniem narzędzia debootstrap&lt;/a&gt;. Sama instalacja linux&#39;a na dysku SSD nie różni
się zbytnio od instalacji na dysku HDD, za wyjątkiem skonfigurowania w takim systemie mechanizmu
trim/discard. Standardowi użytkownicy linux&#39;a nie muszą zbytnio nic robić, aby ten mechanizm został
poprawnie skonfigurowany. Sprawa się nieco komplikuje, gdy wykorzystywany jest &lt;a href=&#34;https://en.wikipedia.org/wiki/Device_mapper&#34;&gt;device-mapper&lt;/a&gt;,
który mapuje fizyczne bloki urządzenia na te wirtualne, np. przy szyfrowaniu dysku z wykorzystaniem
LUKS/dm-crypt, czy korzystaniu z voluminów logicznych LVM. Dlatego też postanowiłem przyjrzeć się
nieco bliżej zagadnieniu konfiguracji mechanizmu trim/discard na dysku SSD w przypadku
zaszyfrowanego systemu na bazie LUKS+LVM.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Analiza systemu plików EXT4 pod kątem formatowania większych dysków pod linux</title>
      <link>https://morfikov.github.io/post/analiza-systemu-plikow-ext4-pod-katem-formatowania-wiekszych-dyskow-pod-linux/</link>
      <pubDate>Sun, 25 Jul 2021 18:40:00 +0200</pubDate>
      
      <guid>https://morfikov.github.io/post/analiza-systemu-plikow-ext4-pod-katem-formatowania-wiekszych-dyskow-pod-linux/</guid>
      <description>&lt;p&gt;Zapewne każdy użytkownik linux&#39;a tworzył na dysku HDD/SSD partycje sformatowane systemem plików
EXT4. Prawdopodobnie też zastanawiało nas pytanie odnośnie ilości zajmowanego miejsca przez
strukturę samego systemu plików, zwłaszcza w przypadku dysków o sporych rozmiarach (setki GiB, czy
nawet kilka TiB). Jako, że musiałem ostatnio zmigrować kolekcję filmów ze strych dysków na
jeden większy, który miał zostać podłączony pod Raspberry Pi z działającym Kodi na bazie LibreELEC,
to przy okazji postanowiłem ten dysk sformatować w taki sposób, w jaki powinno się do tego zadania
podchodzić wiedząc, że ma się do czynienia z dużym dyskiem, na którym będą przechowywane głównie
duże pliki. Celem tego artykułu jest pokazanie jakie błędy przy tworzeniu systemu plików EXT4 można
popełnić przez posiadanie niezbyt wystarczającej wiedzy z jego zakresu, oraz jak te błędy
wyeliminować przed rozpoczęciem korzystania z tak nie do końca poprawnie przygotowanego do pracy
dysku twardego&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Czy w linux plik SWAP jest lepszy niż partycja wymiany</title>
      <link>https://morfikov.github.io/post/czy-w-linux-plik-swap-jest-lepszy-niz-partycja-wymiany/</link>
      <pubDate>Fri, 22 Mar 2019 16:23:42 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/czy-w-linux-plik-swap-jest-lepszy-niz-partycja-wymiany/</guid>
      <description>&lt;p&gt;Ostatnimi czasy, z racji rozwoju technologicznego, mamy do dyspozycji coraz to szybsze komputery,
co przekłada się w znacznym stopniu na prędkość wykonywania operacji przez ich systemy operacyjne.
Obecnie przeciętnej klasy desktop czy laptop jest już wyposażony w 16G czy nawet 32G pamięci
operacyjnej (w niedługim czasie
nawet &lt;a href=&#34;https://android.com.pl/news/200097-samsung-12-gb-ram-lpddr4x/&#34;&gt;smartfony będą posiadać 12G RAM&lt;/a&gt;).
Spada zatem zapotrzebowanie wykorzystania dysku twardego jako pamięci RAM. W linux używanie
dysku twardego jako rozszerzenie pamięci operacyjnej było i jest w dalszym ciągu realizowane za
sprawą przestrzeni wymiany SWAP. Ta przestrzeń wymiany może być zaimplementowana w postaci osobnej
partycji dysku twardego albo też jako plik umieszczony w obrębie systemu plików, np. ext4. Część
dystrybucji linux&#39;a decyduję się na porzucenie partycji wymiany na rzecz pliku SWAP. Czy taki krok
jest uzasadniony i czy korzystając aktualnie z partycji wymiany powinniśmy zmigrować na plik SWAP?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Czym jest Online ext4 Metadata Check w linux&#39;owym LVM</title>
      <link>https://morfikov.github.io/post/czym-jest-online-ext4-metadata-check-w-linuxowym-lvm/</link>
      <pubDate>Sun, 17 Mar 2019 19:10:30 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/czym-jest-online-ext4-metadata-check-w-linuxowym-lvm/</guid>
      <description>&lt;p&gt;Przeglądając dzisiaj rano logi systemowe wpadł mi w oczy komunikat, którego treść brzmiała mniej
więcej tak: &lt;code&gt;e2scrub Volume group &amp;quot;wd_blue_label&amp;quot; has insufficient free space (0 extents): 64 required&lt;/code&gt; , po którym z kolei można zanotować &lt;code&gt;e2scrub snapshot FAILED, will not check!&lt;/code&gt; oraz
&lt;code&gt;Failed to start Online ext4 Metadata Check for /media/Debian&lt;/code&gt; . Oczywiście ten punkt montowania to
nazwa partycji odnosząca się do jednego z dysków logicznych struktury LVM. Skąd się te błędy
wzięły? Przecież jeszcze do niedawna (przez ostatnich parę lat) wszystko z moim linux&#39;em
rezydującym na dysku (LUKS+LVM) było w porządku, a teraz nagle takie bardzo niepokojące błędy.
Czym jest w ogóle ten &lt;code&gt;e2scrub&lt;/code&gt; i czym jest ten cały &lt;code&gt;Online ext4 Metadata Check&lt;/code&gt; , który
najwyraźniej ma coś wspólnego ze sprawdzaniem systemu plików voluminów logicznych w locie? No i
najważniejsze chyba pytanie -- czemu to nie działa jak należy?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Unexpected Inconsistency: Inode has corrupt extent header</title>
      <link>https://morfikov.github.io/post/unexpected-inconsistency-inode-corrupt-extent-header/</link>
      <pubDate>Fri, 01 Jul 2016 14:27:57 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/unexpected-inconsistency-inode-corrupt-extent-header/</guid>
      <description>&lt;p&gt;Dzisiaj system plików jednej z partycji mojego głównego dysku uległ awarii z niewiadomych przyczyn.
Dałbym sobie nawet głowę uciąć, że wszystkie partycje zostały poprawnie odmontowane podczas
wyłączania maszyny. Niemniej jednak, z jakiegoś powodu podczas startu systemu, ten wyrzuca szereg
komunikatów dotyczących głównego systemu plików, tj. &lt;code&gt;/&lt;/code&gt; . Sam komunikat brzmi mniej więcej tak:
&lt;code&gt;UNEXPECTED INCONSISTENCY; RUN fsck MANUALLY&lt;/code&gt; . Oznacza to, że błędy w systemie plików nie są łatwe
do naprawy i wymagana jest nasza ingerencja w ten proces. Przy sprawdzaniu systemu plików w
poszukiwaniu błędów przy pomocy &lt;code&gt;fsck.ext4&lt;/code&gt; można było dostrzec min. taką wiadomość: &lt;code&gt;Inode 556975 has corrupt extent header&lt;/code&gt; . Co ona tak naprawdę oznacza i czy damy radę wybrnąć z tej sytuacji bez
szwanku?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Data i czas utworzenia pliku w linux&#39;ie (crtime)</title>
      <link>https://morfikov.github.io/post/data-czas-utworzenia-pliku-w-linuxie-crtime/</link>
      <pubDate>Tue, 07 Jun 2016 17:07:54 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/data-czas-utworzenia-pliku-w-linuxie-crtime/</guid>
      <description>&lt;p&gt;Systemy plików, które wykorzystujemy na partycjach swoich dysków, zawierają metadane opisujące
pliki. Domyślnym systemem plików w większości linux&#39;ów (do nich zalicza się też debian) jest EXT4.
Gdy listujemy pliki przy pomocy narzędzia &lt;code&gt;ls&lt;/code&gt; , jesteśmy w stanie uzyskać szereg informacji
opisujących konkretny plik. Mamy tam min. czas ostatniej modyfikacji i-węzła (i-node), czyli tzw.
&lt;code&gt;ctime&lt;/code&gt; . Narzędzia takie jak &lt;code&gt;stat&lt;/code&gt; są w stanie podać również inne czasy, tj. &lt;code&gt;atime&lt;/code&gt; (ostatni czas
dostępu do pliku) oraz &lt;code&gt;mtime&lt;/code&gt; (ostatni czas modyfikacji pliku). Jednak żaden z tych powyższych nie
przekłada się na czas utworzenia pliku. Co prawda, po stworzeniu pliku, wszystkie te czasy są ze
sobą zsynchronizowane ale po przeprowadzeniu szeregu różnych operacji na tym pliku, problematyczne
może być ustalenie pierwotnej daty jego utworzenia. Celem tego artykułu jest pokazanie, jak przy
pomocy &lt;code&gt;debugfs&lt;/code&gt; uzyskać czas utworzenia dowolnie wskazanego pliku w systemie plików EXT4.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Zmiana identyfikatora UUID systemu plików EXT4 i kontenera LUKS</title>
      <link>https://morfikov.github.io/post/zmiana-identyfikatora-uuid/</link>
      <pubDate>Sat, 30 Jan 2016 16:52:05 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/zmiana-identyfikatora-uuid/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://forum.dug.net.pl/viewtopic.php?id=28210&#34;&gt;Na forum DUG&#39;a po raz kolejny pojawił się post&lt;/a&gt; dotyczący unikalnych identyfikatorów, które są
nadawane partycjom dysków twardych. Nie wiem jak sprawa ma się w przypadku windowsów ale linux na
podstawie tych numerów &lt;a href=&#34;https://en.wikipedia.org/wiki/Universally_unique_identifier&#34;&gt;UUID&lt;/a&gt; i (&lt;a href=&#34;https://pl.wikipedia.org/wiki/Globally_Unique_Identifier&#34;&gt;GUID&lt;/a&gt;) jest w stanie identyfikować konkretne urządzenia.
Czasem się zdarza tak, że dwa dyski czy partycje mają taki sam identyfikator, co prowadzi zwykle do
problemów. Kolizja numerów identyfikacyjnych może być wynikiem pozostałości po procesie
produkcyjnym ale może także powstać za sprawą klonowania nośnika za pomocą narzędzia &lt;code&gt;dd&lt;/code&gt; . Tak czy
inaczej, przydałoby się wiedzieć jak ustalić, poprawnie wygenerować czy też zmienić UUID wszędzie
tam, gdzie jest on wykorzystywany i o tym będzie ten wpis.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Zmiana rozmiaru partycji EXT4</title>
      <link>https://morfikov.github.io/post/zmiana-rozmiaru-partycji-ext4/</link>
      <pubDate>Wed, 16 Dec 2015 19:06:57 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/zmiana-rozmiaru-partycji-ext4/</guid>
      <description>&lt;p&gt;Jeśli jeszcze nie dokonaliśmy &lt;a href=&#34;https://morfikov.github.io/post/migracja-systemu-plikow-ext2-i-ext3-na-ext4/&#34;&gt;migracji systemu plików z EXT2/3 na
EXT4&lt;/a&gt;, to powinniśmy rozważyć
tę kwestię z przyczyn czysto praktycznych. W tym wpisie nie będziemy sobie głowy zawracać migracją
między poszczególnymi wersjami systemu plików z rodziny EXT, a raczej skupimy się na tym jak zmienić
rozmiar partycji, której systemem plików jest właśnie EXT4. Bawienie się rozmiarem partycji w tym
przypadku niczym zbytnio się nie różni w stosunku do omawianego wcześniej &lt;a href=&#34;https://morfikov.github.io/post/zmiana-rozmiaru-partycji-ntfs-pod-linuxem/&#34;&gt;systemu plików
NTFS&lt;/a&gt;. Będziemy wykorzystywać
tylko nieco inne narzędzia.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Jak odzyskać usunięte z dysku pliki</title>
      <link>https://morfikov.github.io/post/jak-odzyskac-usuniete-z-dysku-pliki/</link>
      <pubDate>Mon, 30 Nov 2015 19:03:05 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/jak-odzyskac-usuniete-z-dysku-pliki/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://morfikov.github.io/post/usuwanie-plikow-przy-pomocy-shred/&#34;&gt;Całkowite usuwanie plików (shred)&lt;/a&gt; jak i
&lt;a href=&#34;https://morfikov.github.io/post/programowe-sprzetowe-zerowanie-dysku/&#34;&gt;zerowanie całych nośników&lt;/a&gt; ma na celu
nieodwracalne zniszczenie danych. W tych podlinkowanych artykułach próbowaliśmy zatrzeć ślady po
skasowanych plikach. W tym wpisie zaś prześledzimy sobie co tak naprawdę się dzieje po utworzeniu i
skasowaniu pliku, a także spróbujemy odzyskać te z nich, które już nie istnieją w naszym systemie.
Ten artykuł będzie dotyczył jedynie systemu plików z rodziny &lt;code&gt;ext&lt;/code&gt; , głównie &lt;code&gt;ext4&lt;/code&gt; .&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Migracja systemu plików ext2 i ext3 na ext4</title>
      <link>https://morfikov.github.io/post/migracja-systemu-plikow-ext2-i-ext3-na-ext4/</link>
      <pubDate>Thu, 12 Nov 2015 14:16:49 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/migracja-systemu-plikow-ext2-i-ext3-na-ext4/</guid>
      <description>&lt;p&gt;Dyski twarde są w stanie pomieścić setki gigabajtów danych. Ilość informacji, które jesteśmy w
stanie przechować na pojedynczym nośniku, rośnie w zastraszającym tempie. Rozwój technologii nie
jest jedynym polem gdzie prowadzone są prace nad nowymi rozwiązaniami poprawiającymi szereg aspektów
pracy tych urządzeń. Innym polem jest sfera programowa, która w przypadków dysków twardych w dużej
mierze dotyczy systemu plików. Albowiem każda powierzchnia, na której mają być przechowywane dane,
potrzebuje odpowiedniej struktury, którą również można usprawnić. Wobec czego, ten domyślny system
plików w linux&#39;ie, tj. &lt;code&gt;ext&lt;/code&gt; , przeszedł szereg modyfikacji i pojawiły się wersje &lt;code&gt;ext2&lt;/code&gt; , &lt;code&gt;ext3&lt;/code&gt; i
&lt;code&gt;ext4&lt;/code&gt; . Jeśli jakaś partycja dysku twardego zawiera starszą wersję systemu plików, powinniśmy
dokonać migracji na jego nowszy odpowiednik. W przypadku migracji z &lt;code&gt;ntfs&lt;/code&gt; na &lt;code&gt;ext4&lt;/code&gt; (czy też
odwrotnie), nieunikniona jest utrata danych. Czy w przypadku migracji z systemu plików &lt;code&gt;ext2&lt;/code&gt; i
&lt;code&gt;ext3&lt;/code&gt; na &lt;code&gt;ext4&lt;/code&gt; również musimy zgrywać wszystkie dane na osobny nośnik by przeformatować
odpowiednio taki dysk czy partycję? Okazuje się że nie musimy i możemy dokonać takiej migracji bez
obaw o utratę danych i w tym wpisie postaramy się ten zabieg przeprowadzić.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Kompaktowanie katalogów w systemie plików ext4</title>
      <link>https://morfikov.github.io/post/kompaktowanie-katalogow-w-systemie-plikow-ext4/</link>
      <pubDate>Sat, 11 Jul 2015 13:39:06 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/kompaktowanie-katalogow-w-systemie-plikow-ext4/</guid>
      <description>&lt;p&gt;Jakiś czas temu pewien człowiek &lt;a href=&#34;https://forum.dug.net.pl/viewtopic.php?id=27485&#34;&gt;miał dziwaczny
problem&lt;/a&gt;. Jak możemy wyczytać w przytoczonym linku,
system tego użytkownika lekko mówiąc nie zachowywał się tak jak powinien. Objawiało się to przez
dość ekstensywne wykorzystywanie pamięci operacyjnej RAM przy zwykłym listowaniu plików via &lt;code&gt;ls&lt;/code&gt; w
pewnych określonych katalogach. Struktura systemu plików zdaje się być porządku, bo program &lt;code&gt;fsck&lt;/code&gt;
nie zwraca żadnych błędów. Zatem w czym problem?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Opcja extents w systemach plików ext4</title>
      <link>https://morfikov.github.io/post/opcja-extents-w-systemach-plikow-ext4/</link>
      <pubDate>Fri, 10 Jul 2015 15:20:44 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/opcja-extents-w-systemach-plikow-ext4/</guid>
      <description>&lt;p&gt;Dziś postanowiłem sprawdzić jak wygląda struktura plików mojego dysku. Chodzi oczywiście o ich
fragmentację. Zgodnie z tym co pokazał mi &lt;code&gt;fsck&lt;/code&gt; , pofragmentowanych plików jest 350. Po
zapuszczeniu defragmentacji via &lt;code&gt;e4defrag&lt;/code&gt; ilość tych plików spadła do nieco ponad 100 i jeśli by
się przyjrzeć procesowi defragmentacji, to można było zauważyć linijki mające
&lt;code&gt;extents: 100 -&amp;gt; 10&lt;/code&gt; . Wychodzi na to, że plik dalej jest w kawałkach i nie idzie go
zdefragmentować. Jak rozumieć taki zapis?&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Etykieta systemu plików i jej dostosowanie</title>
      <link>https://morfikov.github.io/post/etykieta-systemu-plikow-i-jej-dostosowanie/</link>
      <pubDate>Thu, 18 Jun 2015 18:32:32 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/etykieta-systemu-plikow-i-jej-dostosowanie/</guid>
      <description>&lt;p&gt;W poprzednim wpisie dostosowywaliśmy &lt;a href=&#34;https://morfikov.github.io/post/zarezerwowane-miejsce-w-systemie-plikow-ext4/&#34;&gt;zarezerwowane
miejsce&lt;/a&gt; na określonych
partycjach dla systemowych procesów. Okazuje się także, że zmiana etykiety systemu plików może
przysporzyć wiele problemów początkującym użytkownikom linuxa. Choć jeśli chodzi akurat o nadawanie
czy zmianę etykiet, to tutaj już mamy możliwość przeprowadzenia tej operacji z poziomu narzędzi GUI,
takich jak &lt;code&gt;gparted&lt;/code&gt; , z tym, że niektóre jego komunikaty mogą nieco odstraszać.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Zarezerwowane miejsce w systemie plików ext4</title>
      <link>https://morfikov.github.io/post/zarezerwowane-miejsce-w-systemie-plikow-ext4/</link>
      <pubDate>Thu, 18 Jun 2015 17:29:16 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/zarezerwowane-miejsce-w-systemie-plikow-ext4/</guid>
      <description>&lt;p&gt;Zwykle nie zwracamy uwagi na to jak formatujemy partycje w systemie linux i akceptujemy domyślne
ustawienia jakie przyjęli sobie deweloperzy danej dystrybucji. Nie ma tutaj znaczenia czy
instalujemy świeży system za pośrednictwem instalatora i przy jego pomocy kroimy dysk, czy też
tworzymy partycje indywidualnie już z poziomu jakiegoś zainstalowanego systemu, bądź też płytki czy
pendrive live. Domyślne ustawienia mają spełniać oczekiwania jak największej liczby odbiorców i nie
zawsze nam one odpowiadają. W przypadku formatowania dysku, problematyczne może być rezerwowanie
miejsca dla procesów użytkownika root.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Sprawdzanie błędów systemu plików ext4</title>
      <link>https://morfikov.github.io/post/sprawdzanie-bledow-systemu-plikow-ext4/</link>
      <pubDate>Wed, 17 Jun 2015 20:59:18 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/sprawdzanie-bledow-systemu-plikow-ext4/</guid>
      <description>&lt;p&gt;Systemy plików stosuje się dla różnych nośników danych, takich jak dyski twarde, czy pendrive albo
nawet płyty cd/dvd. Z formalnego punktu widzenia, system plików jest to metoda przechowywania danych
i uzyskiwania do nich dostępu. Bez tego mechanizmu, informacje umieszczone na nośniku przypominały
by jedynie ciąg bitów i nie wiedzielibyśmy gdzie zaczyna się jakiś plik i gdzie się on kończy.
Czasami jednak zdarzają się błędy w systemie plików, które mogą doprowadzić do poważnych awarii
systemu operacyjnego. Dlatego też linux co kilkanaście lub kilkadziesiąt uruchomień sprawdza stan
systemu plików na każdej partycji i naprawia ewentualne błędy. W przypadku gdyby nie były one
naprawiane, mogą pojawić się nowe błędy doprowadzając tym samym do całkowitej zapaści systemu.&lt;/p&gt;</description>
    </item>
    
    <item>
	  <author>Mikhail Morfikov</author>
      <title>Bad sektor w dzienniku systemu plików ext4</title>
      <link>https://morfikov.github.io/post/bad-sektor-w-dzienniku-systemu-plikow-ext4/</link>
      <pubDate>Mon, 15 Jun 2015 22:28:17 +0000</pubDate>
      
      <guid>https://morfikov.github.io/post/bad-sektor-w-dzienniku-systemu-plikow-ext4/</guid>
      <description>&lt;p&gt;Parę dni temu opisywałem jak udało mi się &lt;a href=&#34;https://morfikov.github.io/post/uszkodzony-sektor-na-dysku-i-jego-realokacja/&#34;&gt;realokować uszkodzony sektor&lt;/a&gt; z dysku, który już
przepracował dość długi okres czasu. Nie było to znowu jakoś specjalnie trudne, z tym, że cały
problem dotyczył jakiegoś losowego sektora gdzieś w środku partycji. Jako, że domyślnym systemem
plików na linuxie są te z rodziny &lt;code&gt;ext&lt;/code&gt; (ext2, ext3, ext4) , oraz, że &lt;a href=&#34;https://en.wikipedia.org/wiki/Ext3&#34;&gt;trzecia wersja&lt;/a&gt; tego
systemu plików została wyposażona w dziennik (journal), to trzeba by się zastanowić, co w przypadku
gdy taki uszkodzony sektor trafi się właśnie w dzienniku tego systemu plików?&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
